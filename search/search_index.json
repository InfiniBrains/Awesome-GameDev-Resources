{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Awesome GameDev Resources","text":"<p>Join is on Discord!</p> <p></p> <p>How to use this repo: Read the topics, and if you're unsure if you understand the topics covered here it is a good time for you to revisit them.</p> <p>Ways of reading:</p> <ul> <li>Website: read through your browser the interactive examples and animations will work better in this version;</li> <li>Github: You read through the github repo;</li> <li>PDF: download the latest </li> <li>Amazon Kindle: You can buy the book in Amazon and read it in your kindle device;</li> <li>Contribute!: If you want to go deep and propose changes to repo, use the github repo.</li> </ul>"},{"location":"#badges","title":"Badges","text":"<p>CI: </p> <p>Join us:  .</p> <p>Metrics:  </p> <p>Code of conduct: </p>"},{"location":"#topics","title":"Topics","text":"<ol> <li>Intro to Programming</li> <li>Advanced Programming</li> <li>Artificial Intelligence</li> <li>Developer Portfolio</li> </ol>"},{"location":"#philosophy","title":"Philosophy","text":"<p>This repository aims to be practical, and it will be updated as we test the methodology. Frame it as a guidebook, not a manual. Most of the time, we are constrained by the time, so in order to move fast, we won't cover deeply some topics, but the basics that allows you to explore by yourself or point the directions for you to study in other places acting as a self-taught student, so you really should look for more information elsewhere if you feels so. I use lots of references and highly incentive you to look for other too and propose changes in this repo. Sometimes, it will mostly presented in a chaotic way, which implies that you will need to explore the concepts by yourself or read the manual/books. Every student should follow your own path to learning, it is impossible to cover every learning style, so it is up to you to build your own path and discover the best way to learn. What worked for me or what works for a given student probably won't work for you, so dont compare yourself to others too much, but be assured that we're here to help you to succeed. If you need help, just send private messages, or use public forums such as github issues and discussions.</p>"},{"location":"#reflections-on-teaching-and-learning-processes","title":"Reflections on teaching and learning processes","text":""},{"location":"#philosophies","title":"Philosophies","text":"<p>I would like to categorize the classes into philosophies. so I can address them properly: - Advanced classes: are more focused on work and deliveries than theory, they are tailored toward the student goals more than the closed boxes and fixed expected results. It comprehends AI and Adv. AI; - Introduction classes: are focused on theory and practice. In those classes, they have more focus on structural knowledge and basic content. It comprehends classes such as Introduction to Programming. - Guidance: are more focused on how can we bring the student to the highest standard and get ready to be hired. It comprehends classes such as Capstone, Portfolio classes, and Mentoring activities.</p>"},{"location":"#learning-styles","title":"Learning Styles","text":"<ul> <li>Visual: You prefer using pictures, images, and spatial understanding;</li> <li>For this style I recently acquired a pen-tablet monitor, so I will be adding this type of content more often.</li> <li>I also use lots of diagrams via code2flow, sequence diagram and others </li> <li>I assume my handwriting is not the best, but I compensate it with lots of diagrams and pictures, and always project what I write in the computer. </li> <li>Aural: You prefer using sound and music;<ul> <li>I always link to youtube videos and podcasts, so they can follow up with extra content and material;</li> </ul> </li> <li>Verbal: You prefer using words, both in speech and writing;<ul> <li>I setup my machine to record specific topics that might be hard to undestand in just one go, and I did some experimental recordings, but I am still struggling with video editing. I will be adding more videos in the future. </li> <li>My main issue here is that I am not a native english speaker, so I am still struggling with the language, but I am trying to improve it.</li> <li>Other issue that I can name is eye-to-eye contact. It feels overburned to me to keep eye-to-eye contact, that I usually look away.</li> </ul> </li> <li>Physical: You prefer using your body, hands and sense of touch;<ul> <li>Given my cultural origin, I am usually over expressive in this field, and I need more fine tuning my proxemic. Brazilians commonly talk and walk closer to each other than americans. </li> <li>While lecture I really enjoy to use my hands to express myself, and I am trying to use more body language to express myself.</li> </ul> </li> <li>Logical: You prefer using logic, reasoning and systems;<ul> <li>I always craft and test teaching experiences to push them to think and reason about the topics. </li> <li>I always use tools such as beecrowd to let them code and test their ability to solve problems.</li> </ul> </li> <li>Social: You prefer to learn in groups or with other people;<ul> <li>I incentive them to do in-class assignments in pairs, and do group assignments. But I recognize this might be a problem for some students, so I am trying to find a way to make it more inclusive. </li> <li>Strangelly for me, some students prefer to socialize with me by booking office hours more than working together. Probably next semester I will reserve a time to do a type of co-working time when I can be available to help them in their assignments.</li> </ul> </li> <li>Solitary: You prefer to work alone and use self-study.<ul> <li>Sometimes and some topics you really need to study by yourself, and it can be the best way for some. But I warn them about the effects of loneliness and impostor syndrome.</li> <li>This is usually the most common way to learn, and I always keep an eye on the ones that are struggling to keep up with the class. I always try to reach them and help them to keep up with the class.</li> <li>To compensate this solitude I incentive them to present their work to the class no they can experience having attention even when the lack social skills.</li> </ul> </li> </ul>"},{"location":"#teaching-styles","title":"Teaching Styles","text":"<p>For every type of style, I try to give a bit of insights:</p> <ul> <li>Authoritative: control the classroom and maintain discipline; <ul> <li>I create a set of rules that should be followed in order to guarantee the student's success; </li> </ul> </li> <li>Delegator: give students control of their learning;<ul> <li>For the intro classes I follow more this strategy;</li> </ul> </li> <li>Facilitator: guide students and help them learn by themselves;<ul> <li>I usually follow this strategy on advanced classes;</li> </ul> </li> <li>Demonstrator: explain and show things to students;<ul> <li>I usully provide a stream of references or even create my own content to show them how to do things;</li> </ul> </li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>Give us stars! Click -&gt; </p> <p></p>"},{"location":"advanced/","title":"Advanced Programming","text":"<p>This course builds on the content from Introduction to Programming. Students study the Object Oriented Programming (OOP) Paradigm with topics such as objects, classes, encapsulation, abstraction, modularity, inheritance, and polymorphism. Students examine and use structures such as arrays, structs, classes, and linked lists to model complex information. Pointers and dynamic memory allocation are covered, as well as principles such as overloading and overriding. Students work to solve problems by selecting implementation options from competing alternatives.</p>"},{"location":"advanced/#requirements","title":"Requirements","text":"<ul> <li>Introduction to Programming</li> <li>Advanced Programming</li> </ul>"},{"location":"advanced/#textbook","title":"Textbook","text":"<ul> <li>C++ Early Objects, 10<sup>th</sup> Edition, Gaddis, Walters, Muganda, Pearson, 2019. ISBN 978-0135235003</li> </ul>"},{"location":"advanced/#student-centered-learning-outcomes","title":"Student-centered Learning Outcomes","text":"Bloom's Taxonomy on Learning Outcomes <p>Upon completion of the Advanced Programming course in C++, students should be able to:</p> <ul> <li>Articulate key concepts of Object-Oriented Programming (OOP), including objects, classes, encapsulation, abstraction, modularity, inheritance, and polymorphism.</li> <li>Exhibit a comprehensive understanding of the OOP paradigm and its fundamental principles.</li> <li>Differentiate between various structures (arrays, structs, classes, and linked lists) and proficiently apply them in modeling complex information.</li> <li>Apply OOP principles effectively to design and implement solutions for real-world problems.</li> <li>Utilize Pointers and Dynamic Memory Allocation.</li> <li>Effectively employ pointers and dynamic memory allocation in C++ programming.</li> <li>Analyze and evaluate competing alternatives for implementation options when solving programming problems. Break down complex problems into manageable components using OOP concepts.</li> <li>Evaluate the effectiveness of different implementation strategies in addressing programming challenges.</li> <li>Critically assess the advantages and disadvantages of using structures like arrays, structs, classes, and linked lists in specific scenarios.</li> <li>Develop solutions for programming challenges by integrating and synthesizing various OOP principles.</li> <li>Implement advanced programming concepts, such as overloading and overriding, to enhance code functionality.</li> </ul>"},{"location":"advanced/#schedule","title":"Schedule","text":"<p>Warning</p> <p>This is a work in progress, and the schedule is subject to change. Every change will be communicated in class. Use the github repo as the source of truth for the schedule and materials. The materials provided in canvas are just a copy for archiving purposes and might be outdated.</p> <p>College dates for the Spring 2024 semester:</p> Date Event Jan 16 Classes Begin Jan 16 - 22 Add/Drop Feb 26 - March 1 Midterms March 11 - March 15 Spring Break March 25 - April 5 Registration for Fall Classes April 5 Last Day to Withdraw April 8 - 19 Idea Evaluation April 12 No Classes - College remains open April 26 Last Day of Classes April 29 - May 3 Finals May 11 Commencement"},{"location":"advanced/#review","title":"Review","text":"<ul> <li>Week 1. 2024/01/15</li> <li>Topic: <ul> <li>Review: variables, decision making, iteration, functions, strings, and arrays. Structs and 2D arrays</li> <li>Setup: Github, CLion, Github Actions</li> </ul> </li> </ul>"},{"location":"advanced/#introduction-to-oop","title":"Introduction to OOP","text":"<ul> <li>Week 2. 2024/01/22</li> <li>Topic: Introduction to OOP Objects, classes, member functions, constructors, destructors</li> </ul>"},{"location":"advanced/#more-about-oop","title":"More about OOP","text":"<ul> <li>Week 3. 2024/01/29</li> <li>Topic: Private member functions, object passing, object composition, structs and unions</li> </ul>"},{"location":"advanced/#pointers","title":"Pointers","text":"<ul> <li>Week 4. 2024/02/05</li> <li>Topic: Address operator, pointer variables, arrays and pointers, pointer math, pointers as function parameters and return types, dynamic memory allocation</li> </ul>"},{"location":"advanced/#pointers-continued","title":"Pointers continued","text":"<ul> <li>Week 5. 2024/02/12</li> <li>Topic: this pointer, constant member functions, static members, friends, member-wise assignment, copy constructors</li> </ul>"},{"location":"advanced/#operators-and-more","title":"Operators and more","text":"<ul> <li>Week 6. 2024/02/19</li> <li>Topic: Operator overloading, type conversion operators, convert constructors, aggregation and composition, namespaces</li> </ul>"},{"location":"advanced/#midterms","title":"Midterms","text":"<ul> <li>Week 7. 2024/02/26</li> <li>Topic: Midterms</li> </ul>"},{"location":"advanced/#vectors-arrays-linked-lists_","title":"Vectors, Arrays &amp; Linked Lists_","text":"<ul> <li>Week 8. 2024/03/04</li> <li>Topic: Vectors and arrays of objects: Linked lists, linked list operations</li> </ul>"},{"location":"advanced/#break","title":"Break","text":"<ul> <li>Week 09. 2024/03/11</li> <li>Topic: Spring BREAK. No classes this week.</li> </ul>"},{"location":"advanced/#inheritance","title":"Inheritance","text":"<ul> <li>Week 10. 2024/03/18</li> <li>Topic: inheritance, protected members, constructors/destructors</li> </ul>"},{"location":"advanced/#override","title":"Override","text":"<ul> <li>Week 11. 2024/03/25</li> <li>Topic: inheritance, overriding base class functions</li> </ul>"},{"location":"advanced/#polymorphism","title":"Polymorphism","text":"<ul> <li>Week 12. 2024/04/01</li> <li>Topic: inheritance hierarchies, polymorphism and virtual member functions, abstract base classes and pure virtual functions</li> </ul>"},{"location":"advanced/#exceptions-templates-and-stl","title":"Exceptions, Templates and STL","text":"<ul> <li>Week 13. 2024/04/08</li> <li>Topic: Exceptions, function and class templates, STL and STL containers, iterators</li> </ul>"},{"location":"advanced/#stack-and-queue","title":"Stack and queue","text":"<ul> <li>Week 14. 2024/04/15</li> <li>Topic: Stack and queue</li> </ul>"},{"location":"advanced/#project-presentation","title":"Project Presentation","text":"<ul> <li>Week 15. 2024/04/22</li> <li>Topic: Work sessions for final project</li> </ul>"},{"location":"advanced/#finals","title":"Finals","text":"<ul> <li>Week 16. 2024/04/29</li> <li>Topic: Finals Week</li> </ul>"},{"location":"advanced/01-introduction/","title":"Advanced Programming with C++","text":""},{"location":"advanced/01-introduction/#recapitulation","title":"Recapitulation","text":"<p>Before we start, let's recapitulate what we have learned in the previous course. Use the links below to refresh your memory. Or go straigth to the Introduction to Programming Course.</p> <ul> <li>Variables</li> <li>Decision-making</li> <li>Loops;</li> <li>Functions;</li> <li>Strings;</li> <li>Arrays;</li> <li>Multidimensional arrays;</li> </ul>"},{"location":"advanced/01-introduction/#structs","title":"Structs","text":"<p>Structs in C++ are a way to represent a collection of data packed sequentially into a single data structure. </p> <pre><code>struct Enemy\n{\n    double health; \n    float x, y, z;\n    int score;\n};\n</code></pre> <p>The code above defines a type named as <code>Enemy</code>. This type has members(fields) named <code>health</code>, <code>score</code> with different types, and <code>x</code>, <code>y</code> and <code>z</code> with the same type. </p> <pre><code>struct Enemy\n{\n    double health; // 8 bytes\n    float x, y, z; // 4 bytes each. 12 bytes total\n    int score; // 4 bytes\n};\n</code></pre> <p>The memory usage of a struct is defined roughly by the sum of the memory usage of its members. Assuming the default sizing of common data types in C++, in the example above, the struct will use 8 bytes for the <code>double</code>, 3 times 4 bytes for the <code>float</code>s and 4 bytes for the <code>int</code>. The total memory usage for the struct will be 20 bytes.</p>"},{"location":"advanced/01-introduction/#data-alignment","title":"Data Alignment","text":"<p>The memory usage of a struct is not always exactly the sum of the memory usage of its members. The compiler may add padding bytes between the members of a struct to align the data in memory. This is done to improve the performance of the program. If you are programming in a multi-platform, cross-platform or even using different compilers, the size of the struct may vary even if it is the same.</p> <pre><code>struct InneficientMemoryLayoutExample\n{\n    char a;\n    int b;\n    char c;\n    char d;\n    char e;\n};\n</code></pre> <p>The struct above stores a total of 8 bytes of data, but the compiler allocates more. It will add 3 padding bytes between the <code>int</code> and the last <code>char</code> to align the data with biggest field in the struct. In this case, the total memory usage of the struct will be 12 bytes instead of the expected 8.</p> <pre><code>struct InneficientMemoryLayoutExample\n{\n    char a; // 1 byte\n    // compiler will add 3 padding bytes here\n    int b; // 4 bytes\n    char c; // 1 byte\n    char d; // 1 bytes\n    char e; // 1 byte\n    // compiler will add 1 padding byte here\n}; // total of 12 bytes allocated for this layout\n</code></pre> <p>You might think C++ compilers are smart and reorder the fields for us, but in order to maintain compatibility to C, the standard forbids it. So if you want to pack more data you will have to reorder the layout manually to something like this:</p> <pre><code>struct EfficientMemoryLayoutExample\n{\n    int b; // 4 bytes\n    char a; // 1 byte\n    char c; // 1 byte\n    char d; // 1 bytes\n    char e; // 1 byte\n}; // total of 8 bytes allocated for this layout\n</code></pre> <p>Alternatively you can use the <code>#pragma pack</code> directive to tell the compiler to pack the data in memory without padding bytes. But be aware that it will force the compiler to do more memory operations to get the data, thus it will slow your software. Besides that, <code>pragma pack</code> may not work in all compilers. </p> <pre><code>#pragma pack(push, 1) // push current alignment to stack and set alignment to 1 byte boundary\nstruct EfficientMemoryLayoutExample\n{\n    char a; // 1 byte\n    int b; // 4 bytes\n    char c; // 1 byte\n    char d; // 1 bytes\n    char e; // 1 byte\n};\n#pragma pack(pop)\n</code></pre>"},{"location":"advanced/01-introduction/#bitfields","title":"Bitfields","text":"<p>If you really want to specify the layout location for each field and want to be sure that in will work on every compiler/platform, you will have to specify the number of bits each field will be able to use. This is called bitfields. But if you follow this path, you will have to be aware of the endianness of the platform you are working on.</p> <pre><code>struct BitfieldExample\n{\n    char a : 8; // 8 bits = 1 byte\n    int b : 32; // 32 bits = 4 bytes\n    char c : 8; // 8 bits = 1 byte\n    char d : 8; // 8 bits = 1 byte\n    char e : 8; // 8 bits = 1 byte\n}; // total of 8 bytes allocated for this layout\n</code></pre> <p>Another nice application of bitfields is when you do not want to use the full range of a data type. For example, if you want to store a number between 0 and 7, as in a chess game or other board games, you can use a <code>char</code> and waste 5 bits or you can use a bitfield and use only 3 bits.</p> <pre><code>struct BitfieldExample\n{\n    char row : 3; // 3 bits\n    char column : 3; // 3 bits\n    unsigned int state : 2; // 2 bit. will store 0, 1, 2 or 3\n}; // total of 1 byte allocated for this layout\n</code></pre>"},{"location":"advanced/01-introduction/setup/","title":"Advanced Programming","text":""},{"location":"advanced/01-introduction/setup/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Syllabus</li> <li>Safe and welcoming space</li> <li>Privacy and FERPA Compliance</li> <li>Activities<ul> <li>Setup Github repository</li> <li>Setup your IDE</li> <li>Setup your Assignments project</li> <li>Check Github Actions</li> </ul> </li> <li>Homework</li> </ul>"},{"location":"advanced/01-introduction/setup/#safe-and-welcoming-space","title":"Safe and welcoming space","text":"<p>TLDR: Be nice to each other, and don't copy code from the internet.</p> <ul> <li>Code of Conduct</li> <li>Notes on Submissions and Plagiarism</li> </ul> <p>Some assignments can be hard, and you may feel tempted to copy code from the internet. Don't do it. You will only hurt yourself. You will learn nothing, and you will be caught. Once you get caught, you will be reported to the Dean of Students for academic dishonesty.</p> <p>If you are struggling with an assignment, please contact me in my office-hours, or via discord. I am really slow at answering emails, so do it so only if something needs to be official. Quick questions are better asked in discord by me or your peers.</p>"},{"location":"advanced/01-introduction/setup/#privacy-and-ferpa-compliance","title":"Privacy and FERPA Compliance","text":"<p>FERPA WAIVER</p> <p>If you are willing to share your final project publicly, you MUST SIGN this FERPA waiver.</p> <p>via GIPHY</p> <p>This class will use github extensively, in order to keep you safe, we will use private repositories. This means that only you and me will be able to see your code. In your final project, you must share it with your pair partner, and with me.</p>"},{"location":"advanced/01-introduction/setup/#activities","title":"Activities","text":"<p>TLDR: there is no TLDR, read the whole thing.</p> <p>via GIPHY</p>"},{"location":"advanced/01-introduction/setup/#setup-github-repository","title":"Setup Github repository","text":"<p>Gitkraken</p> <p>Optionally you might want to use GitKraken as your git user interface. Once you open it for the first time, signup using your github account with student pack associated. Install Gitkraken</p> <ol> <li>Signup on github and apply for Github Student Pack.  Apply for Student Pack</li> <li>Send me your github username in class, so I will share the assignment repository with you;</li> <li>Create a private repository by clicking \"use as template\" the repository  InfiniBrains/csi240 or Create CSI240 repository</li> <li>Share your repository with me. Click on settings, then collaborators, and add me as a collaborator. My username: @tolstenko</li> <li>Clone your repository to your computer. You can use the command line, or any Git GUI tool. I recommend  GitKraken</li> </ol>"},{"location":"advanced/01-introduction/setup/#setup-your-ide","title":"Setup your IDE","text":"<p>Other IDEs</p> <p>Optionally you might want to use any other IDE, such as Visual Studio, VSCode, XCode, NeoVim or any other, but I will not be able to help you with that.</p> <p>I will use CLion in class, and I recommend you to use it as well so you can follow the same steps as me. It is free for students. And it works on Windows, Mac and Linux.</p> <ol> <li>Apply for student license for  JetBrains or  Apply Form</li> <li>You can install  CLion only or install CLion via their  Install Toolbox</li> <li>Open CLion for the first time, and login with your JetBrains account you created earlier;</li> </ol>"},{"location":"advanced/01-introduction/setup/#setup-your-assignments-project","title":"Setup your Assignments project","text":"<p>Common problems</p> <p>Your machine might not have git on your path. If so, install it from git-scm.com and make sure you tick the option to add git to your PATH.</p> <ol> <li>Open your IDE, and click on \"Open Project\";</li> <li>Select the folder where you cloned your repository;</li> <li>Click on \"Open as Project\" or \"Open as CMake Project\";</li> <li>Wait for CMake to finish generating the project;</li> <li>On the top right corner, select the target you want to run/debug;</li> </ol>"},{"location":"advanced/01-introduction/setup/#check-github-actions","title":"Check Github Actions","text":"<p>Github Actions</p> <p>Github Actions is a CI/CD tool that will run your tests automatically when you push your code to github. It will also run your tests when you create a pull request. It is a great tool to make sure your code is always working.</p> <p>You might want to explore the folder <code>.github/workflows</code> to see how it works, but you don't need to change anything there.</p> <p></p> <p>Every commit you push to your repository will be automatically tested through Github Actions. You can see the results of the tests by clicking on the \"Actions\" tab on your repository.</p> <ol> <li>Go to your repository on github;</li> <li>Click on the \"Actions\" tab;</li> <li>Click on the \"Build and Test\" action;</li> <li>Click on the latest commit;</li> <li>On the jobs panel, Click on the assignment you want to see the results;</li> <li>Read the logs to see if your tests passed or failed;</li> <li>It is your job to read the README.md from every assignment and fulfill the requirements;</li> <li>You can run/debug the tests locally by targeting the assignmentXX_tests;</li> </ol>"},{"location":"advanced/01-introduction/setup/#homework","title":"Homework","text":"<p>via GIPHY</p> <ol> <li>Read the Syllabus fully. Pay attention to the schedule, outcomes and grading;</li> <li>Do all assignments on Canvas, specially the git training;</li> </ol>"},{"location":"advanced/02-oop/","title":"Introduction to Object-Oriented Programming","text":"<p>C++ in a language that keeps evolving and adding new features. The language is now a multi-paradigm language, which means that it supports different programming styles, and we are going to cover the Object-Oriented Programming (OOP) paradigm in this course.</p> <p></p>"},{"location":"advanced/02-oop/#what-is-oop","title":"What is OOP?","text":"<p>Object-Oriented Programming is a paradigm that encapsulate data and their interactions into a single entity called object. The object is an instance of a class, which is a blueprint for the object. The class defines the data and the operations that can be performed on the data.</p>"},{"location":"advanced/02-oop/#class-declaration","title":"Class declaration","text":"<p>Here goes a simple declaration of a class Greeter:</p> Greeter.h<pre><code>#include &lt;string&gt;\nclass Greeter {\n    std::string name; // this is a private attribute\npublic:\n    Greeter(std::string username) {\n        name = username;\n    }\n    void Greet(){\n        std::cout &lt;&lt; \"Hello, \" &lt;&lt; name &lt;&lt; \"!\" &lt;&lt; std::endl;\n    }\n};\n</code></pre> main.cpp<pre><code>#include \"Greeter.h\"\nint main() {\n    Greeter greeter(\"Stranger\");\n    greeter.Greet();\n}\n</code></pre> <p>If you run this code, the output will be:</p> <pre><code>Hello, Stranger!\n</code></pre> <p>Here goes a rework of the previous example using more robust concepts and multiple files:</p> Greeter.h<pre><code>#include &lt;string&gt;\nclass Greeter {\n    // class members are private by default\n    std::string name;\npublic:\n    // public constructor\n    // explicit to avoid implicit conversions\n    // const to avoid modification\n    // ref to avoid copying\n    explicit Greeter(const std::string&amp; name);\n    ~Greeter(); // public destructor\n    void Greet(); // public method\n};\n</code></pre> Greeter.cpp<pre><code>#include \"Greeter.h\"\n#include &lt;iostream&gt;\n// :: is the scope resolution operator\nGreeter::Greeter(const std::string&amp; name): name(name) {\n    std::cout &lt;&lt; \"I exist and I received \" &lt;&lt; name &lt;&lt; std::endl;\n}\nGreeter::~Greeter() {\n    std::cout &lt;&lt; \"Goodbye, \" &lt;&lt; name &lt;&lt; \"!\" &lt;&lt; std::endl;\n}\nvoid Greeter::Greet() {\n    std::cout &lt;&lt; \"Hello, \" &lt;&lt; name &lt;&lt; \"!\" &lt;&lt; std::endl;\n}\n</code></pre> main.cpp<pre><code>#include \"Greeter.h\"\nint main() {\n    Greeter greeter(\"Stranger\");\n    greeter.Greet();\n    // cannot use greeter.name because it is private\n}\n</code></pre>"},{"location":"advanced/02-oop/#advantages-of-oop","title":"Advantages of OOP","text":""},{"location":"advanced/02-oop/#modularity","title":"Modularity","text":"<p>Classes can be used it in different parts of your code. You can even create libraries and share it with other people.</p>"},{"location":"advanced/02-oop/#encapsulation","title":"Encapsulation","text":"<p>Classes can hide their implementation details from the developer. The developer only needs the header file to use the class which acts as an interface.</p>"},{"location":"advanced/02-oop/#inheritance","title":"Inheritance","text":"<p>Classes can inherit from other classes. This allows you to reuse code and extend the functionality of existing classes expanding the original behavior. </p> <p>We will cover details about inheritance in another moment.</p>"},{"location":"advanced/02-oop/#polymorphism","title":"Polymorphism","text":"<p>By its roots, the word polymorphism means \"many forms\". It can be applied to classes in many different aspects:</p> <ul> <li>Function overload: Class can have multiple definitions of the same member function, and the compiler will choose the correct one based on the type of the object.</li> <li>Casting: Classes can be casted to other classes. This allows you to treat an object of a derived class as an object of its base class, or more complex behaviors;</li> </ul> <p>We will cover details about polymorphism in another moment.</p>"},{"location":"advanced/02-oop/#class-internals","title":"Class internals","text":""},{"location":"advanced/02-oop/#constructors","title":"Constructors","text":"<p>Constructors are special methods, they are called when an object is created, and don't return anything. They are used to initialize the object. If you don't define a constructor, the compiler will generate a default constructor for you.</p> <pre><code>class Greeter {\n    std::string name;\npublic:\n    Greeter(const std::string&amp; name) {\n        this-&gt;name = name;\n    }\n};\n</code></pre>"},{"location":"advanced/02-oop/#default-constructor","title":"Default constructor","text":"<p>A default constructor should be one of the following: - A constructor that can be called with no arguments;  - A constructor that can be called with default arguments;</p> <pre><code>class Greeter {\n    std::string name;\npublic:\n    // Default constructor\n    Greeter() {\n        this-&gt;name = \"Stranger\";\n    }\n};\n</code></pre> <p>or</p> <pre><code>class Greeter {\n    std::string name;\npublic:\n    Greeter(const std::string&amp; name = \"Stranger\") {\n        this-&gt;name = name;\n    }\n};\n</code></pre> <p>If no constructor is defined, the compiler will generate a default constructor for you.</p>"},{"location":"advanced/02-oop/#copy-constructor","title":"Copy constructor","text":"<p>A copy constructor is a constructor that takes a reference to an object of the same type as the class. It is used to initialize an object with another object of the same type.</p> <pre><code>class Greeter {\n    std::string name;\npublic:\n    Greeter(const Greeter&amp; other) {\n        this-&gt;name = other.name;\n    }\n};\n</code></pre>"},{"location":"advanced/02-oop/#move-constructor","title":"Move constructor","text":"<p>A move constructor is a constructor that takes a reference to an object of the same type as the class. It is used to initialize an object with another object of the same type. The difference between a copy constructor and a move constructor is that the move constructor takes ownership of the data from the other object, while the copy constructor copies the data from the other object.</p> <pre><code>class Greeter {\n    std::string name;\npublic:\n    Greeter(Greeter&amp;&amp; other) {\n        this-&gt;name = std::move(other.name);\n    }\n};\n</code></pre>"},{"location":"advanced/02-oop/#explicit-constructor","title":"Explicit constructor","text":"<p>A constructor that can be called with only one argument is called an explicit constructor. This means that the compiler will not allow implicit conversions to happen.</p> <p>Explicit constructors are useful to avoid unexpected behavior when calling the constructor.</p> <pre><code>class Greeter {\n    std::string name;\npublic:\n    explicit Greeter(const std::string&amp; name) {\n        this-&gt;name = name;\n    }\n};\n</code></pre>"},{"location":"advanced/02-oop/#destructors","title":"Destructors","text":"<p>Destructors are special methods, they are called when an object is destroyed.</p> <p>Following the single responsibility principle, the destructor should be responsible for cleaning up the dynamically allocated data the object is holding.</p> <p>If no destructor is defined, the compiler will generate a default destructor for you that might not be enough to clean up the data.</p> <pre><code>class IntContainer {\n    int* data;\n    // other members / methods\npublic:\n    // other members / methods\n    ~IntContainer() {\n        // deallocate data\n        delete[] data;\n    }\n};\n</code></pre>"},{"location":"advanced/02-oop/#private-and-public","title":"Private and Public","text":"<p>By default, all members of a class are private. This means that they can only be accessed by the class itself. If you want to expose a member to the outside world, you have to declare it as public.</p> <pre><code>class Greeter {\n    std::string name; // private by default\npublic:\n    Greeter(const std::string&amp; name) {\n        this-&gt;name = name;\n    }\n};\n</code></pre>"},{"location":"advanced/02-oop/#dealing-with-private-members","title":"Dealing with private members","text":"<p>If your data is private, but you need to provide access or modify it, you can create public methods to do that.</p> <ul> <li>Accessors: are the type of public methods that provides readability of the specific content;</li> <li>Mutators: are the type of public methods that provides writability of the specific content;</li> </ul> <pre><code>class User {\n    std::string name; // private by default\npublic:\n    explicit User(const std::string&amp; name) {\n        this-&gt;name = name;\n    }\n    // Accessor that returns a copy\n    // const at the end means that this function does not modify the object\n    std::string GetName() const {\n        return name;\n    }\n\n    // Accessor that returns a const reference\n    // returning ref does not use extra memory\n    // returning const the caller cannot modify the object\n    const std::string&amp; GetNameRef() const {\n        return name;\n    }\n\n    // Mutator\n    void SetName(const std::string&amp; name) {\n        this-&gt;name = name;\n    }\n};\n</code></pre>"},{"location":"advanced/02-oop/#operator-and-","title":"Operator \".\" and \"-&gt;\"","text":"<p>When you have an object, you can access its members using the dot operator <code>.</code>. If you have a pointer to an object, you can access its members using the arrow operator <code>-&gt;</code>.</p> <pre><code>int main(){\n    Greeter greeter(\"Stranger\");\n    greeter.Greet(); // dot operator\n    Greeter* greeterPtr = &amp;greeter;\n    greeterPtr-&gt;Greet(); // arrow operator\n}\n</code></pre>"},{"location":"advanced/02-oop/#scope-resolution-operator","title":"Scope resolution operator \"::\"","text":"<p>It can be used to access members of a class that are not part of an object. It can also be used to access members of a namespace.</p> <pre><code>namespace MyNamespace {\n    int myInt = 0;\n    class MyClass {\n    public:\n        // static vars are allocated in the data segment instead of the stack\n        static inline const int myInt = 1;\n        int myOtherInt = 2;\n    };\n    void MyFunction() {\n        int myInt = 3;\n        std::cout &lt;&lt; myInt &lt;&lt; std::endl; // 3\n        std::cout &lt;&lt; MyNamespace::myInt &lt;&lt; std::endl; // 0\n        std::cout &lt;&lt; MyNamespace::MyClass::myInt &lt;&lt; std::endl; // 1\n        std::cout &lt;&lt; MyClass::myInt &lt;&lt; std::endl; // 1\n        std::cout &lt;&lt; MyNamespace::MyClass().myOtherInt &lt;&lt; std::endl; // 2\n    }\n}\n</code></pre>"},{"location":"advanced/02-oop/#differences-between-class-and-struct","title":"Differences between class and struct","text":"<p>In C++, the only difference between a class and a struct is the default access level. In a class, the default access level is private, while in a struct, the default access level is public.</p> <pre><code>class MyClass {\n    int myInt; // private by default\npublic:\n    MyClass(int myInt) {\n        this-&gt;myInt = myInt;\n    }\n    int GetMyInt() const {\n        return myInt;\n    }\n};\n\nstruct MyStruct {\n    // to achieve the same behavior as the class above\nprivate:\n    int myInt; \npublic:\n    MyStruct(int myInt) {\n        this-&gt;myInt = myInt;\n    }\n    int GetMyInt() const {\n        return myInt;\n    }\n};\n</code></pre>"},{"location":"advanced/03-pointers/","title":"Pointers","text":""},{"location":"advanced/03-pointers/#pointer-arithmetic","title":"Pointer arithmetic","text":"<p>Pointer arithmetic is the arithmetic of pointers. You can call operators <code>+</code>, <code>-</code>, <code>++</code>, <code>--</code>, <code>+=</code>, and <code>-=</code> on pointers passing an integer as the right operand.</p> <pre><code>#include &lt;iostream&gt;\n\nint main() {\n  int arr[] = {1, 2, 3, 4, 5};\n  int* ptr = arr; // ptr points to the first element of the array\n  std::cout &lt;&lt; *ptr &lt;&lt; std::endl; // prints 1\n  ptr++; // ptr points to the second element of the array\n  std::cout &lt;&lt; *ptr &lt;&lt; std::endl; // prints 2\n  ptr += 2; // ptr points to the fourth element of the array\n  std::cout &lt;&lt; *ptr &lt;&lt; std::endl; // prints 4\n  ptr--; // ptr points to the third element of the array\n  std::cout &lt;&lt; *ptr &lt;&lt; std::endl; // prints 3\n  std::cout &lt;&lt; *(ptr + 1) &lt;&lt; std::endl; // prints 4\n  std::cout &lt;&lt; *(arr + 1) &lt;&lt; std::endl; // prints 2\n  return 0;\n}\n</code></pre>"},{"location":"advanced/03-pointers/#dynamic-arrays","title":"Dynamic arrays","text":"<p>Dynamic arrays are arrays that can be allocated and deallocated at runtime. They are useful when the size of the array is not known at compile time.</p> <pre><code>#include &lt;iostream&gt;\n\nint main() {\n  int n;\n  std::cin &gt;&gt; n; // read the size of the array\n  int* arr = new int[n]; // dynamic arry allocation\n  for (int i = 0; i &lt; n; i++) {\n    arr[i] = i; // fill the array with values\n  }\n  for (int i = 0; i &lt; n; i++) {\n    std::cout &lt;&lt; arr[i] &lt;&lt; \" \";\n  }\n  std::cout &lt;&lt; std::endl;\n  delete[] arr; // return the memory to the system\n  return 0;\n}\n</code></pre> <p>In the example above, we read the size of the array from the standard input, allocate the array, fill it with values, print the values, and then deallocate the array.</p>"},{"location":"advanced/03-pointers/#array-decay","title":"Array decay","text":"<p>When an array is passed to a function, it decays into a pointer to its first element. This means that the size of the array is lost, and the function cannot know the size of the array.</p> <pre><code>#include &lt;iostream&gt;\n\n// another possible declaration: void print_array(int* arr, int n) {\nvoid print_array(int arr[], int n) {\n  for (int i = 0; i &lt; n; i++) {\n    std::cout &lt;&lt; arr[i] &lt;&lt; \" \";\n  }\n  std::cout &lt;&lt; std::endl;\n}\n\nint main() {\n  int arr[] = {1, 2, 3, 4, 5};\n  print_array(arr, 5);\n  return 0;\n}\n</code></pre> <p>So every time you pass an array to a function, you should also pass the size of the array.</p>"},{"location":"advanced/03-pointers/#matrix","title":"Matrix","text":"<p>A matrix is a two-dimensional array. It can be represented as an array of arrays;</p> <pre><code>#include &lt;iostream&gt;\n\nint main() {\n  int n, m;\n  std::cin &gt;&gt; n &gt;&gt; m; // read the size of the matrix\n  int** matrix = new int*[n]; // allocate the rows\n  // allocate the columns\n  for (int i = 0; i &lt; n; i++) {\n    matrix[i] = new int[m]; \n  }\n  // fill the matrix with values\n  for (int i = 0; i &lt; n; i++) {\n    for (int j = 0; j &lt; m; j++) {\n      matrix[i][j] = i * m + j; \n    }\n  }\n  // print the matrix\n  for (int i = 0; i &lt; n; i++) { \n    for (int j = 0; j &lt; m; j++) {\n      std::cout &lt;&lt; matrix[i][j] &lt;&lt; \" \";\n    }\n    std::cout &lt;&lt; std::endl;\n  }\n  for (int i = 0; i &lt; n; i++) {\n    delete[] matrix[i]; // deallocate the columns\n  }\n  delete[] matrix; // deallocate the rows\n  return 0;\n}\n</code></pre> <p>In the example above, we read the size of the matrix from the standard input, allocate the rows, allocate the columns, fill the matrix with values, print the matrix, and then deallocate the matrix.</p> <p>You can extend the concept of a matrix to a three-dimensional array, and so on.</p>"},{"location":"advanced/03-pointers/#matrix-linearization","title":"Matrix linearization","text":"<p>A matrix can be linearized into a one-dimensional array. This is useful when you want to be cache friendly.</p> <pre><code>#include &lt;iostream&gt;\n\nint main() {\n  int n, m;\n  std::cin &gt;&gt; n &gt;&gt; m; // read the size of the matrix\n  int* matrix = new int[n * m]; // allocate the matrix\n  // fill the matrix with values\n  for (int i = 0; i &lt; n; i++) {\n    for (int j = 0; j &lt; m; j++) {\n      matrix[i * m + j] = i * m + j; \n    }\n  }\n  // print the matrix\n  for (int i = 0; i &lt; n; i++) {\n    for (int j = 0; j &lt; m; j++) {\n      std::cout &lt;&lt; matrix[i * m + j] &lt;&lt; \" \";\n    }\n    std::cout &lt;&lt; std::endl;\n  }\n  delete[] matrix; // deallocate the matrix\n  return 0;\n}\n</code></pre>"},{"location":"advanced/03-pointers/#passing-parameters","title":"Passing parameters","text":"<p>The common way of passing parameter is a copy of the value. This is not efficient for large objects ex.: the contents of a huge text file.</p> <pre><code>#include &lt;iostream&gt;\n\nvoid printAndIncrease(int x) { // x is a copy of the value\n  std::cout &lt;&lt; x &lt;&lt; std::endl; \n  x++; // the copy is increased but the outer variable is not\n}\n\nint main() {\n  int x = 42;\n  printAndIncrease(x); // prints 42\n  printAndIncrease(x); // prints 42\n  return 0;\n}\n</code></pre> <p>You can pass a reference to the variable, so the function can modify the outer variable.</p> <pre><code>#include &lt;iostream&gt;\n\nvoid swap(int&amp; a, int&amp; b) { // a and b are references to the variables\n  int temp = a;\n  a = b;\n  b = temp;\n}\n\nint main() {\n  int x = 42, y = 24;\n  swap(x, y);\n  std::cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; std::endl; // prints 24 42\n  return 0;\n}\n</code></pre> <p>You can also pass a pointer to the variable, so the function can modify the outer variable.</p> <pre><code>#include &lt;iostream&gt;\n\nvoid swap(int* a, int* b) { // a and b are pointers to the variables\n  int temp = *a;\n  *a = *b;\n  *b = temp;\n}\n\nint main() {\n  int x = 42, y = 24;\n  swap(&amp;x, &amp;y);\n  std::cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; std::endl; // prints 24 42\n  return 0;\n}\n</code></pre> <p>As you can see passing as reference is more readable and less error-prone than passing as pointer. But both are valid, and you should be aware of both.</p>"},{"location":"advanced/03-pointers/#smart-pointers","title":"Smart pointers","text":"<p>Smart pointers are wrappers to raw pointers that manage the memory automatically. They are useful to avoid memory leaks and dangling pointers.</p> <p>You can implement a naive smart pointer using a struct that will deallocate when it goes out of scope.</p> <pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename T&gt;\nstruct SmartPointer {\n  T* ptr;\n  SmartPointer(T* ptr) : ptr(ptr) {}\n  ~SmartPointer() {\n    delete ptr;\n  }\n};\n\nint main() {\n  SmartPointer&lt;int&gt; sp(new int(42));\n  std::cout &lt;&lt; *sp.ptr &lt;&lt; std::endl; // prints 42\n  return 0;\n} // when sp goes out of scope, the destructor is called and the memory is deallocated\n</code></pre> <p>Note</p> <p>The Standard Library implements 3 types of smart pointers: <code>std::unique_ptr</code>, <code>std::shared_ptr</code>, and <code>std::weak_ptr</code>.</p>"},{"location":"advanced/03-pointers/#stdunique_ptr","title":"<code>std::unique_ptr</code>","text":"<p>The <code>std::unique_ptr</code> is a smart pointer that owns the object exclusively. It is useful when you want to transfer the ownership of the object to another smart pointer.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nint main() {\n  // make_unique is a C++14 feature\n  std::unique_ptr&lt;int&gt; up = std::make_unique&lt;int&gt;(42);\n  // or you can just use:\n  // std::unique_ptr&lt;int&gt; up(new int(42));\n  std::cout &lt;&lt; *up &lt;&lt; std::endl; // prints 42\n  return 0;\n} // when up goes out of scope, the destructor is called and the memory is deallocated\n</code></pre>"},{"location":"advanced/03-pointers/#stdshared_ptr","title":"<code>std::shared_ptr</code>","text":"<p>The <code>std::shared_ptr</code> is a smart pointer that owns the object with shared ownership. It is useful when you want to share the ownership of the object with another smart pointer. It is deallocated when the last <code>std::shared_ptr</code> goes out of scope.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nint main() {\n  std::shared_ptr&lt;int&gt; sp1 = std::make_shared&lt;int&gt;(42);\n  std::shared_ptr&lt;int&gt; sp2 = sp1;\n  std::cout &lt;&lt; *sp1 &lt;&lt; \" \" &lt;&lt; *sp2 &lt;&lt; std::endl; // prints 42 42\n  return 0;\n} // when sp1 and sp2 goes out of scope, the destructor is called and the memory is deallocated\n</code></pre>"},{"location":"advanced/03-pointers/#stdweak_ptr","title":"<code>std::weak_ptr</code>","text":"<p>The <code>std::weak_ptr</code> is a smart pointer that owns the object with weak ownership. It is useful when you want to observe the object without owning it. It is deallocated when the last <code>std::shared_ptr</code> goes out of scope.</p> <p>Note</p> <p><code>std::weak_ptr</code> will help solve the circular reference problem.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nint main() {\n  std::shared_ptr&lt;int&gt; sp1 = std::make_shared&lt;int&gt;(42);\n  std::weak_ptr&lt;int&gt; wp = sp1;\n  // in order to use a weak pointer, you have to lock it to tell others that you are using it\n  std::cout &lt;&lt; *sp1 &lt;&lt; \" \" &lt;&lt; *wp.lock() &lt;&lt; std::endl; // prints 42 42\n  return 0;\n} // when sp1 goes out of scope, the destructor is called and the memory is deallocated\n</code></pre> <p>Exaple of a circular reference:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nstruct A;\nstruct B;\n\nstruct A {\n  std::shared_ptr&lt;B&gt; b;\n  ~A() {\n    std::cout &lt;&lt; \"A destructor\" &lt;&lt; std::endl;\n  }\n};\n\nstruct B {\n  std::shared_ptr&lt;A&gt; a;\n  ~B() {\n    std::cout &lt;&lt; \"B destructor\" &lt;&lt; std::endl;\n  }\n};\n\nint main() {\n  std::shared_ptr&lt;A&gt; a = std::make_shared&lt;A&gt;();\n  std::shared_ptr&lt;B&gt; b = std::make_shared&lt;B&gt;();\n  a-&gt;b = b;\n  b-&gt;a = a;\n  return 0;\n} // memory is leaked: the destructors are not called, and the memory is not deallocated\n</code></pre> <p>You can solve the circular reference problem using <code>std::weak_ptr</code>.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nstruct A;\nstruct B;\n\nstruct A {\n  std::shared_ptr&lt;B&gt; b;\n  ~A() {\n    std::cout &lt;&lt; \"A destructor\" &lt;&lt; std::endl;\n  }\n};\n\nstruct B {\n  std::weak_ptr&lt;A&gt; a;\n  ~B() {\n    std::cout &lt;&lt; \"B destructor\" &lt;&lt; std::endl;\n  }\n};\n\nint main() {\n  std::shared_ptr&lt;A&gt; a = std::make_shared&lt;A&gt;();\n  std::shared_ptr&lt;B&gt; b = std::make_shared&lt;B&gt;();\n  a-&gt;b = b;\n  b-&gt;a = a;\n  return 0;\n} // when a and b goes out of scope, the destructors are called and the memory is deallocated\n</code></pre>"},{"location":"advanced/04-operators/","title":"C++ custom Operators","text":"<p>In C++ you can define custom operators for your class using operator overloading. This allows you to define the behavior of operators when applied to objects of your class.</p> <p>You might want to implement some of the following operators for your class:</p> <ul> <li>arithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></li> <li>comparison operators: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li> <li>spaceship operator: <code>&lt;=&gt;</code> (C++20)</li> <li>unary operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>&amp;</code>, <code>!</code>, <code>~</code>, <code>++</code>, <code>--</code></li> <li>compound assignment operators: <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&amp;=</code>, <code>|=</code>, <code>^=</code></li> <li>prefix increment and decrement operators: <code>++</code>, <code>--</code></li> <li>postfix increment and decrement operators: <code>++</code>, <code>--</code></li> <li>subscript operator: <code>[]</code></li> <li>stream insertion and extraction operators: <code>&lt;&lt;</code>, <code>&gt;&gt;</code></li> </ul> <pre><code>#include &lt;iostream&gt;\n\nstruct Vector2i {\n  int x, y;\n  Vector2i() : x(0), y(0) {}\n  Vector2i(int x, int y) : x(x), y(y) {}\n  // arithmetic operators\n  Vector2i operator+(const Vector2i&amp; other) const {\n    return {x + other.x, y + other.y};\n  }\n  Vector2i operator-(const Vector2i&amp; other) const {\n    return {x - other.x, y - other.y};\n  }\n  Vector2i operator*(int scalar) const {\n    return {x * scalar, y * scalar};\n  }\n  Vector2i operator/(int scalar) const {\n    return {x / scalar, y / scalar};\n  }\n  Vector2i operator*(const Vector2i&amp; other) const {\n    return {x * other.x, y * other.y};\n  }\n  Vector2i operator/(const Vector2i&amp; other) const {\n    return {x / other.x, y / other.y};\n  }\n  // comparison operators\n  bool operator==(const Vector2i&amp; other) const {\n    return x == other.x &amp;&amp; y == other.y;\n  }\n  bool operator!=(const Vector2i&amp; other) const {\n    return !(*this == other);\n  }\n  // spaceship operator C++20\n  // useful when you want to compare two objects or\n  //   use it in std::map or std::set\n  auto operator&lt;=&gt;(const Vector2i&amp; other) const {\n    if (x &lt; other.x &amp;&amp; y &lt; other.y) return -1;\n    if (x == other.x &amp;&amp; y == other.y) return 0;\n    return 1;\n  }\n\n  // unary operators\n  Vector2i operator-() const {\n    return Vector2i(-x, -y);\n  }\n  // compound assignment operators\n  Vector2i&amp; operator+=(const Vector2i&amp; other) {\n    x += other.x;\n    y += other.y;\n    return *this;\n  }\n  Vector2i&amp; operator-=(const Vector2i&amp; other) {\n    x -= other.x;\n    y -= other.y;\n    return *this;\n  }\n  Vector2i&amp; operator*=(int scalar) {\n    x *= scalar;\n    y *= scalar;\n    return *this;\n  }\n  Vector2i&amp; operator/=(int scalar) {\n    x /= scalar;\n    y /= scalar;\n    return *this;\n  }\n  // prefix increment and decrement operators\n  Vector2i&amp; operator++() {\n    x++;\n    y++;\n    return *this;\n  }\n  Vector2i&amp; operator--() {\n    x--;\n    y--;\n    return *this;\n  }\n  // postfix increment and decrement operators\n  Vector2i operator++(int) {\n    Vector2i temp = *this;\n    ++*this;\n    return temp;\n  }\n  Vector2i operator--(int) {\n    Vector2i temp = *this;\n    --*this;\n    return temp;\n  }\n  // subscript operator\n  int&amp; operator[](int index) {\n    return index == 0 ? x : y;\n  }\n  // stream insertion operator\n  friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; stream, const Vector2i&amp; vector) {\n    return stream &lt;&lt; vector.x &lt;&lt; \", \" &lt;&lt; vector.y;\n  }\n  // stream extraction operator\n  friend std::istream&amp; operator&gt;&gt;(std::istream&amp; stream, Vector2i&amp; vector) {\n    return stream &gt;&gt; vector.x &gt;&gt; vector.y;\n  }\n};\n</code></pre> <p></p>"},{"location":"advanced/04-operators/#special-operators","title":"Special operators","text":"<p>You can create special operators for your class such as:</p> <ul> <li><code>()</code> operator: function call operator</li> <li><code>-&gt;</code> operator: member access operator</li> <li>'new' and 'delete' operators: memory allocation and deallocation operators</li> </ul> <p>A nice usecase for function call operator is to create a functor, a class that acts like a function.</p> <pre><code>#include &lt;iostream&gt;\n\nstruct Adder {\n  int operator()(int a, int b) const {\n    return a + b;\n  }\n};\n\nint main() {\n  Adder adder;\n  std::cout &lt;&lt; adder(1, 2) &lt;&lt; std::endl; // 3\n  return 0;\n}\n</code></pre> <p>The <code>-&gt;</code> operator is used to overload the member access operator. It is used to define the behavior of the arrow operator <code>-&gt;</code> when applied to objects of your class.</p> <pre><code>#include &lt;iostream&gt;\n\nstruct Pointer {\n  int value;\n  int* operator-&gt;() {\n    return &amp;value;\n  }\n};\n\nint main() {\n  Pointer pointer;\n  pointer.value = 42;\n  std::cout &lt;&lt; *pointer &lt;&lt; std::endl; // 42\n  return 0;\n}\n</code></pre> <p>You might want to overload the <code>new</code> and <code>delete</code> operators to define the behavior of memory allocation and deallocation for your class. Specially to track memory usage or to implement a custom memory pool. Or even overload it globally to track memory usage for the whole program.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n\n// declare the alloc counter\nint alloc_counter = 0;\n\nvoid* operator new(std::size_t size) {\n  alloc_counter ++;\n  return std::malloc(size);\n}\n\nvoid operator delete(void* ptr) noexcept {\n  std::free(ptr);\n  alloc_counter--;\n}\n\nint main() {\n  int* ptr = new int;\n  std::cout &lt;&lt; \"alloc_counter: \" &lt;&lt; alloc_counter &lt;&lt; std::endl; // 1\n  delete ptr;\n  std::cout &lt;&lt; \"alloc_counter: \" &lt;&lt; alloc_counter &lt;&lt; std::endl; // 0\n  return 0;\n}\n</code></pre>"},{"location":"algorithms/","title":"Data Structures and Algorithms","text":"<p>Students compare and contrast a variety of data structures. Students compare algorithms for tasks such as searching and sorting, while articulating efficiency in terms of time complexity. Students implement data structures and algorithms to support solution designs. Course Catalog</p>"},{"location":"algorithms/#requirements","title":"Requirements","text":"<ul> <li>Introduction to Programming</li> <li>Advanced Programming</li> </ul>"},{"location":"algorithms/#textbook","title":"Textbook","text":"<ul> <li>Grokking Algorithms, Aditya Bhargava, Manning Publications, 2016. ISBN 978-1617292231<ul> <li>Champ link</li> <li>Amazon</li> </ul> </li> </ul>"},{"location":"algorithms/#student-centered-learning-outcomes","title":"Student-centered Learning Outcomes","text":"Bloom's Taxonomy on Learning Outcomes <p>Upon completion of the Data Structures and Algorithms course in C++, students should be able to:</p>"},{"location":"algorithms/#objective-outcomes","title":"Objective Outcomes","text":"<ul> <li>Analyze and contrast diverse data structures</li> <li>Evaluate algorithmic efficiency using time complexity analysis</li> <li>Implement, create and apply data structures and algorithms</li> <li>Critically assess sorting algorithms</li> <li>Analyze and contrast search algorithms</li> </ul>"},{"location":"algorithms/#assessment-outcomes","title":"Assessment Outcomes","text":"<ul> <li>Demonstrate the ability to evaluate and differentiate between various data structures, including arrays, linked lists, stacks, queues, trees, and graphs, based on their characteristics and use cases.</li> <li>Evaluate algorithms by analyzing their time complexity, enabling the comparison of different algorithms and making informed decisions about their suitability for specific problem-solving scenarios.</li> <li>Develop and implement solutions using appropriate data structures and algorithms to address real-world problems, demonstrating proficiency in translating solution designs into C++ code.</li> <li>Investigate and compare the merits and drawbacks of brute-force and divide-and-conquer sorting algorithms, including quicksort, mergesort, and insertion sort, in order to make informed choices when selecting sorting techniques for specific scenarios.</li> <li>Examine and compare the characteristics, advantages, and limitations of sequential, binary, depth-first, and breadth-first search algorithms, demonstrating the ability to choose the most suitable search strategy based on problem requirements.</li> </ul>"},{"location":"algorithms/#schedule-for-fall-2024","title":"Schedule for Fall 2024","text":"<p>Warning</p> <p>This is a work in progress, and the schedule is subject to change. Every change will be communicated in class. Use this github repo as the source of truth for the schedule and materials. The materials provided in canvas are just a copy for archiving purposes and might be outdated.</p> <p>College dates for the Spring 2024 semester:</p> Event Date Classes Begin Aug. 26 Add/Drop Aug. 26 - 30 No Classes - College remains open Sept. 20 Indigenous Peoples Day Holiday Observance Oct. 14 Registration for Spring Classes Oct. 28 - Nov. 8 Last Day to Withdraw Nov. 8 Thanksgiving Break Nov. 25 - Nov. 29 Last Day of Classes Dec. 6 Finals Dec. 9 - Dec. 13 Winter Break Dec. 16 - Jan. 10"},{"location":"algorithms/#introduction","title":"Introduction","text":"<ul> <li>Week 1. 2024/08/26</li> <li>Topic: Introduction to Data Structures and Algorithms</li> <li>Activities:<ul> <li>Introduction</li> <li>Read all materials shared on Canvas;</li> <li>Do all assignments on Canvas;</li> </ul> </li> </ul>"},{"location":"algorithms/#algorithm-analysis","title":"Algorithm Analysis","text":"<ul> <li>Week 2. 2024/00/02</li> <li>Topic: Algorithm Analysis</li> </ul>"},{"location":"algorithms/#dynamic-data","title":"Dynamic Data","text":"<ul> <li>Week 3. 2024/09/09</li> <li>Topic: Array, Linked Lists, Dynamic Arrays</li> </ul>"},{"location":"algorithms/#sorting","title":"Sorting","text":"<ul> <li>Week 4. Date: 2024/09/16</li> <li>Topic: Bubble Sort, Selection Sort and Insertion Sort</li> </ul>"},{"location":"algorithms/#divide-conquer","title":"Divide &amp; Conquer","text":"<ul> <li>Week 5. 2024/09/23</li> <li>Topic: Merge Sort and Quick Sort</li> </ul>"},{"location":"algorithms/#hashtables","title":"Hashtables","text":"<ul> <li>Week 6. 2024/09/30</li> <li>Topic: Hashtables</li> </ul>"},{"location":"algorithms/#midterms","title":"Midterms","text":"<ul> <li>Week 7. 2024/10/07</li> <li>Topic: Midterms</li> </ul>"},{"location":"algorithms/#stacks-queues","title":"Stacks &amp; Queues","text":"<ul> <li>Week 8. 2024/10/14</li> <li>Topic: Stacks and Queues</li> </ul>"},{"location":"algorithms/#graphs","title":"Graphs","text":"<ul> <li>Week 9. 2024/10/21</li> <li>Topic: Graphs</li> </ul>"},{"location":"algorithms/#dijkstra","title":"Dijkstra","text":"<ul> <li>Week 10. 2024/10/28</li> <li>Topic: Dijkstra</li> </ul>"},{"location":"algorithms/#prim-jarnik","title":"Prim &amp; Jarnik","text":"<ul> <li>Week 11. 2024/11/04</li> <li>Topic: Prim's and Jarnik's Algorithm</li> </ul>"},{"location":"algorithms/#bst","title":"BST","text":"<ul> <li>Week 12. 2024/11/11</li> <li>Topic: Binary Search Trees</li> </ul>"},{"location":"algorithms/#heap-and-priority-queue","title":"Heap and Priority queue","text":"<ul> <li>Week 13. 2024/11/18</li> <li>Topic: Heap and Priority Queues</li> </ul>"},{"location":"algorithms/#break","title":"Break","text":"<ul> <li>Week 14. 2024/11/25</li> <li>Topic: BREAK. No classes this week.</li> </ul>"},{"location":"algorithms/#project-presentation","title":"Project Presentation","text":"<ul> <li>Week 15. 2024/12/02</li> <li>Topic: Work sessions for final project and presentations</li> </ul>"},{"location":"algorithms/#finals","title":"Finals","text":"<ul> <li>Week 16. 2024/12/09</li> <li>Topic: Finals Week</li> </ul>"},{"location":"algorithms/#schedule-for-spring-2024","title":"Schedule for Spring 2024","text":"<p>Warning</p> <p>This is a work in progress, and the schedule is subject to change. Every change will be communicated in class. Use this github repo as the source of truth for the materials and Canvas for the assignment deadlines.</p> <p>College dates for the Spring 2024 semester:</p> Date Event Jan 16 Classes Begin Jan 16 - 22 Add/Drop Feb 26 - March 1 Midterms March 11 - March 15 Spring Break March 25 - April 5 Registration for Fall Classes April 5 Last Day to Withdraw April 8 - 19 Idea Evaluation April 12 No Classes - College remains open April 26 Last Day of Classes April 29 - May 3 Finals May 11 Commencement"},{"location":"algorithms/#introduction_1","title":"Introduction","text":"<ul> <li>Week 1. 2024/01/15</li> <li>Topic: Introduction to Data Structures and Algorithms</li> <li>Activities:<ul> <li>Introduction</li> <li>Read all materials shared on Canvas;</li> <li>Do all assignments on Canvas;</li> </ul> </li> </ul>"},{"location":"algorithms/#algorithm-analysis_1","title":"Algorithm Analysis","text":"<ul> <li>Week 2. 2024/01/22</li> <li>Topic: Algorithm Analysis</li> </ul>"},{"location":"algorithms/#dynamic-data_1","title":"Dynamic Data","text":"<ul> <li>Week 3. 2024/01/29</li> <li>Topic: Array, Linked Lists, Dynamic Arrays</li> </ul>"},{"location":"algorithms/#sorting_1","title":"Sorting","text":"<ul> <li>Week 4. Date: 2024/02/05</li> <li>Topic: Bubble Sort, Selection Sort and Insertion Sort</li> </ul>"},{"location":"algorithms/#divide-conquer_1","title":"Divide &amp; Conquer","text":"<ul> <li>Week 5. 2024/02/12</li> <li>Topic: Merge Sort and Quick Sort</li> </ul>"},{"location":"algorithms/#hashtables_1","title":"Hashtables","text":"<ul> <li>Week 6. 2024/02/19</li> <li>Topic: Hashtables</li> </ul>"},{"location":"algorithms/#midterms_1","title":"Midterms","text":"<ul> <li>Week 7. Date: 2024/02/26</li> <li>Topic: Midterms</li> </ul>"},{"location":"algorithms/#stacks-queues_1","title":"Stacks &amp; Queues","text":"<ul> <li>Week 8. 2024/03/04</li> <li>Topic: Stacks and Queues</li> </ul>"},{"location":"algorithms/#break_1","title":"Break","text":"<ul> <li>Week 09. 2024/03/11</li> <li>Topic: Spring BREAK. No classes this week.</li> </ul>"},{"location":"algorithms/#graphs_1","title":"Graphs","text":"<ul> <li>Week 10. 2024/03/18</li> <li>Topic: Graphs</li> </ul>"},{"location":"algorithms/#dijkstra_1","title":"Dijkstra","text":"<ul> <li>Week 11. 2024/03/25</li> <li>Topic: Dijkstra</li> </ul>"},{"location":"algorithms/#prim-jarnik_1","title":"Prim &amp; Jarnik","text":"<ul> <li>Week 12. 2024/04/01</li> <li>Topic: Prim's and Jarnik's Algorithm</li> </ul>"},{"location":"algorithms/#bst_1","title":"BST","text":"<ul> <li>Week 13. 2024/04/01</li> <li>Topic: Binary Search Trees</li> </ul>"},{"location":"algorithms/#heap-and-priority-queue_1","title":"Heap and Priority queue","text":"<ul> <li>Week 14. 2024/04/08</li> <li>Topic: Heap and Priority Queues</li> </ul>"},{"location":"algorithms/#project-presentation_1","title":"Project Presentation","text":"<ul> <li>Week 15. 2024/04/15</li> <li>Topic: Work sessions for final project</li> </ul>"},{"location":"algorithms/#finals_1","title":"Finals","text":"<ul> <li>Week 16. 2024/04/22</li> <li>Topic: Finals Week</li> </ul>"},{"location":"algorithms/01-introduction/","title":"Data-Structures &amp; Algorithms","text":""},{"location":"algorithms/01-introduction/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Syllabus</li> <li>Safe and welcoming space</li> <li>Privacy and FERPA Compliance</li> <li>Activities<ul> <li>Setup Github repository</li> <li>Setup your IDE</li> <li>Setup your Assignments project</li> <li>Check Github Actions</li> </ul> </li> <li>Homework</li> </ul>"},{"location":"algorithms/01-introduction/#safe-and-welcoming-space","title":"Safe and welcoming space","text":"<p>TLDR: Be nice to each other, and don't copy code from the internet.</p> <ul> <li>Code of Conduct</li> <li>Notes on Submissions and Plagiarism</li> </ul> <p>Some assignments can be hard, and you may feel tempted to copy code from the internet. Don't do it. You will only hurt yourself. You will learn nothing, and you will be caught. Once you get caught, you will be reported to the Dean of Students for academic dishonesty.</p> <p>If you are struggling with an assignment, please contact me in my office-hours, or via discord. I am really slow at answering emails, so do it so only if something needs to be official. Quick questions are better asked in discord by me or your peers.</p>"},{"location":"algorithms/01-introduction/#privacy-and-ferpa-compliance","title":"Privacy and FERPA Compliance","text":"<p>FERPA WAIVER</p> <p>If you are willing to share your final project publicly, you MUST SIGN this FERPA waiver.</p> <p>via GIPHY</p> <p>This class will use github extensively, in order to keep you safe, we will use private repositories. This means that only you and me will be able to see your code. In your final project, you must share it with your pair partner, and with me.</p>"},{"location":"algorithms/01-introduction/#activities","title":"Activities","text":"<p>TLDR: there is no TLDR, read the whole thing.</p> <p>via GIPHY</p>"},{"location":"algorithms/01-introduction/#setup-github-repository","title":"Setup Github repository","text":"<p>Gitkraken</p> <p>Optionally you might want to use GitKraken as your git user interface. Once you open it for the first time, signup using your github account with student pack associated. Install Gitkraken</p> <ol> <li>Signup on github and apply for Github Student Pack.  Apply for Student Pack</li> <li>Send me your github username in class, so I will share the assignment repository with you;</li> <li>Create a private repository by clicking \"use as template\" the repository  InfiniBrains/csi281 or Create CSI281 repository</li> <li>Share your repository with me. Click on settings, then collaborators, and add me as a collaborator. My username: @tolstenko</li> <li>Clone your repository to your computer. You can use the command line, or any Git GUI tool. I recommend  GitKraken</li> </ol>"},{"location":"algorithms/01-introduction/#setup-your-ide","title":"Setup your IDE","text":"<p>Other IDEs</p> <p>Optionally you might want to use any other IDE, such as Visual Studio, VSCode, XCode, NeoVim or any other, but I will not be able to help you with that.</p> <p>I will use CLion in class, and I recommend you to use it as well so you can follow the same steps as me. It is free for students. And it works on Windows, Mac and Linux.</p> <ol> <li>Apply for student license for  JetBrains or  Apply Form</li> <li>You can install  CLion only or install CLion via their  Install Toolbox</li> <li>Open CLion for the first time, and login with your JetBrains account you created earlier;</li> </ol>"},{"location":"algorithms/01-introduction/#setup-your-assignments-project","title":"Setup your Assignments project","text":"<p>Common problems</p> <p>Your machine might not have git on your path. If so, install it from git-scm.com and make sure you tick the option to add git to your PATH.</p> <ol> <li>Open your IDE, and click on \"Open Project\";</li> <li>Select the folder where you cloned your repository;</li> <li>Click on \"Open as Project\" or \"Open as CMake Project\";</li> <li>Wait for CMake to finish generating the project;</li> <li>On the top right corner, select the target you want to run/debug;</li> </ol>"},{"location":"algorithms/01-introduction/#check-github-actions","title":"Check Github Actions","text":"<p>Github Actions</p> <p>Github Actions is a CI/CD tool that will run your tests automatically when you push your code to github. It will also run your tests when you create a pull request. It is a great tool to make sure your code is always working.</p> <p>You might want to explore the folder <code>.github/workflows</code> to see how it works, but you don't need to change anything there.</p> <p></p> <p>Every commit you push to your repository will be automatically tested through Github Actions. You can see the results of the tests by clicking on the \"Actions\" tab on your repository.</p> <ol> <li>Go to your repository on github;</li> <li>Click on the \"Actions\" tab;</li> <li>Click on the \"Build and Test\" action;</li> <li>Click on the latest commit;</li> <li>On the jobs panel, Click on the assignment you want to see the results;</li> <li>Read the logs to see if your tests passed or failed;</li> <li>It is your job to read the README.md from every assignment and fulfill the requirements;</li> <li>You can run/debug the tests locally by targeting the assignmentXX_tests;</li> </ol>"},{"location":"algorithms/01-introduction/#homework","title":"Homework","text":"<p>via GIPHY</p> <ol> <li>Read the Syllabus fully. Pay attention to the schedule, outcomes and grading;</li> <li>Do all assignments on Canvas, specially the git training;</li> </ol>"},{"location":"algorithms/02-analysis/","title":"Algorthm Analysis","text":"<p>Before starting, lets thin about 3 problems:</p> <p>For an array of size \\(N\\), dont overthink. Just answer:</p> <ol> <li>How many iterations a loop run to find a specific number inside an array? (naively)</li> <li>How many comparisons should I make to find two numbers in an array that sum a specific target? (naively)</li> <li>List all different shuffled arrays we can make? (naively) ex for n==3 123, 132, 213, 231, 312, 321</li> </ol>"},{"location":"algorithms/02-analysis/#how-to-measure-an-algorithm-mathematically","title":"How to measure an algorithm mathematically?","text":"find a number in a vector <pre><code>int find(vector&lt;int&gt; v, int target) {\n    // how many iterations?\n    for (int i = 0; i &lt; v.size(); i++) {\n        // how many comparisons?\n        if (v[i] == target) { \n        return i;\n        }\n    }\n    return -1;\n}\n</code></pre> find two numbers sum in an array <p><pre><code>vector&lt;int&gt; findsum2(vector&lt;int&gt; v, int target) {\n    // how many outer loop iterations?\n    for (int i = 0; i &lt; v.size(); i++) {\n        // how many inner loop iterations?\n        for (int j = i+1; j &lt; v.size(); j++) {\n            // how many comparisons?\n            if (v[i] + v[j] == target) {\n                return {i, j};\n            }\n        }\n    }\n    return {-1, -1};\n}\n</code></pre> Check it out on leetcode. Can you solve it better?</p> Print all pormutations of an array <pre><code>void generatePermutations(std::vector&lt;int&gt;&amp; vec, int index) {\n    if (index == vec.size() - 1) {\n        // Print the current permutation\n        for (int num : vec) {\n            std::cout &lt;&lt; num &lt;&lt; \" \";\n        }\n        std::cout &lt;&lt; std::endl;\n        return;\n    }\n\n    // how many swaps for every recursive call?\n    for (int i = index; i &lt; vec.size(); ++i) { \n        // Swap the elements at indices index and i\n        std::swap(vec[index], vec[i]);\n\n        // Recursively generate permutations for the rest of the vector\n        // How deep this can go?\n        generatePermutations(vec, index + 1);\n\n        // Backtrack: undo the swap to explore other possibilities\n        std::swap(vec[index], vec[i]);\n    }\n}\n</code></pre> <p>Trying to be mathematicaly correct, the number of instructions the first one should be a function similar to this:</p> <ol> <li>\\(f(n) = a*n + b\\) : Where \\(b\\) is the cost of what runs before and after the main loop and \\(a\\) is the cost of the loop.</li> <li>\\(f(n) = a*n^2 + b*n + c\\) : Where \\(c\\) is the cost of what runs before and after the oter loop; \\(b\\) is the cost of the outer loop; and \\(a\\) is the cost of the inner loop;</li> <li>\\(f(n) = a*n!\\) : Where \\(a\\) is the cost of what runs before and after the outer loop;</li> </ol> <p>To simplify, we remove the constants and the lower order terms:</p> <ol> <li>\\(f(n) = n\\)</li> <li>\\(f(n) = n^2\\)</li> <li>\\(f(n) = n!\\)</li> </ol>"},{"location":"algorithms/02-analysis/#difference-between-big-o-vs-big-theta-vs-big-omega-notations","title":"Difference between Big O vs Big Theta \u0398 vs Big Omega \u03a9 Notations","text":"Source: bigocheatsheet.com"},{"location":"algorithms/02-analysis/#big-o","title":"Big O","text":"<ul> <li>Most used notation;</li> <li>Upper bound;</li> <li>\"never worse than\";</li> <li>A real case cannot be faster than it;</li> <li>\\(0 &lt;= func &lt;= O\\)</li> </ul>"},{"location":"algorithms/02-analysis/#big-theta","title":"Big Theta \u0398","text":"<ul> <li>Wrongly stated as average;</li> <li>Theta is two-sided;</li> <li>Tight bound between 2 constants of the same function </li> <li>\\(k1*\u0398 &lt;= func &lt;= k2*\u0398\\)</li> <li>When \\(N\\) goes to infinite, it cannot be faster or slower than it;</li> </ul>"},{"location":"algorithms/02-analysis/#honorable-mentions","title":"Honorable mentions","text":"<ul> <li>Big Omega \u03a9: roughly the oposite of Big O;</li> <li>Little o and Little Omega (\u03c9). The same concept from the big, but exclude the exact bound;</li> </ul> Source: freecodecamp.com"},{"location":"algorithms/02-analysis/#common-big-os","title":"Common Big Os","text":"<p>Logarithm</p> <p>In computer science, when we say log, assume base 2, unless expressely stated;</p> Big O Name Example O(1) Constant sum two numbers O(lg(n)) Logarithmic binary search O(n) Linear search in an array O(n*lg(n)) Linearithmic Merge Sort O(n^c) Polinomial match 2 sum O(c^n) Exponential brute force password of size n O(n!) factorial list all combinations"},{"location":"algorithms/02-analysis/#what-is-logarithm","title":"What is logarithm?","text":"<p>Log is the inverse of exponentiation. It is the number of times you have to multiply a number by itself to get another number.</p> \\[ log_b(b^x) = x \\]"},{"location":"algorithms/02-analysis/#what-is-binary-search","title":"What is binary search?","text":"<p>In a binary search, we commonly divide the array in half (base 2), and check if the target is in the left or right half. Then we repeat the process until we find the target or we run out of elements.</p> <p> </p> Source: mathwarehouse.com"},{"location":"algorithms/02-analysis/#common-data-structures-and-algorithms","title":"Common data structures and algorithms","text":"Source: bigocheatsheet.com Source: bigocheatsheet.com"},{"location":"algorithms/02-analysis/#common-issues-and-misconceptions","title":"Common Issues and misconceptions","text":"<ul> <li>Big O and Theta are commonly mixed;</li> <li>Hashtables: it is commonly assumed that queries on <code>&lt;map&gt;</code> or <code>&lt;set&gt;</code> being <code>O(1)</code>; std:: <code>&lt;map&gt;</code> and <code>&lt;set&gt;</code> are not the ideal implementation! Watch this CppCon video for some deep level insights;</li> </ul>"},{"location":"algorithms/03-dynamic-data/","title":"Dynamic data","text":"<p>In C++'s Standard Library, we  have a bunch of data structures already implemented for us. But you need to understand what is inside it in order do ponder the best tool for your job. In this week we are going to cover Dynamic Arrays (equivalent of std::vector) and Linked Lists(equivalent of std::list) .</p>"},{"location":"algorithms/03-dynamic-data/#dynamic-arrays","title":"Dynamic Arrays","text":"<p>A dynamic array is a random access, variable-size list data structure that allows elements to be added or removed. It is supplied with standard libraries in many modern mainstream programming languages. Let's try to implement one here for the sake of teaching purposes;</p> <pre><code>template&lt;typename T&gt;\nstruct Vector {\nprivate:\n  size_t _size;\n  size_t _capacity;\n  T* _data;\npublic:\n  // constructors\n  Vector() : _size(0), _capacity(1), _data(new T[1]) {}\n  explicit Vector(size_t size) : _size(size), _capacity(size), _data(new T[size]) {}\n\n  // destructor\n  ~Vector() { delete[] _data;}\n\n  // accessors\n  size_t size() const { return _size; }\n  size_t capacity() const { return _capacity;}\n\n  // push_back takes care of resizing the array if necessary\n  // this insertion will amortize the cost of resizing\n  void push_back(const T&amp; value) {\n    if (_size == _capacity) {\n      // growth factor of 2\n      _capacity = _capacity == 0 ? 1 : _capacity * 2;\n      // allocate new memory\n      T* new_data = new T[_capacity];\n      // copy the old data into the new memory\n      for (size_t i = 0; i &lt; _size; ++i)\n          new_data[i] = _data[i];\n      // release the old memory\n      delete[] _data;\n      // update the data pointer\n      _data = new_data;\n    }\n    _data[_size++] = value;\n  }\n\n  // operator[] for read-write access\n  T&amp; operator[](size_t index) { return _data[index]; }\n\n  // other functions\n  // ...\n};\n</code></pre> <p>With this boilerplate you should be able to implement the rest of the functions for the Vector class.</p>"},{"location":"algorithms/03-dynamic-data/#linked-lists","title":"Linked Lists","text":"<p>A linked list is a linear access, variable-size list data structure that allows elements to be added or removed without the need of resizing. It is supplied with standard libraries in many modern mainstream programming languages. Let's try to build one here for the sake of teaching purposes;</p> <pre><code>// linkedlist\ntemplate &lt;typename T&gt;\nstruct LinkedList {\nprivate:\n    // linkedlist node\n    struct LinkedListNode {\n        T data;\n        LinkedListNode *next;\n        LinkedListNode(T data) : data(data), next(nullptr) {}\n    };\n\n    LinkedListNode *_head;\n    size_t _size;\npublic:\n    LinkedList() : _head(nullptr), _size(0) {}\n\n    // delete all nodes in the linkedlist\n    ~LinkedList() {\n        while (_head) {\n            LinkedListNode *temp = _head;\n            _head = _head-&gt;next;\n            delete temp;\n        }\n    }\n\n    // _size\n    size_t size() const { return _size; }\n\n    // is it possible to make it O(1) instead of O(n)?\n    void push_back(T data) {\n        if (!_head) {\n            _head = new LinkedListNode(data);\n            _size++;\n            return;\n        }\n        auto* temp = _head;\n        while (temp-&gt;next)\n            temp = temp-&gt;next;\n        temp-&gt;next = new LinkedListNode(data);\n        _size++;\n    }\n\n    // operator[] for read-write access\n    T &amp;operator[](size_t index) {\n        auto* temp = _head;\n        for (size_t i = 0; i &lt; index; i++)\n            temp = temp-&gt;next;\n        return temp-&gt;data;\n    };\n\n    // other functions\n};\n</code></pre>"},{"location":"algorithms/03-dynamic-data/#homework","title":"Homework","text":"<p>For both, implement the following functions:</p> <ul> <li><code>T* find(const T&amp; value)</code>: returns a pointer to the first occurrence of the value in the collection, or nullptr if the value is not found.</li> <li><code>bool contains(const T&amp; value)</code>: returns true if the value is found in the collection, false otherwise.</li> <li><code>T&amp; at(size_t index)</code>: returns a reference to the element at the specified index. If the index is out of bounds, throw an <code>std::out_of_range</code> exception.</li> <li><code>void push_front(const T&amp; value)</code>: adds a new element to the beginning of the collection.</li> <li>improve push_back of the linkedlist to be O(1) instead of O(n);</li> <li><code>void insert_at(size_t index, const T&amp; value)</code>: inserts a new element at the specified index. If the index is out of bounds, throw an <code>std::out_of_range</code> exception.</li> <li><code>void pop_front()</code>: removes the first element of the collection.</li> <li><code>void pop_back()</code>: removes the last element of the collection. Is it possible to make it O(1) instead of O(n)? </li> <li><code>void remove_all(const T&amp; value)</code>: removes all occurrences of the value from the collection.</li> <li><code>void remove_at(size_t index)</code>: removes the element at the specified index. If the index is out of bounds, throw an <code>std::out_of_range</code> exception.</li> </ul> <p>Now compare the complexity of linked list and dynamic array for each of the functions you implemented and create a table. What is the best data structure for each use case? Why?</p>"},{"location":"algorithms/04-sorting/","title":"Sorting algorithms","text":""},{"location":"algorithms/04-sorting/#swap-function","title":"Swap function","text":"<pre><code>void swap(int &amp;a, int &amp;b) {\n  int temp = a;\n  a = b;\n  b = temp;\n}\n</code></pre>"},{"location":"algorithms/04-sorting/#bubble-sort","title":"Bubble sort","text":"<pre><code>void bubble_sort(int arr[], int n) {\n  for (int i = 0; i &lt; n; i++) { // n passes\n    for (int j = 0; j &lt; n - 1; j++) { // linear pass\n      if (arr[j] &gt; arr[j + 1]) { // swap if the element is greater than the next\n        swap(arr[j], arr[j + 1]);\n      }\n    }\n  }\n}\n</code></pre> <p>Is it possible to optimize the bubble sort algorithm?  - The example above always pass from the beginning to the end of the array, but it is possible to stop the inner loop earlier if the right side of the array is already sorted. - You can count how many swaps you did in the inner loop, and if you did 0 swaps, you can stop the outer loop.</p>"},{"location":"algorithms/04-sorting/#questions","title":"Questions:","text":"<ul> <li>What is the best case scenario for the bubble sort?</li> <li>What is the worst case scenario for the bubble sort?</li> <li>How many writes does the bubble sort do?</li> <li>How many reads does the bubble sort do?</li> <li>What is the time complexity of the bubble sort?</li> <li>What is the space complexity of the bubble sort?</li> </ul>"},{"location":"algorithms/04-sorting/#selection-sort","title":"Selection sort","text":"<pre><code>void selection_sort(int arr[], int n) {\n  for (int i = 0; i &lt; n - 1; i++) { // n - 1 passes\n    int min_index = i; // the minimum element in the unsorted part of the array\n    for (int j = i + 1; j &lt; n; j++) { // linear search\n      if (arr[j] &lt; arr[min_index]) { // find the minimum element\n        min_index = j;\n      }\n    }\n    swap(arr[i], arr[min_index]); // swap the minimum element with the first element of the unsorted part\n  }\n}\n</code></pre>"},{"location":"algorithms/04-sorting/#questions_1","title":"Questions:","text":"<ul> <li>What is the best case scenario for the selection sort?</li> <li>What is the worst case scenario for the selection sort?</li> <li>How many writes does the selection sort do?</li> <li>How many reads does the selection sort do?</li> <li>What is the time complexity of the selection sort?</li> <li>What is the space complexity of the selection sort?</li> <li>What is the difference between the bubble sort and the selection sort?</li> </ul>"},{"location":"algorithms/04-sorting/#insertion-sort","title":"Insertion sort","text":"<pre><code>void insertion_sort(int arr[], int n) {\n  for (int i = 1; i &lt; n; i++) { // n - 1 passes\n    int key = arr[i]; // the key element to be inserted in the sorted part of the array\n    int j = i - 1; // the last element of the sorted part of the array\n    while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) { // shift the elements to the right to make space for the key\n      arr[j + 1] = arr[j];\n      j--;\n    }\n    arr[j + 1] = key; // insert the key in the right position\n  }\n}\n</code></pre>"},{"location":"algorithms/04-sorting/#questions_2","title":"Questions:","text":"<ul> <li>What is the best case scenario for the insertion sort?</li> <li>What is the worst case scenario for the insertion sort?</li> <li>How many writes does the insertion sort do?</li> <li>How many reads does the insertion sort do?</li> <li>What is the time complexity of the insertion sort?</li> <li>What is the space complexity of the insertion sort?</li> <li>What is the difference between the bubble sort, the selection sort, and the insertion sort?</li> </ul>"},{"location":"algorithms/04-sorting/#discussion","title":"Discussion","text":"<ul> <li>Why is sorting typically taught towards the beginning of an algorithms course?</li> <li>Why do we study algorithms like bubble sort that are almost never used in practice?</li> <li>Can you describe a non-comparative sorting algorithm?</li> <li>Which of these sorting algorithms is the best: bubble sort, selection sort, or insertion sort?</li> </ul> <p>Table of differences between the sorting algorithms:</p> Algorithm Best case Worst case Time complexity Space complexity Swaps Bubble O(n) O(n^2) O(N^2) O(1) O(n^2) Selection O(n^2) O(n^2) O(N^2) O(1) O(n) Insertion O(n) O(n^2) O(N^2) O(1) O(n^2)"},{"location":"algorithms/05-divide-and-conquer/","title":"Mergesort and QuickSort","text":"<p>Both algorithms are based on recursion and divide-and-conquer strategy. Both are efficient for large datasets, but they have different performance characteristics.</p>"},{"location":"algorithms/05-divide-and-conquer/#recursion","title":"Recursion","text":"<p>Recursion is a programming technique where a function calls itself. It is a powerful tool to solve problems that can be divided into smaller problems of the same type.</p> <p>The recursion has two main parts:</p> <ul> <li>Base case: the condition that stops the recursion;</li> <li>Recursive case: the condition that calls the function again.</li> </ul> <p>Let's see an example of a recursive function to calculate the factorial of a number:</p> <pre><code>#include &lt;iostream&gt;\n\nint factorial(int n) {\n  if (n == 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n</code></pre>"},{"location":"algorithms/05-divide-and-conquer/#mergesort","title":"Mergesort","text":"<p>Mergesort divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves.</p> <p>You can split the algorithm into two main parts:</p> <ul> <li>Mergesort: the function that calls itself for the two halves;</li> <li>Merge: the function that merges the two sorted halves.</li> </ul> <p> image source</p> <p>The algorthims will keep dividing the array (in red) until it reaches the base case, where the array has only one element(in gray). Then it will merge the two sorted subarrays (in green).</p> <p> image source</p>"},{"location":"algorithms/05-divide-and-conquer/#mergesort-time-complexity","title":"Mergesort time complexity","text":"<ul> <li>Mergesort is time <code>O(n*lg(n))</code> in the worst case scenario. It is the best time complexity for a comparison-based sorting algorithm.</li> <li>The algorithm is stable. It maintain the relative order of elements with the same keys during the sorting process.</li> </ul>"},{"location":"algorithms/05-divide-and-conquer/#mergesort-implementation","title":"Mergesort implementation","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n\n// inplace merge without extra space\ntemplate &lt;typename T&gt;\nrequires std::is_arithmetic&lt;T&gt;::value // C++20\nvoid mergeInplace(std::vector&lt;T&gt;&amp; arr, const size_t start, size_t mid,  const size_t end) {\n  size_t left = start;\n  size_t right = mid + 1;\n\n  while (left &lt;= mid &amp;&amp; right &lt;= end) {\n    if (arr[left] &lt;= arr[right]) {\n      left++;\n    } else {\n      T temp = arr[right];\n      for (size_t i = right; i &gt; left; i--) {\n        arr[i] = arr[i - 1];\n      }\n      arr[left] = temp;\n      left++;\n      mid++;\n      right++;\n    }\n  }\n}\n\n// Merge two sorted halves\ntemplate &lt;typename T&gt;\nrequires std::is_arithmetic&lt;T&gt;::value // C++20\nvoid merge(std::vector&lt;T&gt;&amp; arr, const size_t start, const size_t mid,  const size_t end) {\n  // create a temporary array to store the merged array\n  std::vector&lt;T&gt; temp(end - start + 1);\n\n  // indexes for the subarrays:\n  const size_t leftStart = start;\n  const size_t leftEnd = mid;\n  const size_t rightStart = mid + 1;\n  const size_t rightEnd = end;\n\n  // indexes for\n  size_t tempIdx = 0;\n  size_t leftIdx = leftStart;\n  size_t rightIdx = rightStart;\n\n  // merge the subarrays\n  while (leftIdx &lt;= leftEnd &amp;&amp; rightIdx &lt;= rightEnd) {\n    if (arr[leftIdx] &lt; arr[rightIdx])\n      temp[tempIdx++] = arr[leftIdx++];\n    else\n      temp[tempIdx++] = arr[rightIdx++];\n  }\n\n  // copy the remaining elements of the left subarray\n  while (leftIdx &lt;= leftEnd)\n    temp[tempIdx++] = arr[leftIdx++];\n\n  // copy the remaining elements of the right subarray\n  while (rightIdx &lt;= rightEnd)\n    temp[tempIdx++] = arr[rightIdx++];\n\n  // copy the merged array back to the original array\n  std::copy(temp.begin(), temp.end(), arr.begin() + start);\n}\n\n// recursive mergesort\ntemplate &lt;typename T&gt;\nrequires std::is_arithmetic&lt;T&gt;::value // C++20\nvoid mergesortRecursive(std::vector&lt;T&gt;&amp; arr,\n                        size_t left,\n                        size_t right) {\n  if (right - left &gt; 0) {\n    size_t mid = (left + right) / 2;\n    mergesortRecursive(arr, left, mid);\n    mergesortRecursive(arr, mid+1, right);\n    merge(arr, left, mid, right);\n    // if the memory is limited, use the inplace merge at the cost of performance\n    // mergeInplace(arr, left, mid - 1, right - 1);\n  }\n}\n\n// interactive mergesort\ntemplate &lt;typename T&gt;\nrequires std::is_arithmetic&lt;T&gt;::value // C++20\nvoid mergesortInteractive(std::vector&lt;T&gt;&amp; arr) {\n  for(size_t width = 1; width &lt; arr.size(); width *= 2) {\n    for(size_t left = 0; left &lt; arr.size(); left += 2 * width) {\n      size_t mid = std::min(left + width, arr.size());\n      size_t right = std::min(left + 2 * width, arr.size());\n      merge(arr, left, mid - 1, right - 1);\n      // if the memory is limited, use the inplace merge at the cost of performance\n      // mergeInplace(arr, left, mid - 1, right - 1);\n    }\n  }\n}\n\n\nint main() {\n  std::vector&lt;int&gt; arr1;\n  for(int i = 1000; i &gt; 0; i--)\n    arr1.push_back(rand()%1000);\n  std::vector&lt;int&gt; arr2 = arr1;\n\n  for(auto i: arr1) std::cout &lt;&lt; i &lt;&lt; \" \";\n  std::cout &lt;&lt; std::endl;\n\n  mergesortRecursive(arr1, 0, arr1.size() - 1);\n  for(auto i: arr1) std::cout &lt;&lt; i &lt;&lt; \" \";\n  std::cout &lt;&lt; std::endl;\n\n  mergesortInteractive(arr2);\n  for(auto i: arr2) std::cout &lt;&lt; i &lt;&lt; \" \";\n  std::cout &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre>"},{"location":"algorithms/05-divide-and-conquer/#mergesort-space-complexity","title":"Mergesort space complexity","text":"<p>You can implement Mergesort in two ways:</p> <ul> <li>Recursive: the function calls itself for the two halves;</li> <li>Iterative: the function uses a loop to merge the two sorted halves.</li> </ul> <p>The interactive version is more efficient than the recursive version, but it is more complex to understand. But both uses the same core algorithm to merge the two sorted halves.</p> <p>The main issue with Mergesort is that it requires extra space <code>O(n)</code> to merge the subarrays, which can be problem for large datasets.</p> <ul> <li>The recursive version will increase the call stack by <code>O(lg(n)</code> and can potentially cause a stack overflow;</li> <li>The iterative version does not add pressure to the stack;</li> </ul>"},{"location":"algorithms/05-divide-and-conquer/#quicksort","title":"QuickSort","text":"<p>Quicksort is prtetty similar to mergesort, but it solves the extra memory allocation at expense of stability. So quicksort is an <code>in-place</code> and <code>unstable</code> sorting algorithm.</p> <p>One of the core strategy of quicksort is pivoting. It will be selected and the array will be partitioned in two subarrays: one with elements smaller than the pivot (left) and the other with elements greater than the pivot (right).</p> <p>The partitioning process consists of the following steps:</p> <ul> <li>Select a pivotIndex (left, right, random or median);</li> <li>Swap the pivot with the leftmost element (this can be delayed to the end of the step);</li> <li>Set the pivot to the leftmost element (assuming you swapped);</li> <li>Set the left and right indexes;</li> <li>While the left index is less than or equal to the right index:<ul> <li>If the left element is less than or equal to the pivot, increment the left index;</li> <li>If the right element is greater than the pivot, decrement the right index;</li> <li>If the left element is greater than the pivot and the right element is less than or equal to the pivot, swap the left and right elements;</li> </ul> </li> </ul> <p>source</p> <p></p>"},{"location":"algorithms/05-divide-and-conquer/#quicksort-time-complexity","title":"Quicksort time complexity","text":"<p>The main issue with quicksort is that it can degrade to <code>O(n^2)</code> in an already sorted array. To solve this issue, we can select a random pivot, or the median of the first, middle and last element of the array. This can increase the stability of the algorithm at the expense of performance. The best case scenario is <code>O(n*lg(n))</code> and the average case is <code>O(n*lg(n))</code>.</p>"},{"location":"algorithms/05-divide-and-conquer/#quicksort-implementation","title":"QuickSort implementation","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;utility&gt;\n#include &lt;stack&gt;\n#include &lt;random&gt;\n\nusing std::stack;\nusing std::swap;\nusing std::pair;\nusing std::vector;\nusing std::cout;\n\n// Function to generate a random pivot index within the range [left, right]\ntemplate&lt;typename T&gt;\nrequires std::integral&lt;T&gt; // c++20\nT randomRange(T left, T right) {\n    static std::random_device rd;\n    static std::mt19937 gen(rd());\n    std::uniform_int_distribution&lt;T&gt; dist(left, right);\n    return dist(gen);\n}\n\n// partition\ntemplate&lt;typename T&gt;\nrequires std::is_arithmetic_v&lt;T&gt;\nsize_t partition(std::vector&lt;T&gt;&amp; arr, size_t left, size_t right) {\n    // random pivot to increase stability at the cost of performance by random call\n    size_t pivotIndex = randomRange(left, right);\n    swap(arr[left], arr[pivotIndex]);\n\n    size_t pivot = left;\n    size_t l = left + 1;\n    size_t r = right;\n\n    while (l &lt;= r) {\n        if (arr[l] &lt;= arr[pivot]) l++;\n        else if (arr[r] &gt; arr[pivot]) r--;\n        else swap(arr[l], arr[r]);\n    }\n    swap(arr[pivot], arr[r]);\n    return r;\n}\n\n// quicksort recursive\ntemplate&lt;typename T&gt;\nrequires std::is_arithmetic_v&lt;T&gt;\nvoid quicksortRecursive(std::vector&lt;T&gt;&amp; arr, size_t left, size_t right) {\n    if (left &lt; right) {\n        // partition the array\n        size_t pivot = partition(arr, left, right);\n        // recursive call to left and right subarray\n        quicksortRecursive(arr, left, pivot - 1);\n        quicksortRecursive(arr, pivot + 1, right);\n    }\n}\n\n// quicksort interactive\ntemplate&lt;typename T&gt;\nrequires std::is_arithmetic_v&lt;T&gt;\nvoid quicksortInteractive(std::vector&lt;T&gt;&amp; arr, size_t left, size_t right) {\n    // simulate recursive call and avoid potential stack overflow\n    // std::stack allocate memory to hold data content on heap.\n    stack&lt;pair&lt;size_t, size_t&gt;&gt; stack;\n    // produce the initial state\n    stack.emplace(left, right);\n    // iterate\n    while (!stack.empty()) {\n        // consume\n        auto [left, right] = stack.top(); // C++17\n        stack.pop();\n        if (left &lt; right) {\n            auto pivot = partition(arr, left, right);\n            // produce\n            stack.emplace(left, pivot - 1);\n            stack.emplace(pivot + 1, right);\n        }\n    }\n}\n\nint main() {\n    std::vector&lt;int&gt; arr1;\n    for (int i = 0; i &lt; 100; i++) arr1.push_back(rand() % 100);\n    vector&lt;int&gt; arr2 = arr1;\n\n    for (auto&amp; i : arr1) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; std::endl;\n\n    quicksortRecursive(arr1, 0, arr1.size() - 1);\n    for (auto&amp; i : arr1) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; std::endl;\n\n    quicksortInteractive(arr2, 0, arr2.size() - 1);\n    for (auto&amp; i : arr2) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"algorithms/05-divide-and-conquer/#quicksort-space-consumption","title":"Quicksort space consumption","text":"<ul> <li>The recursive version of quicksort can increase the function call stack by <code>O(lg(n))</code> on average, but it can degrade to <code>O(n)</code> in the worst case scenario. Potentially causing a stack overflow;</li> <li>The interactive version of quicksort avoids the function call stack issue, avoiding stack overflow. But the memory required for the replacement is still <code>O(lg(n))</code> on average and <code>O(n)</code> for the indexes in the worst case scenario.</li> </ul>"},{"location":"algorithms/06-hashtables/","title":"Hastables","text":"<p>Hashtables ane associative datastructures that stores key-value pairs. It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found.</p> <p>The core of the generic associative container is to implement ways to get and set values by keys such as:</p> <ul> <li><code>void insert(K key, V value)</code>: Add a new key-value pair to the hashtable. If the key already exists, update the value.</li> <li><code>V at(K key)</code>: Get the value of a given key. If the key does not exist, return a default value.</li> <li><code>void remove(K key)</code>: Remove a key-value pair from the hashtable.</li> <li><code>bool contains(K key)</code>: Check if a key exists in the hashtable.</li> <li><code>int size()</code>: Get the number of key-value pairs in the hashtable.</li> <li><code>bool isEmpty()</code>: Check if the hashtable is empty.</li> <li><code>void clear()</code>: Remove all key-value pairs from the hashtable.</li> <li><code>V&amp; operator[](K key)</code>: Get the value of a given key. If the key does not exist, insert a new key-value pair with a default value.</li> </ul>"},{"location":"algorithms/06-hashtables/#key-value-pairs","title":"Key-value pairs","text":"<p>In C++ you could use <code>std::pair</code> from the <code>utility</code> library to store key-value pairs. </p> <pre><code>#include &lt;utility&gt;\n#include &lt;iostream&gt;\n\nint main() {\n  std::pair&lt;int, int&gt; pair = std::make_pair(1, 2);\n  std::cout &lt;&lt; pair.first &lt;&lt; \" \" &lt;&lt; pair.second &lt;&lt; std::endl;\n  // prints 1 2\n  return 0;\n}\n</code></pre> <p>Or you could create your own key-value pair class.</p> <pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename K, typename V&gt;\nstruct KeyValuePair {\n  K key;\n  V value;\n  KeyValuePair(K key, V value) : key(key), value(value) {}\n};\n\nint main() {\n  KeyValuePair&lt;int, int&gt; pair(1, 2);\n  std::cout &lt;&lt; pair.key &lt;&lt; \" \" &lt;&lt; pair.value &lt;&lt; std::endl;\n  // prints 1 2\n  return 0;\n}\n</code></pre>"},{"location":"algorithms/06-hashtables/#hash-function","title":"Hash function","text":"<p>The hash function will process the key data and return an index. Usually in C++, the index is of type <code>size_t</code> which is biggest unsigned integer the platform can handle.</p> <p>The hash function should be fast and should distribute the keys uniformly across the array of buckets. The hash function should be deterministic, meaning that the same key should always produce the same hash.</p> <p>If the size of your key is less than the <code>size_t</code> you could just use the key casted to <code>size_t</code> as the hash function. If it is not, you will have to implement your own hash function. You probably should use bitwise operations to do so.</p> <pre><code>struct MyCustomDataWith128Bits {\n  uint32_t a;\n  uint32_t b;\n  uint32_t c;\n  uint32_t d;\n  size_t hash() const {\n    return (a &lt;&lt; 32) ^ (b &lt;&lt; 24) ^ (c &lt;&lt; 16) ^ d;\n  }\n};\n</code></pre> <p>Think a bit and try to come up with a nice answer: what is the ideal hash function for a given type? What are the requirements for a good hash function?</p>"},{"location":"algorithms/06-hashtables/#special-case-string-or-arrays","title":"Special case: String or arrays","text":"<p>In order to use strings as keys, you will have to create a way to convert the string's underlying data structure into a <code>size_t</code>. You could use the <code>std::hash</code> function from the <code>functional</code> library. Or create your own hash function.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nsize_t hash(const std::string&amp; key) {\n  size_t hash=0; // accumulator pattern\n  // the cost of this operation is O(n)\n  for (char c : key)\n    hash = (hash &lt;&lt; 5) ^ c;\n  return hash;\n}\n\nint main() {\n  std::hash&lt;std::string&gt; hash;\n  std::string key = \"hello\";\n  std::cout &lt;&lt; hash(key) &lt;&lt; std::endl;\n  // prints number\n  return 0;\n}\n</code></pre> <p>You can hide and amortize the cost of the hash function by cashing it. There are plenty of ideas for that. Try to come up with your own.</p>"},{"location":"algorithms/06-hashtables/#hash-tables","title":"Hash tables","text":"<p>Now that you have the hash function for you type and the key-value data structure, you can implement the hash table.</p> <p>There are plenty of algorithms to do so, and even the <code>std::unordered_map</code> is not the best, please watch those videos to understand the trade-offs and the best way to implement a hash table.</p> <ul> <li>CppCon 2017: Matt Kulukundis \u201cDesigning a Fast, Efficient, Cache-friendly Hash Table, Step by Step\u201d</li> </ul> <p>For the sake of simplicity I will use the operator modulo to convert the hash into an index array. This is not the best way to do so, but it is the easiest way to implement a hash table.</p>"},{"location":"algorithms/06-hashtables/#collision-resolution","title":"Collision resolution","text":""},{"location":"algorithms/06-hashtables/#linked-lists","title":"Linked lists","text":"<p>Assuming that your hash function is not perfect, you will have to deal with collisions. Two or more different keys could produce the same hash. There are plenty of ways to deal with that, but the easiest way is to use a linked list to store the key-value pairs that have the same hash.</p> <p>Try to come up with your own strategy to deal with collisions.</p> <p> source</p>"},{"location":"algorithms/06-hashtables/#key-restrictions","title":"Key restrictions","text":"<p>In order for the hash table to work, the key should be:</p> <ul> <li>not modifiable</li> <li>implement a hash function</li> <li>implement the <code>==</code> operator</li> </ul> <p>In C++20 you can use the <code>concept</code> feature to enforce those restrictions.</p> <pre><code>// concept for a hash table\ntemplate &lt;typename T&gt;\nconcept HasHashFunction =\nrequires(T t, T u) {\n  { t.hash() } -&gt; std::convertible_to&lt;std::size_t&gt;;\n  { t == u } -&gt; std::convertible_to&lt;bool&gt;;\n  std::is_const_v&lt;T&gt;;\n} || requires(T t, T u) {\n  { std::hash&lt;T&gt;{}(t) } -&gt; std::convertible_to&lt;std::size_t&gt;;\n  { t == u } -&gt; std::convertible_to&lt;bool&gt;;\n};\n\n\nint main() {\n  struct MyHashableType {\n    int value;\n    size_t hash() const {\n      return value;\n    }\n    bool operator==(const MyHashableType&amp; other) const {\n      return value == other.value;\n    }\n  };\n  static_assert(HasHashFunction&lt;const MyHashableType&gt;);\n  static_assert(HasHashFunction&lt;int&gt;);\n  return 0;\n}\n</code></pre> <p>But you can require more from the key if you are going to implement a more complex collision resolution strategy.</p>"},{"location":"algorithms/06-hashtables/#hash-table-implementation-with-linked-lists-chaining","title":"Hash table implementation with linked lists (chaining)","text":"<p>This implementation is naive and not efficient. It is just to give you an idea of how to implement a hash table.</p> <pre><code>#include &lt;iostream&gt;\n\n// key should not be modifiable\n// implements hash function and implements == operator\ntemplate &lt;typename T&gt;\nconcept HasHashFunction =\nrequires(T t, T u) {\n  { t.hash() } -&gt; std::convertible_to&lt;std::size_t&gt;;\n  { t == u } -&gt; std::convertible_to&lt;bool&gt;;\n  std::is_const_v&lt;T&gt;;\n} || requires(T t, T u) {\n  { std::hash&lt;T&gt;{}(t) } -&gt; std::convertible_to&lt;std::size_t&gt;;\n  { t == u } -&gt; std::convertible_to&lt;bool&gt;;\n};\n\n// hash table\ntemplate &lt;HasHashFunction K, typename V&gt;\nstruct Hashtable {\nprivate:\n    // key pair\n    struct KeyValuePair {\n        K key;\n        V value;\n        KeyValuePair(K key, V value) : key(key), value(value) {}\n    };\n\n    // node of the linked list\n    struct HashtableNode {\n        KeyValuePair data;\n        HashtableNode* next;\n        HashtableNode(K key, V value) : data(key, value), next(nullptr) {}\n    };\n\n    // array of linked lists\n    HashtableNode** table;\n    int size;\npublic:\n    // the hashtable will start with a constant size. You can resize it if you want or use any other strategy\n    // a good size is something similar to the number of elements you are going to store\n    explicit Hashtable(size_t size) {\n        // you colud make it automatically resize and increase the complexity of the implementation \n        // for the sake of simplicity I will not do that\n        this-&gt;size = size;\n        table = new HashtableNode*[size];\n        for (size_t i = 0; i &lt; size; i++) {\n            table[i] = nullptr;\n        }\n    }\nprivate:\n    inline size_t convertKeyToIndex(K t) {\n            return t.hash() % size;\n    }\npublic:\n    // inserts a new key value pair\n    void insert(K key, V value) {\n        // you can optionally resize the table and rearrange the elements if the table is too full\n        size_t index = convertKeyToIndex(key);\n        auto* node = new HashtableNode(key, value);\n        if (table[index] == nullptr) {\n            table[index] = node;\n        } else {\n            HashtableNode* current = table[index];\n            while (current-&gt;next != nullptr)\n                current = current-&gt;next;\n            current-&gt;next = node;\n        }\n    }\n\n    // contains the key\n    bool contains(K key) {\n        size_t index = convertKeyToIndex(key);\n        HashtableNode* current = table[index];\n        while (current != nullptr) {\n            if (current-&gt;data.key == key) {\n                return true;\n            }\n            current = current-&gt;next;\n        }\n        return false;\n    }\n\n    // subscript operator\n    // creates a new element if the key does not exist\n    // fails if the key is not found\n    V&amp; operator[](K key) {\n        size_t index = convertKeyToIndex(key);\n        HashtableNode* current = table[index];\n        while (current != nullptr) {\n            if (current-&gt;data.key == key) {\n                return current-&gt;data.value;\n            }\n            current = current-&gt;next;\n        }\n        throw std::out_of_range(\"Key not found\");\n    }\n\n    // deletes the key\n    // fails if the key is not found\n    void remove(K key) {\n        size_t index = convertKeyToIndex(key);\n        HashtableNode* current = table[index];\n        HashtableNode* previous = nullptr;\n        while (current != nullptr) {\n            if (current-&gt;data.key == key) {\n                if (previous == nullptr) {\n                    table[index] = current-&gt;next;\n                } else {\n                    previous-&gt;next = current-&gt;next;\n                }\n                delete current;\n                return;\n            }\n            previous = current;\n            current = current-&gt;next;\n        }\n        throw std::out_of_range(\"Key not found\");\n    }\n\n    ~Hashtable() {\n        for (size_t i = 0; i &lt; size; i++) {\n            HashtableNode* current = table[i];\n            while (current != nullptr) {\n                HashtableNode* next = current-&gt;next;\n                delete current;\n                current = next;\n            }\n        }\n    }\n};\n\nstruct MyHashableType {\n    int value;\n    size_t hash() const {\n        return value;\n    }\n    bool operator==(const MyHashableType&amp; other) const {\n        return value == other.value;\n    }\n};\n\nint main() {\n    // keys shouldn't be modifiable, implement hash function and == operator\n    Hashtable&lt;const MyHashableType, int&gt; hashtable(5);\n    hashtable.insert(MyHashableType{1}, 1);\n    hashtable.insert(MyHashableType{2}, 2);\n    hashtable.insert(MyHashableType{3}, 3);\n    hashtable.insert(MyHashableType{6}, 6); // should add to the same index as 1\n\n    std::cout &lt;&lt; hashtable[MyHashableType{1}] &lt;&lt; std::endl;\n    std::cout &lt;&lt; hashtable[MyHashableType{2}] &lt;&lt; std::endl;\n    std::cout &lt;&lt; hashtable[MyHashableType{3}] &lt;&lt; std::endl;\n    std::cout &lt;&lt; hashtable[MyHashableType{6}] &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"algorithms/06-hashtables/#open-addressing-with-linear-probing","title":"Open addressing with linear probing","text":"<p>Open addressing is a method of collision resolution in hash tables. In this approach, each cell is not a pointer to the linked list of contents of that bucket, but instead contains a single key-value pair. In linear probing, when a collision occurs, the next cell is checked. If it is occupied, the next cell is checked, and so on, until an empty cell is found.</p> <p> source </p> <p>The main advantage of open addressing is cache-friendliness. The main disadvantage is that it is more complex to implement, and it is not as efficient as linked lists when the table is too full. That's why we have to resize the table earlier, usually at 50% full, but at least 70% full.</p> <p> source</p> <p>In this implementation below, I have implemented a strategy to resize the table when it is half full. This is a common strategy to mitigate the O(n) search time when we have a lot of collisions. But on each resize, we have to rehash all elements: O(n) when it grows. This growth will occur rarely so this O(n) is amortized.</p>"},{"location":"algorithms/06-hashtables/#implementation-with-open-addressing-and-linear-probing","title":"Implementation with open addressing and linear probing","text":"<pre><code>#include &lt;iostream&gt;\n\n// key should not be modifiable\n// implements hash function and implements == operator\ntemplate &lt;typename T&gt;\nconcept HasHashFunction =\nrequires(T t, T u) {\n  { t.hash() } -&gt; std::convertible_to&lt;std::size_t&gt;;\n  { t == u } -&gt; std::convertible_to&lt;bool&gt;;\n  std::is_const_v&lt;T&gt;;\n} || requires(T t, T u) {\n  { std::hash&lt;T&gt;{}(t) } -&gt; std::convertible_to&lt;std::size_t&gt;;\n  { t == u } -&gt; std::convertible_to&lt;bool&gt;;\n};\n\n// hash table\ntemplate &lt;HasHashFunction K, typename V&gt;\nstruct Hashtable {\nprivate:\n  // key pair\n  struct KeyValuePair {\n    K key;\n    V value;\n    KeyValuePair(K key, V value) : key(key), value(value) {}\n  };\n\n  // array of linked lists\n  KeyValuePair** table;\n  int size;\n  int capacity;\npublic:\n  // a good size is something 2x bigger than the number of elements you are going to store\n  explicit Hashtable(size_t capacity=1) {\n    if(capacity == 0)\n      throw std::invalid_argument(\"Capacity must be greater than 0\");\n    // you could make it automatically resize and increase the complexity of the implementation\n    // for the sake of simplicity I will not do that\n    this-&gt;size = 0;\n    this-&gt;capacity = capacity;\n    table = new KeyValuePair*[capacity];\n    for (size_t i = 0; i &lt; capacity; i++)\n      table[i] = nullptr;\n  }\nprivate:\n  inline size_t convertKeyToIndex(K t) {\n    return t.hash() % capacity;\n  }\npublic:\n  // inserts a new key value pair\n  // this implementation uses open addressing and resize the table when it is half full\n  void insert(K key, V value) {\n    size_t index = convertKeyToIndex(key);\n    // resize if necessary\n    // in open addressing, it is common to resize when the table is half full\n    // this help mitigate O(n) search time when we have a lot of collisions\n    // but on each resize, we have to rehash all elements: O(n)\n    if (size &gt;= capacity/2) {\n      auto oldTable = table;\n      table = new KeyValuePair*[capacity*2];\n      capacity *= 2;\n      for (size_t i = 0; i &lt; capacity; i++)\n        table[i] = nullptr;\n      size_t oldSize = size;\n      size = 0;\n      // insert all elements again\n      for (size_t i = 0; i &lt; oldSize; i++) {\n        if (oldTable[i] != nullptr) {\n          insert(oldTable[i]-&gt;key, oldTable[i]-&gt;value);\n          delete oldTable[i];\n        }\n      }\n      delete[] oldTable;\n    }\n    // insert the new element\n    KeyValuePair* newElement = new KeyValuePair(key, value);\n    while (table[index] != nullptr) // find the next open index\n      index = (index + 1) % capacity;\n    table[index] = newElement;\n    size++;\n  }\n\n  // contains the key\n  bool contains(K key) {\n    size_t index = convertKeyToIndex(key);\n    KeyValuePair* current = table[index];\n    while (current != nullptr) {\n      if (current-&gt;key == key) {\n        return true;\n      }\n      index = (index + 1) % capacity;\n      current = table[index];\n    }\n\n    return false;\n  }\n\n  // subscript operator\n  // fails if the key is not found\n  V&amp; operator[](K key) {\n    size_t index = convertKeyToIndex(key);\n    KeyValuePair* current = table[index];\n    while (current != nullptr) {\n      if (current-&gt;key == key) {\n        return current-&gt;value;\n      }\n      index = (index + 1) % capacity;\n      current = table[index];\n    }\n    throw std::out_of_range(\"Key not found\");\n  }\n\n  // deletes the key\n  // fails if the key is not found\n  void remove(K key) {\n    // ideal index\n    const size_t idealIndex = convertKeyToIndex(key);\n    size_t currentIndex = idealIndex;\n    // store the last index with the same hash so we move it to the position of the removed element\n    size_t lastIndexWithSameIdealIndex = idealIndex;\n    size_t indexOfTheRemovedElement = idealIndex;\n    // iterate until we find the element, or we find an empty slot\n    while (table[currentIndex] != nullptr) {\n      if (table[currentIndex]-&gt;key == key)\n        indexOfTheRemovedElement = currentIndex;\n      if (convertKeyToIndex(table[currentIndex]-&gt;key) == idealIndex)\n        lastIndexWithSameIdealIndex = currentIndex;\n      currentIndex = (currentIndex + 1) % capacity;\n    }\n    if(table[indexOfTheRemovedElement] == nullptr || table[indexOfTheRemovedElement]-&gt;key != key)\n      throw std::out_of_range(\"Key not found\");\n    // mave the last element with the same key to the position of the removed element\n    delete table[indexOfTheRemovedElement];\n    table[indexOfTheRemovedElement] = table[lastIndexWithSameIdealIndex];\n    table[lastIndexWithSameIdealIndex] = nullptr;\n\n    // todo: shrink the table if it is too empty\n  }\n\n  ~Hashtable() {\n    for (size_t i = 0; i &lt; capacity; i++) {\n      if (table[i] != nullptr)\n        delete table[i];\n    }\n    delete[] table;\n  }\n};\n\nstruct MyHashableType {\n  int value;\n  size_t hash() const {\n    return value;\n  }\n  bool operator==(const MyHashableType&amp; other) const {\n    return value == other.value;\n  }\n};\n\nint main() {\n  // keys shouldn't be modifiable, implement hash function and == operator\n  Hashtable&lt;const MyHashableType, int&gt; hashtable(5);\n  hashtable.insert(MyHashableType{0}, 0);\n  hashtable.insert(MyHashableType{1}, 1);\n  hashtable.insert(MyHashableType{2}, 2); // triggers resize\n  hashtable.insert(MyHashableType{10}, 10); // should be inserted in the same index as 1\n\n  std::cout &lt;&lt; hashtable[MyHashableType{0}] &lt;&lt; std::endl;\n  std::cout &lt;&lt; hashtable[MyHashableType{1}] &lt;&lt; std::endl;\n  std::cout &lt;&lt; hashtable[MyHashableType{2}] &lt;&lt; std::endl;\n  std::cout &lt;&lt; hashtable[MyHashableType{10}] &lt;&lt; std::endl; // should trigger linear search\n\n  hashtable.remove(MyHashableType{0}); // should trigger swap\n\n  std::cout &lt;&lt; hashtable[MyHashableType{10}] &lt;&lt; std::endl; // shauld not trigger linear search\n  return 0;\n}\n</code></pre>"},{"location":"algorithms/08-stack-and-queue/","title":"Stack and queue","text":"<p>Warning</p> <p>This section is a continuation of the Dynamic Data section. Please make sure to read it before continuing.</p>"},{"location":"algorithms/08-stack-and-queue/#stack","title":"Stack","text":"<p>source</p> <p>Stacks are a type of dynamic data where the last element added is the first one to be removed. This is known as LIFO (Last In First Out) or FILO (First In Last Out). Stacks are used in many algorithms and data structures, such as the depth-first search algorithm, back-track and the call stack.</p>"},{"location":"algorithms/08-stack-and-queue/#stack-basic-operations","title":"Stack Basic Operations","text":"<ul> <li><code>push</code> - Add an element to the top of the stack.</li> <li><code>pop</code> - Remove the top element from the stack.</li> <li><code>top</code> - Return the top element of the stack.</li> </ul> <p> source</p>"},{"location":"algorithms/08-stack-and-queue/#stack-implementation","title":"Stack Implementation","text":"<p>You can either implement it using a dynamic array or a linked list. But the dynamic array implementation is more efficient in terms of memory and speed. So let's use it.</p> <pre><code>#include &lt;iostream&gt;\n\n// stack\ntemplate &lt;typename T&gt;\nclass Stack {\n  T* data; // dynamic array\n  size_t size; // number of elements in the stack\n  size_t capacity; // capacity of the stack\npublic:\n  Stack() : data(nullptr), size(0), capacity(0) {}\n  ~Stack() {\n    delete[] data;\n  }\n  void push(const T&amp; value) {\n    // if it needs to be resized\n    // amortized cost of push is O(1)\n    if (size == capacity) {\n      capacity = capacity == 0 ? 1 : capacity * 2;\n      T* new_data = new T[capacity];\n      std::copy(data, data + size, new_data);\n      delete[] data;\n      data = new_data;\n    }\n    // stores the value and then increments the size\n    data[size++] = value; \n  }\n  T pop() {\n    if (size == 0)\n      throw std::out_of_range(\"Stack is empty\");\n\n    // shrink the array if necessary\n    // ammortized cost of pop is O(1)\n    if (size &lt;= capacity / 4) {\n      capacity /= 2;\n      T* new_data = new T[capacity];\n      std::copy(data, data + size, new_data);\n      delete[] data;\n      data = new_data;\n    }\n    return data[--size];\n  }\n  T&amp; top() const {\n    if (size == 0)\n      throw std::out_of_range(\"Stack is empty\");\n    // cost of top is O(1)\n    return data[size - 1];\n  }\n  size_t get_size() const {\n    return size;\n  }\n  bool is_empty() const {\n    return size == 0;\n  }\n};\n</code></pre>"},{"location":"algorithms/08-stack-and-queue/#queue","title":"Queue","text":"<p> source</p> <p>A queue is a type of dynamic data where the first element added is the first one to be removed. This is known as FIFO (First In First Out). Queues are used in many algorithms and data structures, such as the breadth-first search algorithm. Usually it is implemented as a linked list, in order to provide O(1) time complexity for the <code>enqueue</code> and <code>dequeue</code> operations. But it can be implemented using a dynamic array as well and amortize the cost for resizing. The dynamic array implementation is more efficient in terms of memory and speed(if not resized frequently).</p>"},{"location":"algorithms/08-stack-and-queue/#queue-basic-operations","title":"Queue Basic Operations","text":"<ul> <li><code>enqueue</code> - Add an element to the end of the queue.</li> <li><code>dequeue</code> - Remove the first element from the queue.</li> <li><code>front</code> - Return the first element of the queue.</li> </ul> <p>source</p>"},{"location":"algorithms/08-stack-and-queue/#queue-implementation","title":"Queue Implementation","text":"<pre><code>// queue\ntemplate &lt;typename T&gt;\nclass Queue {\n  // dynamic array approach instead of linked list\n  T* data;\n  size_t front; // index of the first valid element\n  size_t back; // index of the next free slot\n  size_t capacity; // current capacity of the array\n  size_t size; // number of elements in the queue\n\n  explicit Queue() : data(nullptr), front(0), back(0), capacity(capacity), size(0) {};\n\n  void enqueue(T value) {\n    // resize if necessary\n    // amortized O(1) time complexity\n    if (size == capacity) {\n      auto old_capacity = capacity;\n      capacity = capacity ? capacity * 2 : 1;\n      T* new_data = new T[capacity];\n      for (size_t i = 0; i &lt; size; i++)\n        new_data[i] = data[(front + i) % old_capacity];\n      delete[] data;\n      data = new_data;\n      front = 0;\n      back = size;\n    }\n    data[back] = value;\n    back = (back + 1) % capacity;\n    size++;\n  }\n\n  void dequeue() {\n    if (size) {\n      front = (front + 1) % capacity;\n      size--;\n    }\n    // shrink if necessary\n    if(size &lt;= capacity / 4) {\n      auto old_capacity = capacity;\n      capacity /= 2;\n      T* new_data = new T[capacity];\n      for (size_t i = 0; i &lt; size; i++)\n        new_data[i] = data[(front + i) % old_capacity];\n      delete[] data;\n      data = new_data;\n      front = 0;\n      back = size;\n    }\n  }\n\n  T&amp; head() {\n    return data[front];\n  }\n};\n</code></pre>"},{"location":"algorithms/10-graphs/","title":"Graph","text":"<p>Graphs are a type of data structures that interconnects nodes (or vertices) with edges. They are used to model relationships between objects. This is the basics for most AI algorithms, such as pathfinding, decision making, neuron networks, and others.</p> <p></p>"},{"location":"algorithms/10-graphs/#basic-definitions","title":"Basic Definitions","text":"<ul> <li>Nodes or vertices are the basic entities in a graph and hold the data. </li> <li>Edges are the connections and relation between the nodes. The relationship can be enriched in multiple ways such as direction, weight, and others. </li> <li>Neighbours are the nodes that are connected to a specific node.</li> <li>Path is the sequence of edges and nodes that allows you to go from one node to another.</li> <li>Degree of a node is the number of edges connected to it.</li> </ul>"},{"location":"algorithms/10-graphs/#representation","title":"Representation","text":"<p>A graph is composed by a set of vertices(nodes) and edges. There are multiple ways to represent a graph, and every style has its own advantages and disadvantages.</p>"},{"location":"algorithms/10-graphs/#adjacency-matrix","title":"Adjacency matrix","text":"<p>Assuming every node is labeled with a number from <code>0</code> to <code>n-1</code>, an adjacency matrix is a 2D array of size <code>n</code> x <code>n</code>. The entry <code>a[i][j]</code> is 1 if there is an edge from node i to node j, and 0 otherwise. The adjacency matrix for a graph is always a square matrix.</p> <pre><code>// adjacency matrix\n// NUMBER_OF_NODES is the number of nodes\n// bool marks if there is an edge between the nodes.\n// switch bool to float if you want to store the weight of the edge.\n// switch bool to a data structure if you want to store more information about the edge.\nbool adj_matrix[NUMBER_OF_NODES][NUMBER_OF_NODES];\nvector&lt;Node&gt; nodes;\n</code></pre> <ul> <li>Pros: it is simple and easy to implement and blazing fast for checking if there is an edge between two nodes. </li> <li>Cons: it consumes a lot of space, especially for sparse graphs.</li> </ul>"},{"location":"algorithms/10-graphs/#adjacency-list","title":"Adjacency list","text":"<p>It can be implemented in multiple ways, but a common one is to use an array of lists(or vectors). The index(key) of the array is the node id, and the value is a list of nodes that are connected to the key node.</p> <pre><code>// adjacency list\n// NUMBER_OF_NODES is the number of nodes\n// vector for storing the connected nodes ids as integers\n// switch vector&lt;int&gt; to map&lt;int, float&gt; if you want to store the weight of the edge.\n// switch map&lt;int, float&gt; to map&lt;int, data_structure&gt; if you want to store more information about the edge.\nvector&lt;int&gt; adj_list[NUMBER_OF_NODES];\nvector&lt;Node&gt; nodes;\n</code></pre> <ul> <li>Pros: it is more memory efficient for sparse graphs.</li> <li>Cons: it can be slower to check if there is an edge between two nodes.</li> </ul>"},{"location":"algorithms/10-graphs/#edge-list","title":"Edge list","text":"<p>It is a collection of edges, where each egge can be represented as a pair of nodes, a pair of node ids, or a pair of references to nodes.  </p> <pre><code>// edge list\nvector&lt;pair&lt;int, int&gt;&gt; edges;\nvector&lt;Node&gt; nodes;\n</code></pre> <ul> <li>Pros: it is the most memory efficient representation for sparse graphs.</li> <li>Cons: it can be slower to check if there is an edge between two nodes.</li> </ul>"},{"location":"algorithms/10-graphs/#graph-types","title":"Graph Types","text":"<ul> <li>Null graph: A graph with no edges.</li> <li>Trivial graph: A graph with only one vertex.</li> <li>Directed graph: A graph where the edges have direction.</li> <li>Weighted graph: A graph where the edges have a weight.</li> <li>Undirected graph: A graph where the edges have no direction or are bidirectional. If weighted, the weights are the same in both directions.</li> <li>Connected graph: A graph where all nodes can be reached from any other node.</li> <li>Disconnected graph: A graph where some nodes cannot be reached from other nodes.</li> <li>Cyclic graph: A graph that has at least one cycle, a path that starts and ends at the same node.</li> <li>Acyclic graph: A graph that has no cycles.</li> <li>Complete graph: A graph where every pair of nodes is connected by a unique edge.</li> <li>Regular graph: A graph where every node has the same degree.</li> </ul>"},{"location":"algorithms/10-graphs/#graph-algorithms","title":"Graph Algorithms","text":""},{"location":"algorithms/10-graphs/#depth-first-search-dfs","title":"Depth-First Search (DFS)","text":"<p>DFS is a graph traversal algorithm based on a stack data structure. Basically, the algorithm starts at a node and explores as far as possible along each branch before backtracking. It is used to find connected components, determine the connectivity of the graph, and solve many other problems.</p> <p>DFS visualization</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;unordered_set&gt;\n#include &lt;unordered_map&gt;\n#include &lt;string&gt;\n\n// graph is represented as an adjacency list\nstd::unordered_map&lt;std::string, std::unordered_set&lt;std::string&gt;&gt; graph;\nstd::unordered_set&lt;std::string&gt; visited;\n\n// dfs recursive version\n// it exploits the call stack to store the nodes to visit\n// you might want to use the iterative version if you have a large graph\n// for that, use std::stack data structure and producer-consumer pattern\nvoid dfs(const std::string&amp; node) {\n  std::cout &lt;&lt; node &lt;&lt; std::endl;\n  visited.insert(node);\n  for (const auto&amp; neighbor : graph[node])\n    if (!visited.contains(neighbor))\n      dfs(neighbor);\n}\n\nvoid dfs_interactive(const std::string&amp; node) {\n  std::stack&lt;std::string&gt; stack;\n  // produce the first node\n  stack.push(node);\n  while (!stack.empty()) {\n    // consume the node\n    std::string current = stack.top();\n    stack.pop();\n    // avoid visiting the same node twice\n    if (visited.contains(current))\n      continue;\n    // mark as visited\n    visited.insert(current);\n\n    // visit the node\n    std::cout &lt;&lt; current &lt;&lt; std::endl;\n\n    // produce the next node to visit\n    for (const auto&amp; neighbor : graph[current]) {\n      if (!visited.contains(neighbor)) {\n        stack.push(neighbor);\n        break; // is this break necessary?\n      }\n    }\n  }\n}\n\nint main() {\n  std::cout &lt;&lt; \"Write one node string per line. When you are done, add an empty line.\" &lt;&lt; std::endl;\n  std::string node;\n  while (std::getline(std::cin, node) &amp;&amp; !node.empty())\n    graph[node] = {};\n  std::cout &lt;&lt; \"Write the edges as 'node1;node2'. When you are done, add an empty line.\" &lt;&lt; std::endl;\n  std::string edge;\n  while (std::getline(std::cin, edge) &amp;&amp; !edge.empty()) {\n    auto pos = edge.find(';');\n    // Bidirectional\n    std::string source = edge.substr(0, pos);\n    std::string destination = edge.substr(pos + 1);\n    graph[source].insert(destination);\n    graph[destination].insert(source);\n  }\n  std::cout &lt;&lt; \"Write the starting node.\" &lt;&lt; std::endl;\n  std::string start;\n  std::cin &gt;&gt; start;\n  dfs(start);\n  return 0;\n}\n</code></pre>"},{"location":"algorithms/10-graphs/#breadth-first-search-bfs","title":"Breadth-First Search (BFS)","text":"<p>BFS is a graph traversal algorithm based on a queue data structure. It starts at a node and explores all of its neighbours before moving on to the next level of neighbours by enqueing them. It is used to find the shortest path, determine the connectivity of the graph, and others.</p> <p>BFS visualization</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;unordered_set&gt;\n#include &lt;unordered_map&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\n\n// graph is represented as an adjacency list\nstd::unordered_map&lt;std::string, std::unordered_set&lt;std::string&gt;&gt; graph;\nstd::unordered_set&lt;std::string&gt; visited;\n\n// bfs\nvoid bfs(const std::string&amp; node) {\n  std::queue&lt;std::string&gt; queue;\n  // produce the first node\n  queue.push(node);\n  while (!queue.empty()) {\n    // consume the node\n    std::string current = queue.front();\n    queue.pop();\n    // avoid visiting the same node twice\n    if (visited.contains(current))\n      continue;\n    // mark as visited\n    visited.insert(current);\n\n    // visit the node\n    std::cout &lt;&lt; current &lt;&lt; std::endl;\n\n    // produce the next node to visit\n    for (const auto&amp; neighbor : graph[current]) {\n      if (!visited.contains(neighbor))\n        queue.push(neighbor);\n    }\n  }\n}\n\nvoid dfs_interactive(const std::string&amp; node) {\n  std::stack&lt;std::string&gt; stack;\n  // produce the first node\n  stack.push(node);\n  while (!stack.empty()) {\n    // consume the node\n    std::string current = stack.top();\n    stack.pop();\n    // avoid visiting the same node twice\n    if (visited.contains(current))\n      continue;\n    // mark as visited\n    visited.insert(current);\n\n    // visit the node\n    std::cout &lt;&lt; current &lt;&lt; std::endl;\n\n    // produce the next node to visit\n    for (const auto&amp; neighbor : graph[current]) {\n      if (!visited.contains(neighbor)) {\n        stack.push(neighbor);\n        break; // is this break necessary?\n      }\n    }\n  }\n}\n\nint main() {\n  std::cout &lt;&lt; \"Write one node string per line. When you are done, add an empty line.\" &lt;&lt; std::endl;\n  std::string node;\n  while (std::getline(std::cin, node) &amp;&amp; !node.empty())\n    graph[node] = {};\n  std::cout &lt;&lt; \"Write the edges as 'node1;node2'. When you are done, add an empty line.\" &lt;&lt; std::endl;\n  std::string edge;\n  while (std::getline(std::cin, edge) &amp;&amp; !edge.empty()) {\n    auto pos = edge.find(';');\n    // Bidirectional\n    std::string source = edge.substr(0, pos);\n    std::string destination = edge.substr(pos + 1);\n    graph[source].insert(destination);\n    graph[destination].insert(source);\n  }\n  std::cout &lt;&lt; \"Write the starting node.\" &lt;&lt; std::endl;\n  std::string start;\n  std::cin &gt;&gt; start;\n  // dfs(start);\n  dfs_interactive(start);\n  return 0;\n}\n</code></pre> <p> source</p> <p>https://www.redblobgames.com/pathfinding/grids/graphs.html</p> <p>https://www.redblobgames.com/pathfinding/a-star/introduction.html</p> <p>https://qiao.github.io/PathFinding.js/visual/</p>"},{"location":"algorithms/11-dijkstra/","title":"Djikstra's algorithm","text":"<p> source</p> <p>Dijkstra's algorithm is a graph traversal algorithm similar to BFS, but it takes into account the weight of the edges. It uses a priority list to visit the nodes with the smallest cost first and a set to keep track of the visited nodes. A came_from map can be used to store the parent node of each node to create a pathfinding algorithm.</p> <p>It uses the producer-consumer pattern, where the producer is the algorithm that adds the nodes to the priority queue and the consumer is the algorithm that removes the nodes from the priority queue and do the work.</p> <p>The algorithm is greedy and works well with positive weights. It is not optimal for negative weights, for that you should use the Bellman-Ford algorithm.</p> <p></p>"},{"location":"algorithms/11-dijkstra/#data-structure","title":"Data Structure","text":"<p>For the graph, we will use an adjacency list:</p> <pre><code>// node registry\n// K is the key type for indexing the nodes, usually it can be a string or an integer\n// Node is the Node type to store node related data \nunordered_map&lt;K, N&gt; nodes;\n\n// K is the key type of the index\n// W is the weight type of the edge, usually it can be an integer or a float\n// W can be more robust and become a struct, for example, to store the weight and the edge name\n// if W is a struct, remember no implement the &lt; operator for the priority queue work\n// unordered_map is used to exploit the O(1) access time and be tolerant to sparse keys\nunordered_map&lt;K, unordered_map&lt;K, W&gt;&gt; edges;\n\n// usage\n// the cost from node A to node B is 5\nedges[\"A\"][\"B\"] = 5;\n// if you want to make it bidirectional set the opposite edge too\n// edges[\"B\"][\"A\"] = 5;\n</code></pre> <p>For the algoritm to work we will need a priority queue to store the nodes to be visited:</p> <pre><code>// priority queue to store the nodes to be visited\n// C is the W type and stores the accumulated cost to reach the node\n// K is the key type of the index of the node\npriority_queue&lt;pair&lt;C, K&gt;&gt; frontier;\n</code></pre> <p>For the visited nodes we will use a set:</p> <pre><code>// set to store the visited nodes\n// K is the key type of the index of the node\nunordered_set&lt;K&gt; visited;\n</code></pre>"},{"location":"algorithms/11-dijkstra/#algorithm","title":"Algorithm","text":"<p>List of visualizations:</p> <ul> <li>https://www.cs.usfca.edu/~galles/visualization/Dijkstra.html</li> <li>https://visualgo.net/en/sssp</li> <li>https://qiao.github.io/PathFinding.js/visual/</li> </ul> <p></p> <p>Example of Dijkstra's algorithm in C++ to build a path from the start node to the end node:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;unordered_set&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\n// Dijikstra\nstruct Node {\n  // add your custom data here\n  string name;\n};\n\n// nodes indexed by id\nunordered_map&lt;uint64_t, Node&gt; nodes;\n// edges indexed by source id and destination id, the value is the\nunordered_map&lt;uint64_t, unordered_map&lt;uint64_t, double&gt;&gt; edges;\n// priority queue for the frontier\n// this could be declared inside the Dijkstra function\npriority_queue&lt;pair&lt;double, uint64_t&gt;&gt; frontier;\n\n// optionally, in order to create a pathfinding, use came_from map to store the parent node\nunordered_map&lt;uint64_t, uint64_t&gt; came_from;\n// cost to reach the node so far\nunordered_map&lt;uint64_t, double&gt; cost_so_far;\n\nvoid Visit(Node* node){\n  // add your custom code here\n  cout &lt;&lt; node-&gt;name &lt;&lt; endl;\n}\n\nvoid Dijkstra(uint64_t start_id) {\n  cout &lt;&lt; \"Visiting nodes:\" &lt;&lt; endl;\n  // clear the costs so far\n  cost_so_far.clear();\n  // boostrap the frontier\n  // 0 means the cost to reach the start node is 0\n  frontier.emplace(0, start_id);\n  cost_so_far[start_id] = 0;\n  // while there are nodes to visit\n  while (!frontier.empty()) {\n    // get the node with the lowest cost\n    auto [cost, current_id] = frontier.top();\n    frontier.pop();\n    // get the node\n    Node* current = &amp;nodes[current_id];\n    // visit the node\n    Visit(current);\n    // for each neighbor\n    for (const auto&amp; [neighbor_id, edge_cost] : edges[current_id]) {\n      // calculate the new cost to reach the neighbor\n      double new_cost = cost_so_far[current_id] + edge_cost;\n      // if the neighbor is not visited yet or the new cost is less than the previous cost\n      if (!cost_so_far.contains(neighbor_id) || new_cost &lt; cost_so_far[neighbor_id]) {\n        // update the cost\n        cost_so_far[neighbor_id] = new_cost;\n        // add the neighbor to the frontier\n        frontier.emplace(new_cost, neighbor_id);\n        // update the parent node\n        came_from[neighbor_id] = current_id;\n      }\n    }\n  }\n}\n\nint main() {\n  // build the graph\n  nodes[0] = {\"A\"}; // this will be our start\n  nodes[1] = {\"B\"};\n  nodes[2] = {\"C\"};\n  nodes[3] = {\"D\"}; // this will be our end\n  // store the edges costs\n  edges[0][1] = 1;\n  edges[0][2] = 2;\n  edges[0][3] = 100; // this is a very expensive edge\n  edges[1][3] = 3;\n  edges[2][3] = 1;\n  // the path from 0 to 3 is A -&gt; C -&gt; D even though the edge A -&gt; D have less steps\n  Dijkstra(0);\n  // print the path from the end to the start\n  cout &lt;&lt; \"Path:\" &lt;&lt; endl;\n  uint64_t index = 3;\n  // prevents infinite loop if the end is unreachable\n  if(!came_from.contains(index)) {\n    cout &lt;&lt; \"No path found\" &lt;&lt; endl;\n    return 0;\n  }\n  while (index != 0) {\n    cout &lt;&lt; nodes[index].name &lt;&lt; endl;\n    index = came_from[index];\n  }\n  cout &lt;&lt; nodes[0].name &lt;&lt; endl;\n  return 0;\n}\n</code></pre>"},{"location":"algorithms/12-mst/","title":"Minimum Spanning Tree","text":"<p>Jarnik's(and Prim's) developed the Minimum Spanning Tree, it is an algorithm to find a tree in a graph that connects all the vertices with the minimum possible accumulated weight.</p> <p>The output of the algorithm is a set of edges that the sum of the weighs is the minimum possible and connects all reachable vertices.</p>"},{"location":"algorithms/12-mst/#minimum-spanning-tree-algorithm","title":"Minimum Spanning Tree Algorithm","text":"<ul> <li>Add a vertex to the minimum spanning tree;</li> <li>While all nodes are not in the minimum spanning tree:<ul> <li>Find the edge with the minimum weight that connects a vertex in the MST to a vertex not in the MST;</li> <li>Add the vertex from that edge to the MST;</li> </ul> </li> </ul> <p>   By Shiyu Ji - Own work, CC BY-SA 4.0, Link</p>"},{"location":"algorithms/12-mst/#example","title":"Example","text":"<p>Let's consider the following graph:</p> <pre><code>graph LR\nv0((0))\nv1((1))\nv2((2))\nv3((3))\nv4((4))\nv5((5))\nv6((6))\nv7((7))\nv8((8))\nv3 &lt;-. 3 .-&gt; v4\nv5 &lt;-. 15 .-&gt; v4\nv3 &lt;-. 12 .-&gt; v5\nv2 &lt;-. 4 .-&gt; v3\nv2 &lt;-. 6 .-&gt; v5\nv6 &lt;-. 1 .-&gt; v5\nv2 &lt;-. 8 .-&gt; v8\nv8 &lt;-. 10 .-&gt; v6\nv1 &lt;-. 12 .-&gt; v2\nv7 &lt;-. 6 .-&gt; v8\nv7 &lt;-. 11 .-&gt; v6\nv1 &lt;-. 2 .-&gt; v7\nv0 &lt;-. 4 .-&gt; v7\nv0 &lt;-. 8 .-&gt; v1</code></pre> <p>In order to bootstrap the algorithm we need to:</p> <ul> <li>Select a random vertex;<ul> <li>let's choose the vertex 0; </li> </ul> </li> <li>Add the vertex 0 to minimum spanning tree;<ul> <li>Add all edges that connect the vertex 0 to the priority queue, we add 1 with the weight of 8 and 7 with the weight of 4;</li> </ul> </li> </ul> <p>Current state of data:</p> <ul> <li>Minimum Spanning Tree: {0}</li> </ul> <pre><code>graph LR\nv0(((0)))\nv1((1))\nv2((2))\nv3((3))\nv4((4))\nv5((5))\nv6((6))\nv7((7))\nv8((8))\nv3 &lt;-. 3 .-&gt; v4\nv5 &lt;-. 15 .-&gt; v4\nv3 &lt;-. 12 .-&gt; v5\nv2 &lt;-. 4 .-&gt; v3\nv2 &lt;-. 6 .-&gt; v5\nv6 &lt;-. 1 .-&gt; v5\nv2 &lt;-. 8 .-&gt; v8\nv8 &lt;-. 10 .-&gt; v6\nv1 &lt;-. 12 .-&gt; v2\nv7 &lt;-. 6 .-&gt; v8\nv7 &lt;-. 11 .-&gt; v6\nv1 &lt;-. 2 .-&gt; v7\nv0 &lt;-. 4 .-&gt; v7\nv0 &lt;-. 8 .-&gt; v1</code></pre> <p>After the initial setup, we will start running the producer-consumer loop:</p> <ol> <li>List all edges from all vertices in the minimum spanning tree where the other vertex is not in the minimum spanning tree;<ul> <li>The edges are:<ul> <li>{0, 1} with the weight of 8;</li> <li>{0, 7} with the weight of 4;</li> </ul> </li> </ul> </li> </ol> <pre><code>graph LR\nv0(((0)))\nv1((1))\nv2((2))\nv3((3))\nv4((4))\nv5((5))\nv6((6))\nv7((7))\nv8((8))\nv3 ~~~ v4\nv5 ~~~ v4\nv3 ~~~ v5\nv2 ~~~ v3\nv2 ~~~ v5\nv6 ~~~ v5\nv2 ~~~ v8\nv8 ~~~ v6\nv1 ~~~ v2\nv7 ~~~ v8\nv7 ~~~ v6\nv1 ~~~ v7\nv0 &lt;-. 4 .-&gt; v7\nv0 &lt;-. 8 .-&gt; v1</code></pre> <ol> <li>Select the edge with the minimum weight;<ul> <li>The edge {0, 7} with the weight of 4; </li> </ul> </li> </ol> <pre><code>graph LR\nv0(((0)))\nv1((1))\nv2((2))\nv3((3))\nv4((4))\nv5((5))\nv6((6))\nv7((7))\nv8((8))\nv3 ~~~ v4\nv5 ~~~ v4\nv3 ~~~ v5\nv2 ~~~ v3\nv2 ~~~ v5\nv6 ~~~ v5\nv2 ~~~ v8\nv8 ~~~ v6\nv1 ~~~ v2\nv7 ~~~ v8\nv7 ~~~ v6\nv1 ~~~ v7\nv0 &lt;-- 4 --&gt; v7\nv0 &lt;-. 8 .-&gt; v1</code></pre> <ol> <li>From the selected edge, add the other vertex to the minimum spanning tree<ul> <li>Add the vertex 7 to the minimum spanning tree;</li> </ul> </li> </ol> <p>The current state of the minimum spanning three is <code>[{0, 7}]</code>.;</p> <pre><code>graph LR\nv0(((0)))\nv1((1))\nv2((2))\nv3((3))\nv4((4))\nv5((5))\nv6((6))\nv7(((7)))\nv8((8))\nv3 ~~~ v4\nv5 ~~~ v4\nv3 ~~~ v5\nv2 ~~~ v3\nv2 ~~~ v5\nv6 ~~~ v5\nv2 ~~~ v8\nv8 ~~~ v6\nv1 ~~~ v2\nv7 ~~~ v8\nv7 ~~~ v6\nv1 ~~~ v7\nv0 &lt;-- 4 --&gt; v7\nv0 ~~~ v1</code></pre> <p>Let's repeat the process once more to illustrate the algorithm:</p> <pre><code>graph LR\nv0(((0)))\nv1((1))\nv2((2))\nv3((3))\nv4((4))\nv5((5))\nv6((6))\nv7(((7)))\nv8((8))\nv3 &lt;-. 3 .-&gt; v4\nv5 &lt;-. 15 .-&gt; v4\nv3 &lt;-. 12 .-&gt; v5\nv2 &lt;-. 4 .-&gt; v3\nv2 &lt;-. 6 .-&gt; v5\nv6 &lt;-. 1 .-&gt; v5\nv2 &lt;-. 8 .-&gt; v8\nv8 &lt;-. 10 .-&gt; v6\nv1 &lt;-. 12 .-&gt; v2\nv7 &lt;-. 6 .-&gt; v8\nv7 &lt;-. 11 .-&gt; v6\nv1 &lt;-. 2 .-&gt; v7\nv0 &lt;-- 4 --&gt; v7\nv0 &lt;-. 8 .-&gt; v1</code></pre> <ol> <li>List all edges from all vertices in the minimum spanning tree where the other vertex is not in the minimum spanning tree;<ul> <li>The edges are:<ul> <li>{0, 1} with the weight of 8;</li> <li>{7, 1} with the weight of 2;</li> <li>{7, 8} with the weight of 6;</li> <li>{7, 6} with the weight of 11;</li> </ul> </li> </ul> </li> </ol> <pre><code>graph LR\nv0(((0)))\nv1((1))\nv2((2))\nv3((3))\nv4((4))\nv5((5))\nv6((6))\nv7(((7)))\nv8((8))\nv3 ~~~ v4\nv5 ~~~ v4\nv3 ~~~ v5\nv2 ~~~ v3\nv2 ~~~ v5\nv6 ~~~ v5\nv2 ~~~ v8\nv8 ~~~ v6\nv1 ~~~ v2\nv7 &lt;-. 6 .-&gt; v8\nv7 &lt;-. 11 .-&gt; v6\nv1 &lt;-. 2 .-&gt; v7\nv0 &lt;-- 4 --&gt; v7\nv0 &lt;-. 8 .-&gt; v1</code></pre> <ol> <li>Select the edge with the minimum weight;<ul> <li>The edge {7, 1} with the weight of 2;</li> </ul> </li> <li>From the selected edge, add the other vertex to the minimum spanning tree<ul> <li>Add the vertex 1 to the minimum spanning tree;</li> </ul> </li> </ol> <p>The current state of the minimum spanning three is <code>[{0, 7}, {1, 7}]</code>.</p> <pre><code>graph LR\nv0(((0)))\nv1(((1)))\nv2((2))\nv3((3))\nv4((4))\nv5((5))\nv6((6))\nv7(((7)))\nv8((8))\nv3 ~~~ v4\nv5 ~~~ v4\nv3 ~~~ v5\nv2 ~~~ v3\nv2 ~~~ v5\nv6 ~~~ v5\nv2 ~~~ v8\nv8 ~~~ v6\nv1 ~~~ v2\nv7 ~~~ v8\nv7 ~~~ v6\nv1 &lt;-- 2 --&gt; v7\nv0 &lt;-- 4 --&gt; v7\nv0 ~~~ v1</code></pre> <p>Now the current exploration state is:</p> <pre><code>graph LR\nv0(((0)))\nv1(((1)))\nv2((2))\nv3((3))\nv4((4))\nv5((5))\nv6((6))\nv7(((7)))\nv8((8))\nv3 &lt;-. 3 .-&gt; v4\nv5 &lt;-. 15 .-&gt; v4\nv3 &lt;-. 12 .-&gt; v5\nv2 &lt;-. 4 .-&gt; v3\nv2 &lt;-. 6 .-&gt; v5\nv6 &lt;-. 1 .-&gt; v5\nv2 &lt;-. 8 .-&gt; v8\nv8 &lt;-. 10 .-&gt; v6\nv1 &lt;-. 12 .-&gt; v2\nv7 &lt;-. 6 .-&gt; v8\nv7 &lt;-. 11 .-&gt; v6\nv1 &lt;-- 2 --&gt; v7\nv0 &lt;-- 4 --&gt; v7\nv0 &lt;-. 8 .-&gt; v1</code></pre> <p>The edges candidates are: </p> <ul> <li>{0, 1}: 12;</li> <li>{7, 8}: 6;</li> <li>{7, 6}: 11;</li> </ul> <p>The edge with the minimum weight is {7, 8}: 6. So we will add 8 to the minimum spanning tree.</p> <p>The current state of the minimum spanning three is <code>[{0, 7}, {1, 7}, {8, 7}]</code>.</p> <pre><code>graph LR\nv0(((0)))\nv1(((1)))\nv2((2))\nv3((3))\nv4((4))\nv5((5))\nv6((6))\nv7(((7)))\nv8(((8)))\nv3 &lt;-. 3 .-&gt; v4\nv5 &lt;-. 15 .-&gt; v4\nv3 &lt;-. 12 .-&gt; v5\nv2 &lt;-. 4 .-&gt; v3\nv2 &lt;-. 6 .-&gt; v5\nv6 &lt;-. 1 .-&gt; v5\nv2 &lt;-. 8 .-&gt; v8\nv8 &lt;-. 10 .-&gt; v6\nv1 &lt;-. 12 .-&gt; v2\nv7 &lt;-- 6 --&gt; v8\nv7 &lt;-. 11 .-&gt; v6\nv1 &lt;-- 2 --&gt; v7\nv0 &lt;-- 4 --&gt; v7\nv0 &lt;-. 8 .-&gt; v1</code></pre> <p>The edges candidates are:</p> <ul> <li>{1, 2}: 12;</li> <li>{8, 2}: 8;</li> <li>{8, 6}: 10;</li> <li>{7, 6}: 11;</li> </ul> <p>The edge with the minimum weight is {8, 2}: 8. So we will add 2 to the minimum spanning tree.</p> <p>The current state of the minimum spanning three is <code>[{0, 7}, {1, 7}, {8, 7}, {2, 8}]</code>.</p> <pre><code>graph LR\nv0(((0)))\nv1(((1)))\nv2(((2)))\nv3((3))\nv4((4))\nv5((5))\nv6((6))\nv7(((7)))\nv8(((8)))\nv3 &lt;-. 3 .-&gt; v4\nv5 &lt;-. 15 .-&gt; v4\nv3 &lt;-. 12 .-&gt; v5\nv2 &lt;-. 4 .-&gt; v3\nv2 &lt;-. 6 .-&gt; v5\nv6 &lt;-. 1 .-&gt; v5\nv2 &lt;-- 8 --&gt; v8\nv8 &lt;-. 10 .-&gt; v6\nv1 &lt;-. 12 .-&gt; v2\nv7 &lt;-- 6 --&gt; v8\nv7 &lt;-. 11 .-&gt; v6\nv1 &lt;-- 2 --&gt; v7\nv0 &lt;-- 4 --&gt; v7\nv0 &lt;-. 8 .-&gt; v1</code></pre> <p>The edges candidates are:</p> <ul> <li>{2, 3}: 4;</li> <li>{2, 5}: 6;</li> <li>{8, 6}: 10;</li> <li>{7, 6}: 11;</li> </ul> <p>We will add the edge {2, 3}: 4 to the minimum spanning tree.</p> <p>The minimum spanning three is <code>[{0, 7}, {1, 7}, {8, 7}, {2, 8}, {3, 2}]</code>.</p> <pre><code>graph LR\nv0(((0)))\nv1(((1)))\nv2(((2)))\nv3(((3)))\nv4((4))\nv5((5))\nv6((6))\nv7(((7)))\nv8(((8)))\nv3 &lt;-. 3 .-&gt; v4\nv5 &lt;-. 15 .-&gt; v4\nv3 &lt;-. 12 .-&gt; v5\nv2 &lt;-- 4 --&gt; v3\nv2 &lt;-. 6 .-&gt; v5\nv6 &lt;-. 1 .-&gt; v5\nv2 &lt;-- 8 --&gt; v8\nv8 &lt;-. 10 .-&gt; v6\nv1 &lt;-. 12 .-&gt; v2\nv7 &lt;-- 6 --&gt; v8\nv7 &lt;-. 11 .-&gt; v6\nv1 &lt;-- 2 --&gt; v7\nv0 &lt;-- 4 --&gt; v7\nv0 &lt;-. 8 .-&gt; v1</code></pre> <p>Candidates:</p> <ul> <li>{3, 4}: 3;</li> <li>{3, 5}: 12;</li> <li>{2, 5}: 6;</li> <li>{8, 6}: 10;</li> <li>{7, 6}: 11;</li> </ul> <p>The edge with the minimum weight is {3, 4}: 3. So we will add 4 to the minimum spanning tree.</p> <p>The minimum spanning three is now <code>[{0, 7}, {1, 7}, {8, 7}, {2, 8}, {3, 2}, {4, 3}]</code>.</p> <pre><code>graph LR\nv0(((0)))\nv1(((1)))\nv2(((2)))\nv3(((3)))\nv4(((4)))\nv5((5))\nv6((6))\nv7(((7)))\nv8(((8)))\nv3 &lt;-- 3 --&gt; v4\nv5 &lt;-. 15 .-&gt; v4\nv3 &lt;-. 12 .-&gt; v5\nv2 &lt;-- 4 --&gt; v3\nv2 &lt;-. 6 .-&gt; v5\nv6 &lt;-. 1 .-&gt; v5\nv2 &lt;-- 8 --&gt; v8\nv8 &lt;-. 10 .-&gt; v6\nv1 &lt;-. 12 .-&gt; v2\nv7 &lt;-- 6 --&gt; v8\nv7 &lt;-. 11 .-&gt; v6\nv1 &lt;-- 2 --&gt; v7\nv0 &lt;-- 4 --&gt; v7\nv0 &lt;-. 8 .-&gt; v1</code></pre> <p>The egdes candidates are:</p> <ul> <li>{3, 5}: 12;</li> <li>{2, 5}: 6;</li> <li>{4, 5}: 15;</li> <li>{8, 6}: 10;</li> <li>{7, 6}: 11;</li> </ul> <p>Select {2, 5}: 6; Add 5 to MST. <code>[{0, 7}, {1, 7}, {8, 7}, {2, 8}, {3, 2}, {4, 3}, {5, 2}]</code>.</p> <pre><code>graph LR\nv0(((0)))\nv1(((1)))\nv2(((2)))\nv3(((3)))\nv4(((4)))\nv5(((5)))\nv6((6))\nv7(((7)))\nv8(((8)))\nv3 &lt;-- 3 --&gt; v4\nv5 &lt;-. 15 .-&gt; v4\nv3 &lt;-. 12 .-&gt; v5\nv2 &lt;-- 4 --&gt; v3\nv2 &lt;-- 6 --&gt; v5\nv6 &lt;-. 1 .-&gt; v5\nv2 &lt;-- 8 --&gt; v8\nv8 &lt;-. 10 .-&gt; v6\nv1 &lt;-. 12 .-&gt; v2\nv7 &lt;-- 6 --&gt; v8\nv7 &lt;-. 11 .-&gt; v6\nv1 &lt;-- 2 --&gt; v7\nv0 &lt;-- 4 --&gt; v7\nv0 &lt;-. 8 .-&gt; v1</code></pre> <p>Candidates are:</p> <ul> <li>{5, 6}: 1;</li> <li>{8, 6}: 10;</li> <li>{7, 6}: 11;</li> </ul> <p>Select {5, 6}: 1; Add 6 to MST. <code>[{0, 7}, {1, 7}, {8, 7}, {2, 8}, {3, 2}, {4, 3}, {5, 2}, {6, 5}]</code>.</p> <pre><code>graph LR\nv0(((0)))\nv1(((1)))\nv2(((2)))\nv3(((3)))\nv4(((4)))\nv5(((5)))\nv6(((6)))\nv7(((7)))\nv8(((8)))\nv3 &lt;-- 3 --&gt; v4\nv5 &lt;-. 15 .-&gt; v4\nv3 &lt;-. 12 .-&gt; v5\nv2 &lt;-- 4 --&gt; v3\nv2 &lt;-- 6 --&gt; v5\nv6 &lt;-- 1 --&gt; v5\nv2 &lt;-- 8 --&gt; v8\nv8 &lt;-. 10 .-&gt; v6\nv1 &lt;-. 12 .-&gt; v2\nv7 &lt;-- 6 --&gt; v8\nv7 &lt;-. 11 .-&gt; v6\nv1 &lt;-- 2 --&gt; v7\nv0 &lt;-- 4 --&gt; v7\nv0 &lt;-. 8 .-&gt; v1</code></pre> <p>Now, our current MST does not any candidates to explore, so the algorithm is finished. The minimum spanning tree is <code>[{0, 7}, {1, 7}, {8, 7}, {2, 8}, {3, 2}, {4, 3}, {5, 2}, {6, 5}]</code>.</p> <pre><code>graph LR\nv0(((0)))\nv1(((1)))\nv2(((2)))\nv3(((3)))\nv4(((4)))\nv5(((5)))\nv6(((6)))\nv7(((7)))\nv8(((8)))\nv3 &lt;-- 3 --&gt; v4\nv5 ~~~ v4\nv3 ~~~ v5\nv2 &lt;-- 4 --&gt; v3\nv2 &lt;-- 6 --&gt; v5\nv6 &lt;-- 1 --&gt; v5\nv2 &lt;-- 8 --&gt; v8\nv8 ~~~ v6\nv1 ~~~ v2\nv7 &lt;-- 6 --&gt; v8\nv7 ~~~ v6\nv1 &lt;-- 2 --&gt; v7\nv0 &lt;-- 4 --&gt; v7\nv0 ~~~ v1</code></pre> <p>The total weight of the minimum spanning tree from <code>{0, 7}, {1, 7}, {8, 7}, {2, 8}, {3, 2}, {4, 3}, {5, 2}, {6, 5}</code> is <code>4 + 2 + 6 + 8 + 4 + 3 + 6 + 1 = 34</code>.</p>"},{"location":"algorithms/12-mst/#implementation","title":"Implementation","text":"<p>There are many implementations for the Minimum Spanning Tree algorithm, here goes one possible implementation <code>int</code> as key, <code>int</code> as value and <code>int</code> as weight: </p> <pre><code>#include &lt;iostream&gt;\n#include &lt;unordered_set&gt;\n#include &lt;unordered_map&gt;\n#include &lt;optional&gt;\n#include &lt;tuple&gt;\n#include &lt;vector&gt;\n#include &lt;utility&gt;\nusing namespace std;\n\n// rename optional&lt;tuple&lt;int, int, int&gt;&gt; to edge\ntypedef optional&lt;tuple&lt;int, int, int&gt;&gt; Edge;\n\n// rename unordered_map&lt;int, unordered_map&lt;int, int&gt;&gt; to Graph\ntypedef unordered_map&lt;int, unordered_map&lt;int, int&gt;&gt; Graph;\n\n// source, destination, weight\nEdge findMinEdge(const Graph&amp; graph, const Graph&amp; mst){\n  if(graph.empty())\n    return nullopt;\n  if(mst.empty()){\n    // select a random node to start, we will get the first vertex\n    int source = graph.begin()-&gt;first;\n    // candidates to be destination\n    auto candidates = graph.at(source);\n    // iterator\n    auto it = candidates.begin();\n    // best destination and weight\n    int bestDestination = it-&gt;first;\n    int bestWeight = it-&gt;second;\n    // iterate over the candidates\n    for(; it != candidates.end(); it++){\n      if(it-&gt;second &lt; bestWeight){\n        bestDestination = it-&gt;first;\n        bestWeight = it-&gt;second;\n      }\n    }\n    return make_tuple(source, bestDestination, bestWeight);\n  }\n  // list all vertices from the minimum spanning tree\n  std::unordered_set&lt;int&gt; mstVertices;\n  for(auto&amp; [source, destinations] : mst){\n    mstVertices.insert(source);\n    for(auto&amp; [destination, weight] : destinations){\n      mstVertices.insert(destination);\n    }\n  }\n  // iterate over the vertices from the minimum spanning tree to find the minimum edge\n  int bestWeight = INT_MAX;\n  int bestSource = -1;\n  int bestDestination = -1;\n  for(auto&amp; source : mstVertices){\n    for(auto&amp; [destination, weight] : graph.at(source)){\n      if(!mstVertices.contains(destination) &amp;&amp; weight &lt; bestWeight){\n        bestSource = source;\n        bestDestination = destination;\n        bestWeight = weight;\n      }\n    }\n  }\n  if(bestSource == -1)\n    return nullopt;\n  return make_tuple(bestSource, bestDestination, bestWeight);\n}\n\n// returns the accumulated weight of the minimum spanning tree\n// the graph is represented as [source, destination] -&gt; weight\nint MSP(const Graph&amp; graph){\n  Graph mst;\n  int accumulatedWeight = 0;\n  while(true){\n    auto edge = findMinEdge(graph, mst);\n    if(!edge.has_value())\n      break;\n    auto [source, destination, weight] = edge.value();\n    mst[source][destination] = weight;\n    mst[destination][source] = weight;\n    accumulatedWeight += weight;\n  }\n  return accumulatedWeight;\n}\n\n// minimum spanning tree\nint main() {\n  return 0;\n}\n</code></pre>"},{"location":"algorithms/13-bst/","title":"Trees","text":"<ul> <li>It is a connected graph what have no cycles;</li> <li>Has a single path between any two vertices;</li> <li>A tree with N vertices has N-1 edges;</li> </ul>"},{"location":"algorithms/13-bst/#traversing-a-binary-tree","title":"Traversing a Binary Tree","text":"<p>There are mostly three ways to explore a binary search tree, they generate different outputs:</p> <ul> <li>In-order: Left, Root, Right;</li> <li>Pre-order: Root, Left, Right;</li> <li>Post-order: Left, Right, Root;</li> </ul>"},{"location":"algorithms/13-bst/#binary-search-trees","title":"Binary Search Trees","text":"<p>A binary search tree is a binary tree:</p> <ul> <li>Each node has at most two children;</li> <li>The left child is less than the parent;</li> <li>The right child is greater than the parent;</li> <li>The left and right subtrees are also binary search trees;</li> </ul> <p>In a binary search tree, the search complexity is <code>O(log(n))</code> in a balanced tree. But it can be <code>O(n)</code> if not balanced.</p> <p>Check the animations on https://visualgo.net/en/bst.</p>"},{"location":"algorithms/13-bst/#avl-trees","title":"AVL Trees","text":"<p>WiP.</p>"},{"location":"algorithms/14-heap/","title":"Heap","text":"<p>Heap is a data structure and algorithm that always keep the highest or lowest element at the top. You can implement it in many ways, such as a tree or a priority queue.</p>"},{"location":"algorithms/14-heap/#heap-in-a-tree","title":"Heap in a tree","text":"<p>In a tree implementation, the most common is a binary tree. In this the max heap scenario, the parent is always greater than the both children. The binary tree should be complete, which means all levels are filled except possibly for the last one, which is filled from left to right. </p> <p>The complexity of a heap is <code>O(log(n))</code> for insert and remove operations, for peeking or popping the top element is <code>O(1)</code>. </p>"},{"location":"algorithms/14-heap/#heap-in-an-array","title":"Heap in an array","text":"<p>The most common implementation of a heap is in an array(vector). Assuming the current element is at index <code>i</code>, the parent is at <code>(i-1)/2</code>, the left child is at <code>2*i+1</code> and the right child is at <code>2*i+2</code>. This approach is called tree linearization. It is more memory efficient and cache friendly.</p> <p>The complexity of a heap in a priority queue in array is the same as in a tree, but with lower overhead.</p> <p></p>"},{"location":"algorithms/14-heap/#heapfy","title":"Heapfy","text":"<p>Heapfy is an operation that for a given array, it will transform it into a heap. The complexity is <code>O(n)</code> if done bottom-up. That's one of the reasons heaps are so efficient. After that, all calls to get the top element will be <code>O(1)</code>.</p> <p>If the heapfy is done top-down, the complexity is <code>O(n log(n))</code>. </p> <p></p> <p>The algorithm is simple, </p> <ul> <li>For each element in the array, it will compare with the parent and swap if necessary;</li> <li>If the swap causes imbalance on the children, it will repeat the process until the element is in the right place.</li> </ul> <p>See animation here https://www.cs.usfca.edu/~galles/JavascriptVisual/Heap.html</p>"},{"location":"algorithms/14-heap/#insert","title":"Insert","text":"<p>In the insertion operation, the element is added to the end of the array, and then it is compared with the parent and swapped if necessary. The parent comparison goes up to the top of the heap. The complexity is <code>O(log(n))</code>.</p>"},{"location":"algorithms/14-heap/#operation-peek-and-pop","title":"Operation Peek and Pop","text":"<p>Peek will return the top element of the heap, but not remove it. Pop is similar to peek, but it will remove the top.</p> <p>When you remove the top element, you will need to reorganize it. The steps are:</p> <ol> <li>Get the top element and store to return later;</li> <li>Swap the top element with the last element;</li> <li>Remove the last element;</li> <li>Put the last element in the top;</li> <li>Compare the top element with the children and swap if necessary;</li> <li>Repeat until the element is in the right place.</li> </ol> <p>The complexity of the pop operation is <code>O(log(n))</code>.</p>"},{"location":"artificialintelligence/","title":"Artificial Intelligence","text":"<p>Students with a firm foundation in the basic techniques of artificial intelligence for games will apply their skills to program advanced pathfinding algorithms, artificial opponents, scripting tools and other real-time drivers for non-playable agents. The goal of the course is to provide finely-tuned artificial competition for players using all the rules followed by a human.</p>"},{"location":"artificialintelligence/#requirements","title":"Requirements","text":"<ul> <li>Artificial Intelligence for Games</li> </ul>"},{"location":"artificialintelligence/#textbook","title":"Textbook","text":"<ul> <li>AI for Games, Third Edition: 9781138483972: Millington, Ian</li> </ul>"},{"location":"artificialintelligence/#student-centered-learning-outcomes","title":"Student-centered Learning Outcomes","text":"Bloom's Taxonomy on Learning Outcomes <p>Upon completion of the Advanced AI for Games, students should be able to:</p>"},{"location":"artificialintelligence/#objective-outcomes","title":"Objective Outcomes","text":"<ul> <li>Recall fundamental AI techniques for games;</li> <li>Identify key components of advanced AI, including pathfinding algorithms and scripting tools</li> <li>Demonstrate a deep understanding of advanced AI principles in gaming;</li> <li>Apply knowledge to program advanced AI components for finely-tuned competition;</li> <li>Evaluate the effectiveness and ethical considerations of advanced AI in game design;</li> <li>Design and implement innovative AI-driven features for enhanced gameplay;</li> <li>Integrate advanced AI seamlessly into game systems for cohesive environments;</li> <li>Consider societal impact and consequences of AI applications in gaming;</li> </ul> <p>Warning</p> <p>This is a work in progress, and the schedule is subject to change. Every change will be communicated in class. Use the github repo as the source of truth for the schedule and materials. The materials provided in canvas are just a copy for archiving purposes and might be outdated.</p>"},{"location":"artificialintelligence/#schedule-for-fall-2024","title":"Schedule for Fall 2024","text":"<p>College dates for the Fall 2024 semester:</p> Event Date Classes Begin Aug. 26 Add/Drop Aug. 26 - 30 No Classes - College remains open Sept. 20 Indigenous Peoples Day Holiday Observance Oct. 14 Registration for Spring Classes Oct. 28 - Nov. 8 Last Day to Withdraw Nov. 8 Thanksgiving Break Nov. 25 - Nov. 29 Last Day of Classes Dec. 6 Finals Dec. 9 - Dec. 13 Winter Break Dec. 16 - Jan. 10 <p>Old schedules for reference</p>"},{"location":"artificialintelligence/#introduction","title":"Introduction","text":"<ul> <li>Week 1. 2024/08/26</li> <li>Topic: AI for games, review of basic AI techniques</li> <li>Assignments:<ol> <li>Read the Syllabus;</li> <li>Read Notes on plagiarism;</li> <li>Sign FERPA Form;</li> <li>Read Text Chapters 1 &amp; 2 from AI for Games book;</li> <li>Take the quiz on Canvas;</li> <li>Setup your machine and repository;</li> <li>Start the Flocking Simulation;</li> </ol> </li> </ul>"},{"location":"artificialintelligence/#behavioral-agents","title":"Behavioral Agents","text":"<ul> <li>Week 2. 2024/09/02</li> <li>Topic: Flocking</li> <li>Formal Assignment</li> <li>Interactive Assignment</li> </ul>"},{"location":"artificialintelligence/#finite-automata","title":"Finite Automata","text":"<ul> <li>Week 3. 2024/09/09</li> <li>Topic: Automata Finite and 2D Grids</li> <li>Formal Assignment</li> <li>Interactive Assignment</li> </ul>"},{"location":"artificialintelligence/#random-numbers","title":"Random Numbers","text":"<ul> <li>Week 4. Date: 2024/09/16</li> <li>Topic: Pseudo Random Number Generation</li> <li>Formal Assignment: Formal</li> </ul>"},{"location":"artificialintelligence/#dfs","title":"DFS","text":"<ul> <li>Week 5. 2024/09/23</li> <li>Topic: Depth First Search, Random walk, Maze Generation</li> <li>Formal Assignment</li> <li>Interactive Assignment</li> </ul>"},{"location":"artificialintelligence/#path-finding","title":"Path finding","text":"<ul> <li>Week 6. 2024/09/30</li> <li>Topic: Breadth First Search and Path Finding A*</li> <li>Interactive Assignment: Catch the Cat</li> </ul>"},{"location":"artificialintelligence/#midterms","title":"Midterms","text":"<ul> <li>Week 7. Date: 2024/10/07</li> <li>Topic: Catch the Cat Challenge and Competition</li> <li>Catch the Cat</li> </ul>"},{"location":"artificialintelligence/#spatial-quantization","title":"Spatial Quantization","text":"<ul> <li>Week 8. 2024/10/14</li> <li>Topic: Spatial Quantization and Partitioning</li> <li>Readings: Spatial Quantization</li> <li>Formal Assignment: Hide and Seek</li> </ul>"},{"location":"artificialintelligence/#spatial-quantization_1","title":"Spatial Quantization","text":"<ul> <li>Week 9. 2024/10/21</li> <li>Topic: Spatial Quantization and Partitioning</li> <li>Readings: Spatial Quantization</li> <li>Formal Assignment: Hide and Seek</li> </ul>"},{"location":"artificialintelligence/#noise-functions","title":"Noise Functions","text":"<ul> <li>Week 10. 2024/10/28</li> <li>Topic: Noise functions</li> <li>Formal Assignment:</li> <li>Interactive Assignment: Scenario Generation</li> </ul>"},{"location":"artificialintelligence/#procedural-generation","title":"Procedural Generation","text":"<ul> <li>Week 11. 2024/11/04</li> <li>Topic: Procedural Content Generation - Scenario</li> <li>Formal Assignment:</li> <li>Interactive Assignment: Scenario Generation</li> </ul>"},{"location":"artificialintelligence/#procedural-generation_1","title":"Procedural Generation","text":"<ul> <li>Week 12. 2024/11/11</li> <li>Topic: Procedural Content Generation - Scenario</li> <li>Formal Assignment:</li> <li>Interactive Assignment: Scenario Generation</li> </ul>"},{"location":"artificialintelligence/#break","title":"Break","text":"<ul> <li>Week 13. 2023/11/18</li> <li>Topic: Work sessions for final project</li> </ul>"},{"location":"artificialintelligence/#work-sessions","title":"Work sessions","text":"<ul> <li>Week 14. 2024/11/25</li> <li>Topic: BREAK. No classes</li> </ul>"},{"location":"artificialintelligence/#work-sessions_1","title":"Work sessions","text":"<ul> <li>Week 15. 2024/12/02</li> <li>Topic: Work sessions for final project</li> </ul>"},{"location":"artificialintelligence/#finals","title":"Finals","text":"<ul> <li>Week 16. 2024/12/09</li> <li>Topic: Final Presentations</li> </ul>"},{"location":"artificialintelligence/#schedule-for-spring-2024","title":"Schedule for Spring 2024","text":"<p>College dates for the Spring 2024 semester:</p> Date Event Jan 16 Classes Begin Jan 16 - 22 Add/Drop Feb 26 - March 1 Midterms March 11 - March 15 Spring Break March 25 - April 5 Registration for Fall Classes April 5 Last Day to Withdraw April 8 - 19 Idea Evaluation April 12 No Classes - College remains open April 26 Last Day of Classes April 29 - May 3 Finals May 11 Commencement"},{"location":"artificialintelligence/#introduction_1","title":"Introduction","text":"<ul> <li>Week 1. 2024/01/15</li> <li>Topic: AI for games, review of basic AI techniques </li> <li>Activities:<ul> <li>Read all materials shared on Canvas;</li> <li>Do all assignments on Canvas;</li> </ul> </li> </ul>"},{"location":"artificialintelligence/#wave-function-collapse","title":"Wave Function Collapse","text":"<ul> <li>Week 2. 2024/01/22</li> <li>Topic: Wave Function Collapse</li> </ul>"},{"location":"artificialintelligence/#applying-a-into-continuous-space","title":"Applying A* into continuous space","text":"<ul> <li>Week 3. 2024/01/29</li> <li>Topic: Applying A* into continuous spaces</li> </ul>"},{"location":"artificialintelligence/#applying-a-into-continuous-spaces","title":"Applying A* into continuous spaces","text":"<ul> <li>Week 4. Date: 2024/02/05</li> <li>Topic: Applying A* into continuous spaces</li> </ul>"},{"location":"artificialintelligence/#testing-your-ai-agent-and-rules","title":"Testing your AI Agent and rules","text":"<ul> <li>Week 5. 2024/02/12</li> <li>Topic: Testing your AI Agent, building meaningful tests, metrics, evaluation and machinations</li> </ul>"},{"location":"artificialintelligence/#testing-your-ai-agent","title":"Testing your AI Agent","text":"<ul> <li>Week 6. 2024/02/19</li> <li>Topic: Testing your AI Agent, building meaningful tests, metrics, evaluation and machinations</li> </ul>"},{"location":"artificialintelligence/#midterms_1","title":"Midterms","text":"<ul> <li>Week 7. Date: 2024/02/26</li> <li>Topic: Work sessions</li> </ul>"},{"location":"artificialintelligence/#min-max","title":"Min max","text":"<ul> <li>Week 8. 2024/03/04</li> <li>Topic: Min Max</li> </ul>"},{"location":"artificialintelligence/#break_1","title":"Break","text":"<ul> <li>Week 09. 2024/03/11</li> <li>Topic: Spring BREAK. No classes this week.</li> </ul>"},{"location":"artificialintelligence/#monte-carlo-tree-search","title":"Monte Carlo Tree Search","text":"<ul> <li>Week 10. 2024/03/18</li> <li>Topic: Monte Carlo Tree Search</li> </ul>"},{"location":"artificialintelligence/#chess","title":"Chess","text":"<ul> <li>Week 11. 2024/03/25</li> <li>Topic: Chess</li> </ul>"},{"location":"artificialintelligence/#chess_1","title":"Chess","text":"<ul> <li>Week 12. 2024/04/01</li> <li>Topic: Chess</li> </ul>"},{"location":"artificialintelligence/#chess_2","title":"Chess","text":"<ul> <li>Week 13. 2024/04/08</li> <li>Topic: Chess</li> </ul>"},{"location":"artificialintelligence/#chess_3","title":"Chess","text":"<ul> <li>Week 14. 2024/04/15</li> <li>Topic: Chess</li> </ul>"},{"location":"artificialintelligence/#chess_4","title":"Chess","text":"<ul> <li>Week 15. 2024/04/22</li> <li>Topic: Work sessions for chess</li> </ul>"},{"location":"artificialintelligence/#finals_1","title":"Finals","text":"<ul> <li>Week 16. 2024/04/26</li> <li>Topic: Finals Week / competition</li> </ul>"},{"location":"artificialintelligence/#schedule-for-fall-2023","title":"Schedule for Fall 2023","text":"<p>Relevant dates for the Fall 2023 semester:</p> <ul> <li>09-10 Oct 2023 - Midterms Week</li> <li>20-24 Nov 2023 - Thanksgiving Break</li> <li>11-15 Dec 2023 - Finals Week</li> </ul> <ul> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ul>"},{"location":"artificialintelligence/#introduction_2","title":"Introduction","text":"<ul> <li>Week 1. 2023/08/28</li> <li>Topic: Introduction</li> <li>Formal Assignment: Flocking Formal</li> <li>Interactive Assignment: Flocking at MoBaGEn</li> </ul>"},{"location":"artificialintelligence/#behavioral-agents_1","title":"Behavioral Agents","text":"<ul> <li>Week 2. 2023/09/04</li> <li>Topic: Flocking</li> <li>Formal Assignment: Flocking at Beecrowd</li> <li>Interactive Assignment: Flocking at MoBaGEn</li> </ul>"},{"location":"artificialintelligence/#finite-automata_1","title":"Finite Automata","text":"<ul> <li>Week 3. 2023/09/11</li> <li>Topic: Automata Finite and 2D Grids</li> <li>Formal Assignment: Game of Life at Beecrowd</li> <li>Interactive Assignment: Game of Life at MoBaGEn</li> </ul>"},{"location":"artificialintelligence/#random-numbers_1","title":"Random Numbers","text":"<ul> <li>Week 4. Date: 2023/09/18</li> <li>Topic: Pseudo Random Number Generation</li> <li>Formal Assignment: PRNG at Beecrowd</li> </ul>"},{"location":"artificialintelligence/#dfs_1","title":"DFS","text":"<ul> <li>Week 5. 2023/09/25</li> <li>Topic: Depth First Search, Random walk, Maze Generation</li> <li>Formal Assignment: Maze at Beecrowd</li> <li>Interactive Assignment: Maze at Mobagen</li> </ul>"},{"location":"artificialintelligence/#path-finding_1","title":"Path finding","text":"<ul> <li>Week 6. 2023/10/02</li> <li>Topic: Breadth First Search and Path Finding A*</li> <li>Interactive Assignment: Catch the Cat</li> </ul>"},{"location":"artificialintelligence/#midterms_2","title":"Midterms","text":"<ul> <li>Week 7. Date: 2023/10/09</li> <li>Topic: Catch the Cat Challenge and Competition</li> <li>Catch the Cat</li> </ul>"},{"location":"artificialintelligence/#spatial-quantization_2","title":"Spatial Quantization","text":"<ul> <li>Week 8. 2023/10/16</li> <li>Topic: Spatial Quantization and Partitioning</li> <li>Readings: Spatial Quantization</li> <li>Formal Assignment: Hide and Seek</li> </ul>"},{"location":"artificialintelligence/#spatial-quantization_3","title":"Spatial Quantization","text":"<ul> <li>Week 9. 2023/10/23</li> <li>Topic: Spatial Quantization and Partitioning</li> <li>Readings: Spatial Quantization</li> <li>Formal Assignment: Hide and Seek</li> </ul>"},{"location":"artificialintelligence/#noise-functions_1","title":"Noise Functions","text":"<ul> <li>Week 10. 2023/10/30</li> <li>Topic: Noise functions</li> <li>Formal Assignment:</li> <li>Interactive Assignment: Scenario Generation</li> </ul>"},{"location":"artificialintelligence/#procedural-generation_2","title":"Procedural Generation","text":"<ul> <li>Week 11. 2023/11/06</li> <li>Topic: Procedural Content Generation - Scenario</li> <li>Formal Assignment:</li> <li>Interactive Assignment: Scenario Generation</li> </ul>"},{"location":"artificialintelligence/#procedural-generation_3","title":"Procedural Generation","text":"<ul> <li>Week 12. 2023/11/13</li> <li>Topic: Procedural Content Generation - Scenario</li> <li>Formal Assignment:</li> <li>Interactive Assignment: Scenario Generation</li> </ul>"},{"location":"artificialintelligence/#break_2","title":"Break","text":"<ul> <li>Week 13. 2023/11/20</li> <li>Topic: BREAK. No classes</li> </ul>"},{"location":"artificialintelligence/#work-sessions_2","title":"Work sessions","text":"<ul> <li>Week 14. 2023/11/27</li> <li>Topic: Work sessions for final project</li> </ul>"},{"location":"artificialintelligence/#work-sessions_3","title":"Work sessions","text":"<ul> <li>Week 15. 2023/12/04</li> <li>Topic: Work sessions for final project</li> </ul>"},{"location":"artificialintelligence/#finals_2","title":"Finals","text":"<ul> <li>Week 16. 2023/12/11</li> <li>Topic: Final Presentations</li> </ul>"},{"location":"artificialintelligence/00-introduction/","title":"Introduction to AI","text":"<p>Note</p> <p>Please refer to this repository in order follow the previous assignments for the first course of AI. https://github.com/InfiniBrains/mobagen</p> <p>Topics suggested in the survey, and some of my considerations.</p> <ul> <li>Procedural Content Generation. Advanced terrain generation - It was previously covered in the last class, I am going to focus other topics</li> <li>AI applied to improve 3D Animation Movement. Follow this https://github.com/sebastianstarke/AI4Animation</li> <li>Topics relating to an AI Fighting game - Mostly Agents, State Machines and latency simulation (reflex)</li> <li>Tactical AI - Linear programming, Restriction and Satisfiability problem</li> <li>Neuron networks / Machine learning - This can be real hard to cover all topics in this class</li> <li>Genetic algorithms and Reinforced learning - Find the best parameters for agent behaviors  </li> <li>Chess AI - In a broader sense it is a table game, and it is mostly heuristics and state exploration, chess is awesome to learn optimization techniques to reduce memory usage, space exploration, branch and cut, minmax, planning and satisfaction</li> <li>Prediction algorithms for multiplayer - We can cover some techniques to extrapolate data to compensate lag instead of just mathematically extrapolate position, this is mostly an application of agent theory. </li> <li>Stable diffusion/chatbot - This is a hot topic, I didn't went too deep on that, but I can help you at least surf this wave to create fun stuff for games, such as dialog creation.</li> <li>Procedural audio generation - Most of them use convolutional networks mixed with recurrent neuron network. It can be real hard, so if we cover that, we are just goint to understand the overall idea, and learn how to use pre-determined models available for free.</li> <li>Behavior trees - I have to be honest this is a topic that I don't like, but it is a good tool to have in your toolbox, so I can cover it.</li> <li>ChatGPT and its siblings to generate text - I can cover at least how to modify small scoped model and use for your own intent.</li> <li>Stable Diffusion and its siblings to generate images - I can cover at least how to modify small scoped model and use for your own intent.</li> <li>AI subsystems and how to debug it.</li> <li>Spatial quantization optimized for AI queries - I really enjoy this, but it can be hard to understand, because it uses lots of data structures</li> </ul> <p>Note for myself: game worldbox</p>"},{"location":"artificialintelligence/01-pcg/","title":"Procedural Content Generation","text":"<p>PCG is a technique to algorithmically generate game content and assets, such as levels, textures, sound, enemies, quests, and more. The goal of PCG is to create unique and varied content without the need for manual labor. This can save time and money during development, and also allow for a more dynamic and replayable experience for the player. There are many different algorithms and techniques used in PCG, such as random generation, evolutionary algorithms, and rule-based systems.</p> <p>PCG can also be used in other areas of game development such as textures, terrain, narrative, quests, and sound effects. With PCG, the possibilities are endless. It's important to note that PCG is not a replacement for human creativity, but rather a tool that can help create new and unique content. It is often used in conjunction with manual design and artistic direction.</p>"},{"location":"artificialintelligence/01-pcg/#procedural-scenario-generation","title":"Procedural Scenario Generation","text":"<p>Procedural scenario generation is a specific application of procedural content generation that is used to create unique and varied scenarios or missions in a game. These scenarios can include objectives, enemies, and environmental elements such as terrain and buildings.</p> <p>Two common techniques are rule and noise based algorithms, and you can combine both. But first let's cover Pseudo Random Number Generation.</p>"},{"location":"artificialintelligence/01-pcg/#random-number-generation","title":"Random Number Generation","text":"<p>There are a plethora of algorithms to generate random numbers. The expected interface for a random number function is to just call it, (i.e. <code>random()</code>) and receive, ideally, a high quality and non-deterministic random number. </p> <p>In the best scenario, some systems possess a random device (i.e. an antenna capturing electrical noise from the environment), and the random function will be a system call to it. Natural noise are stateless and subject only to the environmental influence that are (arguably) impossible to tamper. It is an awesome source of noise, but the problem is that device call is slow and not portable. So we need to use pseudo random number generators.</p>"},{"location":"artificialintelligence/01-pcg/#pseudo-random-number-generation","title":"Pseudo Random Number Generation","text":"<p>In this field, the main challenge is to create a function capable to generate a sequence of numbers that are statistically random or, at least, can pass some tests of randomness at some degree of quality. The function must be fast, portable and deterministic, so it can be reproduced in different machines and platforms The function must be able to generate the same sequence of numbers given the same seed.</p> <p>A common PRNG is XORShift. It is fast, portable and deterministic, but do not deliver a high quality of randomness. It is a good choice for games, but not for cryptography.</p> <pre><code>uint32_t xorshift32()\n{\n    // seed and state 'x' must be non-zero\n    // you should implement the state initialization differently\n    static uint32_t x = 123456789;\n    // XOR the state with itself shifted by 13, 17 and 5.\n    // you can use other shifts, but these are the most common\n    x ^= x &lt;&lt; 13;\n    x ^= x &gt;&gt; 17;\n    x ^= x &lt;&lt; 5;\n    return x;\n}\n</code></pre> <p>As you might notice, the function is not stateless, so you have to initialize the state with a seed. It uses the previous state to generate the next one. A common practice is to use the system time as seed, or a random device call, but you can use any number you want. The seed is the only way to reproduce the sequence of numbers.</p> <p>Another one is the Mersenne Twister. It is a high quality PRNG, but it is a bit slower.</p>"},{"location":"artificialintelligence/01-pcg/#noise-generation","title":"Noise Generation","text":"<p>Noise functions are a type of function that generates random values that are spatially coherent. This means that nearby points in space will have similar values, creating a smooth and continuous pattern. You can use a combination of noise functions to generate complex patterns, such as terrain or textures.</p> <p>You can implement a random noise function using the PRNG we just covered. The most naive way is to sample a range of RNG values and interpolate them, and use linear interpolation between the samples.</p> <pre><code>// naive noise function\nclass Noise\n{\nprivate:\n    // samples\n    float p[512];\n\n    // initialize the samples with random values\n    Noise() {\n        // fill p with random values between 0 and 1\n        for (int i = 0; i &lt; 256; i++)\n            p[i] = xorshift32()/(float)UINT32_MAX;\n    }\n\n    float noise(float x)\n    {\n        // find the cell that x is in \n        int X = (int)floor(x) &amp; 255;\n        // find the relative position of x in the cell\n        x -= floor(x);\n        // return the interpolated value\n        return P[X] + x * (P[X+1] - P[X]);\n    }\n}\n</code></pre>"},{"location":"artificialintelligence/01-pcg/#noise-based-procedural-terrain-generation","title":"Noise based Procedural Terrain Generation","text":""},{"location":"artificialintelligence/01-pcg/#wave-function-collapse","title":"Wave function collapse","text":""},{"location":"artificialintelligence/01-pcg/#homework","title":"Homework","text":"<p>You can either use your favorite game engine or use this repository as an entry point. 1. Use a noise function to generate a heightmap. Optional: Use octaves and fractals to make it feels nicer; 2. Implement islands reference or any other meaningful way to make hydraulically erosion apparent; 3. Implement Hydraulic Erosion to make the scenario feels more realistic. See the section 'HYDRAULIC EROSION' from book AI for Games Third ed. IanMillington; 4. Render the heightmap with biomes colors to make more understandable(ocean, sand, forest, mountains, snow...). Optionally use gradient / ramp functions instead of conditionals.</p>"},{"location":"artificialintelligence/01-pcg/#references","title":"References","text":"<p>Procedural content generation is a broad topic, and we need to narrow down some applications and algorithms to cover. I carefully covered Maze generation and Scenario Generation here https://github.com/InfiniBrains/mobagen and I invite you to check the examples named <code>maze</code> and <code>scenario</code>. Besides that, Amit Patel have a really nice website focused in many game algorithms, check it out and support his work https://www.redblobgames.com/</p> <p>Please refer to the book below. We are going to follow the contents mostly from it.</p> <p> Book: https://amzn.to/3kvtNDS</p>"},{"location":"artificialintelligence/01-pcg/HydraulicErosion/","title":"Hydraulic Erosion in Game Development \u2013 Enhancing Realism with Procedural Terrain Generation \ud83c\udf0d\ud83c\udfae","text":""},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#introduction-the-importance-of-realistic-terrain-in-games","title":"Introduction: The Importance of Realistic Terrain in Games","text":"<p>Creating immersive landscapes is central to realistic game environments, and natural terrains owe much of their diversity to weathering processes. One of the most powerful of these processes is hydraulic erosion, where water shapes landscapes by carving rivers, valleys, and other geographical features over time. For game developers, simulating hydraulic erosion can turn basic procedural terrains into highly detailed, lifelike worlds that enhance gameplay and immersion.</p> <p>This post explores the fundamentals of hydraulic erosion, its application in procedural content generation (PCG), and provides a pseudocode example to help you bring realistic erosion to your terrains. Let\u2019s dive into how erosion, combined with noise-generated terrains, can help elevate game design to new levels of realism.</p>"},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#what-is-hydraulic-erosion-understanding-how-water-shapes-terrain","title":"What is Hydraulic Erosion? Understanding How Water Shapes Terrain \ud83d\udca7","text":"<p>Hydraulic erosion is the process by which water reshapes the land by gradually wearing down high points and filling in low areas, creating more complex and realistic terrain features. Over time, water flows downhill, picks up sediment from higher elevations, and deposits it in lower regions, leaving behind valleys, canyons, and other natural formations.</p> <p>In procedural content generation, simulating this process allows for terrain that resembles real-world landscapes, with eroded river paths, steep cliffs, and natural-looking slopes\u2014all of which add depth and believability to the game environment.</p> <p>Why simulate hydraulic erosion in games?</p> <ul> <li>Realistic Landscape Features: Hydraulic erosion adds realism, helping to avoid artificial-looking landscapes.</li> <li>Enhanced Gameplay: Natural terrain features, like rivers and valleys, influence player navigation, strategic decisions, and exploration.</li> <li>Improved Immersion: Erosion-driven terrain naturally aligns with player expectations, making worlds feel cohesive and lived-in.</li> </ul>"},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#procedural-content-generation-laying-the-foundation-with-noise","title":"Procedural Content Generation: Laying the Foundation with Noise \ud83c\udf04","text":"<p>Procedural content generation (PCG) is widely used in game development to generate large worlds without manually designing every detail. For terrains, a common PCG approach is to start with a heightmap, which is a 2D grid where each cell represents an elevation. Basic heightmaps provide a foundation for mountains, valleys, and plains, but they often lack the realistic variation that players expect.</p> <p>Hydraulic erosion helps add this natural variation, allowing terrains to resemble landscapes shaped by millennia of weathering.</p>"},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#hydraulic-erosion-techniques-for-terrain-generation","title":"Hydraulic Erosion Techniques for Terrain Generation \ud83c\udfde\ufe0f","text":"<p>Simulating hydraulic erosion involves choosing between two main approaches: heightmap-based erosion and particle-based erosion. Each has its strengths, depending on the level of detail you\u2019re aiming for and the computational resources you have available.</p>"},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#1-heightmap-based-erosion","title":"1. Heightmap-Based Erosion","text":"<p>In heightmap-based erosion, water flows across a grid of terrain, moving from high points to low points. This flow calculation determines where sediment is picked up or deposited, gradually transforming the landscape to resemble real-world formations.</p> <p>Steps:</p> <ol> <li>Calculate the slope of the terrain to determine flow direction.</li> <li>Allow water to move from higher to lower elevations, carrying sediment downhill.</li> <li>Deposit sediment in low areas where the water flow slows down.</li> <li>Apply a smoothing step to blend changes, resulting in more natural-looking terrain.</li> </ol>"},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#2-particle-based-erosion","title":"2. Particle-Based Erosion","text":"<p>Particle-based erosion simulates each droplet of water as a moving entity, or \"particle,\" which travels across the terrain, carrying sediment along the way. This technique can produce highly detailed erosion effects, but it requires more processing power, making it ideal for high-quality terrain rendering.</p> <p>Steps:</p> <ol> <li>Introduce a water droplet at a random point on the terrain.</li> <li>Allow the droplet to travel downhill, eroding terrain as it moves.</li> <li>Calculate the amount of sediment each droplet can carry based on the slope and flow speed.</li> <li>The droplet deposits sediment in areas where its speed decreases or it evaporates, creating deposits.</li> <li>Evaporation ends the droplet\u2019s journey, leaving eroded and sedimented terrain.</li> </ol>"},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#pseudocode-for-hydraulic-erosion","title":"Pseudocode for Hydraulic Erosion \ud83d\udcdc","text":"<p>Here\u2019s a pseudocode example for hydraulic erosion using particle-based erosion, simulating water droplets moving across a noise-based terrain:</p> <pre><code>1. Initialize Terrain\n   - Generate a noise-based heightmap `terrain`.\n   - Create an empty `sediment` map.\n   - Define the erosion parameters:\n       - `rainAmount`: Amount of water per droplet.\n       - `maxDroplets`: Total number of droplets to simulate.\n       - `evaporationRate`: Rate at which water evaporates.\n       - `sedimentCapacityFactor`: Maximum sediment a droplet can carry.\n\n2. Hydraulic Erosion Simulation\n   - For each `droplet in 1 to maxDroplets`:\n       - Start droplet at random `position(x, y)` on the terrain.\n       - Set `waterAmount = rainAmount` and `sedimentAmount = 0`.\n\n       - While `waterAmount &gt; threshold`:\n           - Find the steepest neighboring cell (determines flow direction).\n           - Move droplet downhill following gravity.\n           - Calculate sediment capacity based on slope.\n           - If `sedimentAmount &lt; capacity`, erode terrain and increase `sedimentAmount`.\n           - If `sedimentAmount &gt;= capacity`, deposit sediment.\n           - Reduce `waterAmount` by `evaporationRate`.\n           - Stop loop if droplet runs out of water or can\u2019t move further.\n\n3. Post-Processing\n   - Apply a smoothing filter to finalize terrain.\n\n4. Return modified terrain map.\n</code></pre> <p>This pseudocode is a guide for creating a terrain that reflects the impact of erosion. With the right parameter adjustments, you can simulate various erosion patterns, from gentle hillsides to steep, rugged cliffs.</p>"},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#parameter-tuning-fine-tuning-the-erosion-simulation","title":"Parameter Tuning: Fine-Tuning the Erosion Simulation \ud83c\udf9b\ufe0f","text":"<p>Adjusting the erosion parameters can dramatically alter the terrain\u2019s appearance. Here are a few key parameters and their effects:</p> <ul> <li>Rain Amount: Higher values create more intense erosion, with larger rivers and deeper valleys.</li> <li>Evaporation Rate: Controls how long water droplets affect the terrain, with faster evaporation producing less erosion.</li> <li>Sediment Capacity Factor: Determines how much sediment each droplet can carry. Higher values create more rugged terrain, while lower values keep the landscape smoother. </li> </ul> <p>Fine-tuning these settings can allow for a range of effects, from gentle landscapes to heavily weathered regions, giving developers control over how dramatic the erosion appears.</p>"},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#applications-of-hydraulic-erosion-in-game-development","title":"Applications of Hydraulic Erosion in Game Development \ud83c\udfae\ud83c\udf0d","text":"<p>Hydraulic erosion has a wide range of applications in game environments:</p> <ul> <li>Survival and Exploration Games: Eroded river valleys and mountain passes can add complexity to player navigation.</li> <li>Simulation and Strategy Games: Erosion impacts resources and settlement planning, creating challenging environments for players to adapt to.</li> <li>AI Training and Simulation: Realistic terrain improves AI navigation and pathfinding, providing valuable experience in obstacle-rich environments.</li> </ul>"},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#on-river-formation-and-emergent-behavior","title":"On River Formation and Emergent Behavior \ud83c\udf0a","text":"<p>Hydraulic erosion can naturally lead to river formation, an emergent behavior that arises as water finds paths across a landscape, following valleys, and collecting into streams that eventually carve out riverbeds. This behavior adds a striking level of realism to games but involves detailed simulation techniques beyond the scope of this article. River generation in PCG is complex because it requires continuous water flow modeling and dynamic sediment redistribution, both of which demand additional calculations.</p> <p>Creating realistic river systems in-game can be an exciting challenge\u2014one that can elevate game environments, offering players a sense of organic world development.</p>"},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#challenges-on-performance","title":"Challenges on Performance","text":"<p>As you might have noticed, hydraulic erosion simulations can be computationally intensive, especially when simulating particle-based erosion with a large number of droplets. To optimize performance, consider the following strategies:</p> <ul> <li>Parallel Processing: Distribute droplet simulations across multiple threads or cores to speed up calculations;</li> <li>Level of Detail (LOD): Use LOD techniques to focus erosion simulations on areas of interest, reducing the computational load;</li> <li>GPU Acceleration: Offload erosion calculations to the GPU for faster processing, leveraging its parallel processing capabilities;</li> <li>Real-Time Updates: Implement real-time updates for erosion effects, allowing designers or players to see changes as they occur.</li> </ul>"},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#implementation-in-c","title":"Implementation in C++","text":"<p>Here's a simple implementation of hydraulic erosion in C++ using a heightmap-based approach:</p> <p>```cpp // Pseudocode for hydraulic erosion in C++</p>"},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#include","title":"include","text":""},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#include_1","title":"include","text":""},{"location":"artificialintelligence/01-pcg/HydraulicErosion/#conclusion-adding-realism-with-hydraulic-erosion","title":"Conclusion: Adding Realism with Hydraulic Erosion \ud83c\udf0d\ud83d\udca6","text":"<p>Incorporating hydraulic erosion into procedural terrain generation brings a natural and realistic look to game worlds. By simulating the process of water shaping the landscape, developers can create immersive, complex terrains that invite exploration and enhance gameplay.</p> <p>Whether through heightmap-based erosion or particle-based simulations, hydraulic erosion can transform the gaming experience, making virtual landscapes feel as weathered and dynamic as the real thing.</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/","title":"Wave Function Collapse (WFC) for Games","text":"<p>Ah, Wave Function Collapse\u2014a term that sounds like it belongs in a science fiction novel, but in reality, it's an algorithm with a fancy name that doesn\u2019t really involve any quantum magic. It's widely used in Procedural Content Generation (PCG), a technique that game developers absolutely adore because it makes their lives easier. But don\u2019t let the quantum-themed name fool you\u2014there\u2019s no need for Schr\u00f6dinger\u2019s cat or any collapsing universes here.</p> <p>\ud83d\udea8 Personal Opinion Alert:</p> <p>Who came up with this name? Sure, it sounds cool and science-y, but it's about as quantum as my morning coffee. Let\u2019s be real: they chose it because it\u2019s more marketable. \ud83d\ude02</p> <p>In practice, WFC is just about solving constraint satisfaction problems. This magical-sounding technique was brought to the limelight by Maxim Gumin in 2016. Maxim showed that WFC could generate images and textures following specific rules, and game devs were like, \u201cYeah, we need that!\u201d</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#wfc-in-a-nutshell","title":"WFC in a Nutshell \ud83e\udd5c","text":"<p>Imagine you have a blank world (a grid, pixels, voxels, whatever). You also have a set of rules about what goes where (e.g., no putting rivers next to mountains). WFC's job is to fill this world, slot by slot, making sure everything sticks to the rules. It's a bit like Sudoku\u2014but instead of numbers, you're dealing with game elements like terrain tiles, rooms, or textures. Easy-peasy, right?</p> <p>Here\u2019s the general rundown:</p> <ul> <li>Sampling the World: First, create some slots to fill (think of pixels, textures, or rooms in a dungeon).</li> <li>Set the Rules: Define the constraints for your content\u2014like which tile can sit next to which. No roads to nowhere!</li> <li>Collapse the World: Start with an empty world and let the algorithm fill in the blanks, one tile at a time, according to the rules. This is the \"collapse\" part.</li> </ul> <p>Now let's break it down in detail so you can use this in your next game and look like a genius.</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#key-concepts-of-wfc","title":"Key Concepts of WFC \ud83e\udd13","text":""},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#superposition-no-youre-not-in-physics-class","title":"Superposition (No, You\u2019re Not in Physics Class)","text":"<p>At the start, each slot can be anything\u2014just like your favorite RPG character before you completely ruin the build with bad choices. \ud83d\ude05 In WFC, this means every tile can be in a \"superposition\" of many possible states. Over time, WFC reduces this mess of possibilities by applying rules, eventually collapsing each slot to a single state.</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#adjacency-constraints-the-you-shall-not-pass-rules","title":"Adjacency Constraints: The \u201cYou Shall Not Pass\u201d Rules \ud83d\udea7","text":"<p>WFC\u2019s bread and butter is adjacency constraints. You\u2019ve got rules about which tiles can sit next to which. Picture a road tile that can only connect to other roads, or a water tile that refuses to be friends with desert tiles. It\u2019s all about making sure the world makes sense.</p> <p>If you\u2019re making a dungeon, for example, you can say, \"Room A must connect to hallways, but Room B only likes to hang out with Room C and no one else.\" It\u2019s like high school cliques, but for tiles.</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#entropy-the-hot-mess-meter","title":"Entropy: The \"Hot Mess\" Meter \ud83d\udd25","text":"<p>Remember entropy from physics class? It\u2019s basically a measure of chaos. But in WFC, entropy just means the number of options a tile has left. A tile with high entropy is still a hot mess\u2014it could be anything. A tile with low entropy, though, has its life together\u2014it has only a few valid options. WFC works by collapsing the low-entropy tiles first, like prioritizing the people who already know what they want for lunch. \ud83c\udf54</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#backtracking-undo-like-a-pro","title":"Backtracking: Undo Like a Pro \u23ea","text":"<p>Sometimes, despite all the rules, WFC gets stuck. Maybe no valid tiles can go in a spot. This is when WFC says, \u201cOops, my bad,\u201d and backtracks to try again. It's the algorithm\u2019s way of saying, \"No worries, let's undo that and fix it.\"</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#where-can-you-use-wfc-in-games","title":"Where Can You Use WFC in Games? \ud83c\udfae","text":""},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#1-procedural-level-generation","title":"1. Procedural Level Generation \ud83c\udf0d","text":"<p>One of the coolest things about WFC is its ability to generate levels that are not only random but also make sense. No more roads to nowhere!</p> <ul> <li>Dungeon Generation: Imagine generating dungeons where rooms, hallways, and dead-ends all adhere to your design rules. WFC handles this beautifully.</li> <li>Overworld Maps: You can create sprawling open-world maps with biomes that transition logically\u2014deserts next to dunes, mountains surrounded by hills. Say goodbye to floating islands next to volcanoes! \ud83c\udf0b</li> </ul>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#2-texture-synthesis","title":"2. Texture Synthesis \ud83c\udfa8","text":"<p>WFC\u2019s original job was to generate textures from small samples. In game development, this means you can take a tiny bit of grass or brick pattern and blow it up into a massive, seamless texture. You can forget those awkward texture seams that make your world look like a patchwork quilt gone wrong.</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#3-tiling-based-puzzle-games","title":"3. Tiling-Based Puzzle Games \ud83e\udde9","text":"<p>WFC is also perfect for games where tile-matching mechanics reign supreme. You could generate puzzles or adjust game boards dynamically, keeping things fresh and players on their toes.</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#4-story-or-quest-generation","title":"4. Story or Quest Generation \ud83d\udcdc","text":"<p>WFC can go beyond just placing tiles\u2014it can even help with generating quests or non-linear stories. Define a set of events and rules about how they fit together, and let WFC create unique quest chains that stay coherent. Move over, Dungeons &amp; Dragons! \ud83d\udc09</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#how-to-implement-wfc-in-games","title":"How to Implement WFC in Games \ud83d\ude80","text":""},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#step-1-define-your-tile-set","title":"Step 1: Define Your Tile Set","text":"<p>First, decide what your tiles represent\u2014whether they\u2019re rooms, terrain, or objects. Next, define the constraints for each tile. Room A connects to Hallways, Room B connects to Room C, and so on.</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#step-2-set-up-the-grid-and-superposition","title":"Step 2: Set Up the Grid and Superposition","text":"<p>Set up a grid where each cell can be any tile at first (superposition). WFC will gradually narrow down the possibilities based on neighboring tiles.</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#step-3-collapse-based-on-entropy","title":"Step 3: Collapse Based on Entropy","text":"<p>Now, the algorithm will look at each tile and decide which ones can go where. It collapses the tiles with the least options first (low entropy). Sort of like playing Tetris but with rules. \ud83c\udfae</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#step-4-propagate-constraints","title":"Step 4: Propagate Constraints","text":"<p>As tiles are placed, WFC propagates the constraints to neighboring tiles, limiting their options. It keeps going until the whole grid is filled.</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#step-5-handle-backtracking","title":"Step 5: Handle Backtracking","text":"<p>If WFC hits a dead end (it happens!), the algorithm backtracks, rewinds a bit, and tries again. Like Ctrl+Z but for algorithms.</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#step-6-optimize-and-iterate","title":"Step 6: Optimize and Iterate","text":"<p>Once you've got the basics down, you can start optimizing. You might add symmetry rules to make the generated worlds more aesthetically pleasing or speed up the algorithm with parallel processing. \u2699\ufe0f</p>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#the-pros-and-cons-of-wfc","title":"The Pros and Cons of WFC \ud83c\udfa2","text":""},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#advantages","title":"Advantages","text":"<ul> <li>Consistency: WFC creates coherent worlds, avoiding jarring transitions like forests sitting right next to cities. \ud83c\udf33\ud83c\udfd9\ufe0f</li> <li>Versatility: WFC can handle 2D and 3D worlds, quests, or even story generation.</li> <li>Efficient Input: You only need a small input set and a few rules to generate huge worlds.</li> </ul>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#challenges","title":"Challenges","text":"<ul> <li>Complexity: Setting up those rules is no joke. Too many constraints, and your world becomes boring. Too few, and it\u2019s chaos.</li> <li>Performance: WFC can be slow with large grids or lots of rules. Optimize or be prepared for some serious lag. \ud83d\udc22</li> <li>Overfitting: Too many strict rules can lead to predictable or repetitive results. Mix it up for some randomness!</li> </ul>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#implementation-for-wfc","title":"Implementation for WFC \ud83d\udee0\ufe0f","text":"<pre><code>// Wave Function in C++\n#include&lt;queue&gt;\n#include &lt;vector&gt;\n#include &lt;unordered_map&gt;\n#include &lt;set&gt;\n#include &lt;stack&gt;\n#include &lt;algorithm&gt;\n#include &lt;random&gt;\n\n// Step 1: Define the tile set and adjacency constraints\n// Change this based on your game's needs, you will need to link tiles to their their images or data\nenum Tile { UNDEFINED, TileA, TileB, TileC, /* ... other tiles */ };\n\n// set the rules for which tiles can be adjacent to each other\n// unordered_map is O(1)  for lookups from the source tile\n// unordered_set is O(1) for lookups from the target tile\nstd::unordered_map&lt;Tile, std::unordered_set&lt;Tile&gt;&gt; constraints = {\n    { TileA, { TileB, TileC } }, // TileA can be adjacent to TileB and TileC\n    { TileB, { TileA, TileC } },\n    { TileC, { TileA } }\n    // ... other tile constraints\n};\n\n// Define a cell structure to hold possible tiles and the final collapsed tile\nstruct Cell {\n    std::set&lt;Tile&gt; possibleTiles; // Possible states (tiles) for this cell\n    Tile collapsedTile = UNDEFINED; // Collapsed state when determined\n};\n\n// Step 2: Initialize the grid with superposition (all tiles are possible for each cell)\n// vector of vectors to represent a 2D grid. modify this for 3D, anisotropic, graph or other grid types\nstd::vector&lt;std::vector&lt;Cell&gt;&gt; initializeGrid(int width, int height, const std::set&lt;Tile&gt;&amp; tileSet) {\n    std::vector&lt;std::vector&lt;Cell&gt;&gt; grid(width, std::vector&lt;Cell&gt;(height));\n    for (auto&amp; row : grid) {\n        for (auto&amp; cell : row) {\n            cell.possibleTiles = tileSet; // Initially, every cell can be any tile\n        }\n    }\n    return grid;\n}\n\n// Step 3: Calculate entropy based on the number of possible states per cell\n// entropy is the number of possible states for a cell and it measures the uncertainty degree. The chaos temperature\nint calculateEntropy(const Cell&amp; cell) {\n    return cell.possibleTiles.size();\n}\n\n// Step 4: Main function for Wave Function Collapse\nvoid waveFunctionCollapse(std::vector&lt;std::vector&lt;Cell&gt;&gt;&amp; grid) {\n    std::stack&lt;Cell*&gt; backtrackStack;\n    // you can use another random number generator or fine tune one to meet your needs\n    std::default_random_engine generator;\n\n    while (true) {\n        // 4a: Find the cell with the lowest entropy\n        // greedy approach. It does not guarantee the solution will always be found or consistent. To have that, you will have to implement a better constraint propagation. But you can backpropagate and try again if it becaomes stuck or inconsistent. \n        Cell* cell = findLowestEntropyCell(grid);\n        if (!cell) break; // All cells are collapsed\n\n        // 4b: Randomly select a tile from the possible options\n        Tile chosenTile = randomChoice(cell-&gt;possibleTiles, generator);\n\n        // 4c: Collapse the cell\n        cell-&gt;collapsedTile = chosenTile;\n        cell-&gt;possibleTiles = { chosenTile };\n\n        // Save current state for potential backtracking\n        backtrackStack.push(cell);\n\n        // Step 5: Propagate constraints to update neighboring cells\n        propagateConstraints(cell, grid, backtrackStack);\n\n        // If no valid options remain, backtrack\n        if (!backtrackStack.empty() &amp;&amp; backtrackStack.top()-&gt;possibleTiles.empty()) {\n            backtrack(grid, backtrackStack);\n        }\n    }\n}\n\n// Step 5: Propagation function to enforce adjacency constraints\nvoid propagateConstraints(Cell* cell, std::vector&lt;std::vector&lt;Cell&gt;&gt;&amp; grid, std::stack&lt;Cell*&gt;&amp; backtrackStack) {\n    for (Cell* neighbor : getNeighbors(cell, grid)) {\n        // Remove tiles from neighbor's options that don't match adjacency rules\n        for (auto it = neighbor-&gt;possibleTiles.begin(); it != neighbor-&gt;possibleTiles.end();) {\n            if (constraints[cell-&gt;collapsedTile].find(*it) == constraints[cell-&gt;collapsedTile].end()) {\n                it = neighbor-&gt;possibleTiles.erase(it);\n            } else {\n                ++it;\n            }\n        }\n\n        // If neighbor has no valid options, prepare to backtrack\n        if (neighbor-&gt;possibleTiles.empty()) {\n            backtrackStack.push(neighbor);\n        }\n    }\n}\n\n// Step 6: Backtracking to fix conflicts\nvoid backtrack(std::vector&lt;std::vector&lt;Cell&gt;&gt;&amp; grid, std::stack&lt;Cell*&gt;&amp; backtrackStack) {\n    // Undo the last collapse step and reset the grid state\n    while (!backtrackStack.empty()) {\n        Cell* cell = backtrackStack.top();\n        backtrackStack.pop();\n\n        cell-&gt;possibleTiles.clear();\n        cell-&gt;collapsedTile = Tile(); // Reset the collapsed state\n    }\n}\n\n// Helper function to find the cell with the lowest entropy\nCell* findLowestEntropyCell(std::vector&lt;std::vector&lt;Cell&gt;&gt;&amp; grid) {\n    // you could rely on prioryty_queue or other data structures to optimize this\n    // this is not optimized and will iterate over all cells\n    Cell* minEntropyCell = nullptr;\n    int minEntropy = INT_MAX;\n    for (auto&amp; row : grid) {\n        for (auto&amp; cell : row) {\n            int entropy = calculateEntropy(cell);\n            if (entropy &gt; 1 &amp;&amp; entropy &lt; minEntropy) {\n                minEntropyCell = &amp;cell;\n                minEntropy = entropy;\n            }\n        }\n    }\n    return minEntropyCell;\n}\n\n// Helper function to randomly select a tile from possible options\nTile randomChoice(const std::set&lt;Tile&gt;&amp; tileOptions, std::default_random_engine&amp; generator) {\n    std::uniform_int_distribution&lt;int&gt; distribution(0, tileOptions.size() - 1);\n    auto it = std::next(tileOptions.begin(), distribution(generator));\n    return *it;\n}\n\n// Helper function to get neighbors of a cell (implementation depends on grid type and size)\nstd::vector&lt;Cell*&gt; getNeighbors(Cell* cell, std::vector&lt;std::vector&lt;Cell&gt;&gt;&amp; grid) {\n    std::vector&lt;Cell*&gt; neighbors;\n    // Add neighbor finding logic here (e.g., adjacent cells in a 2D grid)\n    return neighbors;\n}\n</code></pre>"},{"location":"artificialintelligence/01-pcg/WaveFunctionCollapse/#conclusion","title":"Conclusion","text":"<p>Wave Function Collapse is the ultimate game dev hack. It helps generate complex, rule-following worlds without losing the randomness that makes games exciting. Sure, it has its challenges\u2014like any powerful tool\u2014but once you get the hang of it, WFC can make your worlds, quests, and even stories feel richer and more dynamic. Plus, it saves you a ton of time!</p> <p>So, next time you need a procedural level, a tile-based puzzle, or a randomly generated quest, let WFC do the heavy lifting while you sit back and bask in the procedural glory.</p>"},{"location":"artificialintelligence/02-sm/","title":"State machines","text":"<p>Some raw thoughts: - Probably a game of life is a good game to implement to showcase automata, state machines and decision making</p>"},{"location":"artificialintelligence/03-boardgames/","title":"Board Games","text":"<p>Here we are going to cover  - Space exploration; - Memory optimization; - MinMax; - Branch and cut; - Rule and goal based decision-making</p> <p>The game we are going to cover here can be chess, rubbik cube or any card game.</p>"},{"location":"artificialintelligence/04-spatialhashing/","title":"Spatial Hashing","text":"<p>A Spatial Hashing is a common technique to speed up queries in a multidimensional space. It is a data structure that allows you to quickly find all objects within a certain area of space. It is commonly used in games and simulations to speed up, artificial intelligence world queries, collision detection, visibility testing and other spatial queries.</p> <p>Advantages of the spatial hashing:</p> <ul> <li>simple to implement;</li> <li>very fast: as fast as your key hashing function; </li> <li>easy to parallelize;</li> <li>a good choice for big worlds;</li> </ul> <p>Problem with spatial hashing:</p> <ul> <li>it is not precise;</li> <li>it is not good for small worlds;</li> <li>needs fine tune to find the right cell size;</li> <li>have to update the bucket when the object moves;</li> <li>find the nearest objects is not trivial, you will have to query the adjacent cells;</li> </ul>"},{"location":"artificialintelligence/04-spatialhashing/#buckets","title":"Buckets","text":"<p>The core of the spatial hashing is the bucket. It is a container that holds all the objects that are within a certain area of space contained in the cell area or volume. The terms cell and bucket can be interchangeable in this context.</p> <p>In order to find buckets, you will have to create ways to quantize the world space into a grid of cells. It is hard to define the best cell size, but it is a good practice to make it be a couple of times bigger than the biggest object you have in the world. The cell size will define the precision of the spatial hashing, and the bigger it is, the less precise it will be.</p>"},{"location":"artificialintelligence/04-spatialhashing/#spatial-quantization","title":"Spatial quantization","text":"<p>The spatial quantization is the process of converting a continuous space into a discrete space. This is the core process of finding the right bucket for an object. Let's assume that we have a 2D space, and we want to find the bucket for a given object. </p> <pre><code>// assuming Vector2f is a 2D vector with float components;\n// and Vector2i is a 2D vector with integer components;\n// the quantizations function will be:\nVector2&lt;int32_t&gt; quantized(float_t cellSize=1.0f) const {\n  return Vector2&lt;int32_t&gt;{\n    static_cast&lt;int32_t&gt;(std::floor(x + cellSize/2) / cellSize),\n    static_cast&lt;int32_t&gt;(std::floor(y + cellSize/2) / cellSize)\n  };\n}\n</code></pre>"},{"location":"artificialintelligence/04-spatialhashing/#data-structures","title":"Data structures","text":""},{"location":"artificialintelligence/04-spatialhashing/#data-structure-for-the-bucket","title":"Data structure for the bucket","text":"<p>First, we have to decide the data structure your bucket will use to store the objects. The common choices are:</p> <ul> <li><code>vector&lt;GameObject*&gt;</code> - a vector of pointers to game objects;</li> <li><code>set&lt;GameObject*&gt;</code> - a set of pointers to game objects;</li> <li> <p><code>unordered_set&lt;GameObject*&gt;</code> - an unordered_set of pointers to game objects;</p> </li> <li> <p>The problem of using a <code>vector</code> is that it is not efficient to remove, and find an object in it: <code>O(n)</code>; but it is efficient to add (amortized <code>O(1)</code>) and iterate over it (random access is <code>O(1)</code>).</p> </li> <li>The underlying data structure of a <code>set</code> and <code>map</code> is a binary search tree, so it is efficient to find, add and remove objects: <code>O(lg(n))</code>, but it is not efficient to iterate over it. </li> <li>Now, the <code>unordered_set</code> and <code>unordered_map</code> is a hash table, so it is efficient to find, add and remove objects: <code>O(1)</code>, and it is efficient to iterate over it. The overhead of using a hash table is the memory usage and the hashing function. It will be as fast as your hashing function.</li> </ul> <p>In our use case, we will frequently list all elements in a bucket, we will add and remove elements from it, while they move in the world. So, the best choice is to use an <code>unordered_set</code> of pointers to game objects.</p> <p>So lets define the bucket:</p> <pre><code>using std::unordered_set&lt;GameObject*&gt; = bucket_t;\n</code></pre>"},{"location":"artificialintelligence/04-spatialhashing/#data-structure-for-indexing-buckets","title":"Data structure for indexing buckets","text":"<p>Ideally, we are looking for a data structure that will give us a bucket for a given position. We have some candidates for this job:</p> <ul> <li><code>bucket_t[width][height]</code> - a 2D array of buckets;</li> <li><code>vector&lt;vector&lt;bucket_t&gt;&gt;</code> - a 2D vector of buckets;</li> <li><code>map&lt;Vector2i, bucket_t&gt;</code> - a map of buckets;</li> <li> <p><code>unordered_map&lt;Vector2i, bucket_t&gt;</code> - a map of buckets;</p> </li> <li> <p><code>array</code>s and <code>vector</code>s are the fastest data structures to use, but they are not good choices if you have a sparse world;</p> </li> <li><code>map</code> is a binary search tree;</li> <li><code>unordered_map</code> is a hash table.</li> </ul> <p>The <code>unordered_map</code> is the best choice for this use case.</p> <pre><code>// quantized world\nunordered_map&lt;Vector2i, go_bucket_t&gt; world;\n</code></pre>"},{"location":"artificialintelligence/04-spatialhashing/#iterating-over-the-whole-world-at-once","title":"Iterating over the whole world at once","text":"<p>Sometimes we just want to iterate over all objects in the world, add and remove elements. In this case, we can use a <code>unordered_set</code> to store all game objects.</p> <pre><code>// all game objects for faster global world iteration and cleanup\ngo_bucket_t worldObjects;\n</code></pre>"},{"location":"artificialintelligence/04-spatialhashing/#neighbor-cells","title":"Neighbor cells","text":"<p>When you need to query the neighbors of an object, most of the time you will need to check the current cell and the adjacent cells. You can create a function for that or include the content of it in your logic.</p> <pre><code>// neighbor buckets. not memory intensive\n// returns the reference to the 9 buckets surrounding the given bucket, including itself\n// but on the usage, you will have to check \nvector&lt;go_bucket_t*&gt; neighborBuckets(const Vector2i&amp; bucket) {\n    vector&lt;go_bucket_t*&gt; neighbors;\n    neighbors.reserve(9); // to avoid reallocations\n    for (int i = -1; i &lt;= 1; i++)\n        for (int j = -1; j &lt;= 1; j++){\n            neighbors.push_back(&amp;world()[Vector2i{bucket.x + i, bucket.y + j}]);\n        }\n    return neighbors;\n}\n\n// neighbors objects inside the 9 buckets surroundings the given bucket\n// memory intensive.\ngo_bucket_t neighborObjects(const Vector2i&amp; bucket) {\n    go_bucket_t neighbors;\n    for (auto&amp; b: neighborBuckets(bucket))\n        neighbors.insert(b-&gt;begin(), b-&gt;end());\n    return neighbors;\n}\n</code></pre>"},{"location":"artificialintelligence/04-spatialhashing/#implementation","title":"Implementation","text":"<p>This sample bellow a bit complex, but I added a bunch of support code to make it more complete, feel free to simplify it to your needs and split into multiple files.</p> <pre><code>#include &lt;iostream&gt; // for cout\n#include &lt;unordered_map&gt; // for unordered_map\n#include &lt;unordered_set&gt; // for unordered_set\n#include &lt;random&gt; // for random_device and default_random_engine\n#include &lt;cmath&gt; // for floor\n#include &lt;cstdint&gt; // for int32_t\n#include &lt;vector&gt; // for vector\n\n// to allow derivated structs to be used as keys in sorted containers and binary search algorithms\ntemplate&lt;typename T&gt;\nstruct IComparable { virtual bool operator&lt;(const T&amp; other) const = 0; };\n// to allow derivated structs to be used as keys in hash based containers and linear search algorithms\ntemplate&lt;typename T&gt;\nstruct IEquatable { virtual bool operator==(const T&amp; other) const = 0; };\n\n// generic Vector2\n// requires that T is a int32_t or float_t\ntemplate&lt;typename T&gt;\n#ifdef __cpp_concepts\nrequires std::is_same_v&lt;T, int32_t&gt; || std::is_same_v&lt;T, float_t&gt;\n#endif\nstruct Vector2:\n        public IComparable&lt;Vector2&lt;T&gt;&gt;,\n        public IEquatable&lt;Vector2&lt;T&gt;&gt; {\n    T x, y;\n    Vector2(): x(0), y(0) {}\n    Vector2(T x, T y): x(x), y(y) {}\n    // operator equals\n    bool operator==(const Vector2&amp; other) const override {\n        return this == &amp;other || (x == other.x &amp;&amp; y == other.y);\n    }\n    // operator &lt; for being able to use it as a key in a map or set\n    bool operator&lt;(const Vector2&amp; other) const override {\n        return x &lt; other.x || (x == other.x &amp;&amp; y &lt; other.y);\n    }\n\n    // quantize the vector to a 2d index\n    // to nearest integer\n    Vector2&lt;int32_t&gt; quantized(float_t cellSize=1.0f) const {\n        return Vector2&lt;int32_t&gt;{\n                static_cast&lt;int32_t&gt;(std::floor(x + cellSize/2) / cellSize),\n                static_cast&lt;int32_t&gt;(std::floor(y + cellSize/2) / cellSize)\n        };\n    }\n};\n\n// specialized Vector2 for int and float\nusing Vector2i = Vector2&lt;int32_t&gt;;\n// float32_t is only available in c++23, so we use float_t instead\nusing Vector2f = Vector2&lt;float_t&gt;;\n\n// helper struct to generate unique id for game objects\n// mostly debug purposes\nstruct uid_type {\nprivate:\n    static inline size_t nextId = 0; // to be used as a counter\n    size_t uid; // to be used as a unique identifier\npublic:\n    // not thread safe, but it is not a problem for this example\n    uid_type(): uid(nextId++) {}\n    inline size_t getUid() const { return uid; }\n};\n\n// generic game object implementation\n// replace this with your own data that you want to store in the world\nclass GameObject: public uid_type {\n    Vector2f position;\npublic:\n    GameObject();\n    GameObject(const GameObject&amp; other);\n    // todo: add your other custom data here\n    // when the it moves, it should check if it needs to update its bucket in the world\n    void setPosition(const Vector2f&amp; newPosition);\n    Vector2f getPosition() const { return position; }\n};\n\n// hashing\nnamespace std {\n    // Hash specialization for Vector2i\n    template&lt;&gt;\n    struct hash&lt;Vector2i&gt; {\n        size_t operator()(const Vector2i&amp; v) const {\n            // shift and xor operator the other to get a unique hash\n            // the problem of this approach is that it will generate neighboring cells with similar hashes\n            // to fix that, you might want to use a more complex hashing function from std::hash&lt;T&gt;\n            // copy to avoid const cast\n            auto x = v.x, y = v.y;\n            return (*reinterpret_cast&lt;size_t*&gt;(&amp;x) &lt;&lt; 32) ^ (*reinterpret_cast&lt;size_t*&gt;(&amp;y));\n        }\n    };\n}\n\n// game object pointer\nusing GameObjectPtr = GameObject*;\n// alias for the game object bucket\nusing go_bucket_t = std::unordered_set&lt;GameObjectPtr&gt;;\n// alias for the world type\nusing world_t = std::unordered_map&lt;Vector2i, go_bucket_t&gt;;\n\n// singletons here are being used to avoid global variables and to allow the world to be used in a visible scope\n// you should use a better wrappers and abstractions in a real project\n// singleton world\nworld_t&amp; world() {\n    static world_t world;\n    return world;\n}\n// singleton world objects\ngo_bucket_t&amp; worldObjects(){\n    static go_bucket_t worldObjects;\n    return worldObjects;\n}\n\n// Constructor\nGameObject::GameObject(): uid_type(), position({0,0}) {\n    // insert in the world\n    worldObjects().insert(this);\n    world()[position.quantized()].insert(this);\n}\n\n// Copy constructor\nGameObject::GameObject(const GameObject&amp; other): uid_type(other), position(other.position) {\n    // insert in the world\n    worldObjects().insert(this);\n    world()[position.quantized()].insert(this);\n}\n\n// this function requires the world to be in a visible scope like this or change it to access through a singleton\n// if in the movement, it changes its quantized position, we should remove it from the old bucket and insert it in the new one\nvoid GameObject::setPosition(const Vector2f&amp; newPosition) {\n    world_t&amp; w = world();\n    // bucket ids\n    auto oldId = position.quantized();\n    auto newId = newPosition.quantized();\n    // update position\n    position = newPosition;\n    // check if it needs to update its bucket in the world\n    if (newId == oldId)\n        return;\n    // remove from the old bucket\n    w[oldId].erase(this);\n    if(w[oldId].empty()) [[unlikely]] // c++20\n        w.erase(oldId);\n    // insert in the new bucket\n    w[newId].insert(this);\n}\n\n// random vector2f\nVector2f randomVector2f(float_t min, float_t max) {\n    static std::random_device rd;\n    static std::default_random_engine re(rd());\n    static std::uniform_real_distribution&lt;float_t&gt; dist(min, max);\n    return Vector2f{dist(re), dist(re)};\n}\n\n// neighbor buckets. not memory intensive\n// returns potentially all 9 buckets surroundings the given bucket, including itself\nstd::vector&lt;go_bucket_t*&gt; neighborBuckets(const Vector2i&amp; bucket) {\n    std::vector&lt;go_bucket_t*&gt; neighbors;\n    for (int i = -1; i &lt;= 1; i++){\n        for (int j = -1; j &lt;= 1; j++){\n            auto id = Vector2i{bucket.x + i, bucket.y + j};\n            if(world().contains(id) &amp;&amp; !world()[id].empty()) // contains is c++20\n                neighbors.push_back(&amp;world()[id]);\n        }\n    }\n    return neighbors;\n}\n\n// neighbors objects inside the 9 buckets surroundings the given bucket\n// memory intensive. use with caution\ngo_bucket_t neighborObjects(const Vector2i&amp; bucket) {\n    go_bucket_t neighbors;\n    for (auto&amp; b: neighborBuckets(bucket))\n        neighbors.insert(b-&gt;begin(), b-&gt;end());\n    return neighbors;\n}\n\n// dump world\nvoid dumpWorld() {\n    for (auto&amp; bucket: world()) {\n        std::cout &lt;&lt; \"bucket: [\" &lt;&lt; bucket.first.x &lt;&lt; \",\" &lt;&lt; bucket.first.y &lt;&lt; \"]:\" &lt;&lt; std::endl;\n        for (auto&amp; obj: bucket.second)\n             std::cout &lt;&lt;\" - \"&lt;&lt; obj-&gt;getUid() &lt;&lt; \": at (\" &lt;&lt; obj-&gt;getPosition().x &lt;&lt; \", \" &lt;&lt; obj-&gt;getPosition().y &lt;&lt; \")\" &lt;&lt; std::endl;\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\nint main() {\n    // fill the world with some game objects\n    for (int i = 0; i &lt; 121; i++) {\n        // the constructor will insert it in the world\n        auto obj = new GameObject();\n        // randomly move the game objects\n        // this will update their position and their bucket in the world\n        obj -&gt; setPosition(randomVector2f(-5, 5));\n    }\n\n    // dump the world\n    dumpWorld();\n\n    // remove all game objects\n    for (auto&amp; obj: worldObjects())\n        delete obj;\n\n    // clear refs\n    worldObjects().clear();\n    world().clear();\n\n    return 0;\n}\n</code></pre>"},{"location":"artificialintelligence/04-spatialhashing/#homework","title":"Homework","text":"<ol> <li>Implement a spatial hashing for a 3D world;</li> <li>Implement another space partition technique, such as a quadtree/octree/kdtree and compare:<ol> <li>the performance of both in scenarios of moving objects, searching for objects and adding / removing objects;</li> <li>memory consumption;</li> <li>which one will be slow down faster the bigger the world becomes; </li> </ol> </li> </ol>"},{"location":"artificialintelligence/05-kdtree/","title":"KD-Trees","text":"<p>KD-Trees are a special type of binary trees that are used to partition a k-dimensional space. They are used to solve the problem of finding the nearest neighbor of a point in a k-dimensional space. The name KD-Tree comes from the method of partitioning the space, the K stands for the number of dimensions in the space.</p> <p>KD-tree are costly to mantain and balance. So use it only if you have a lot of queries to do, and the space is not changing. If you have a lot of queries, but the space is changing a lot, you should use a different data structure, such as a quadtree or a hash table.</p>"},{"location":"artificialintelligence/05-kdtree/#methodology","title":"Methodology","text":"<ul> <li>On the binary tree KD-Tree, each node represents a k-dimensional point;</li> <li>The tree is constructed by recursively partitioning the space into two half-spaces. </li> <li>The partitioning is done by selecting a dimension and a value, and then splitting the space into two half-spaces. </li> <li>The dimension and value are selected in such a way that the space is divided into two equal parts. </li> <li>The left child of a node contains all the points for that dimension that are less than the value, and the right child contains all the points that are greater than or equal to the value.</li> </ul>"},{"location":"artificialintelligence/05-kdtree/#example","title":"Example","text":"<p>Let's consider the following 2D points:</p> <pre><code>(3, 1), (7, 15), (2, 14), (16, 2), (19, 13), (12, 17), (1, 9)\n</code></pre> <p>{     \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",     \"description\": \"A scatter plot of the points\",     \"data\": {         \"values\": [         {\"x\": 3, \"y\": 1},         {\"x\": 7, \"y\": 15},         {\"x\": 2, \"y\": 14},         {\"x\": 16, \"y\": 2},         {\"x\": 19, \"y\": 13},         {\"x\": 12, \"y\": 17},         {\"x\": 1, \"y\": 9}         ]     },     \"mark\": \"point\",     \"encoding\": {         \"x\": {\"field\": \"x\", \"type\": \"quantitative\"},         \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}     } }</p> <p>The first step is to define the root. For that we need do define two things: the dimension and the value:</p> <ul> <li>For the dimension we need to select the one that has the largest range. </li> <li>For the value we need to select the median of that dimension.</li> </ul> <p>So if we sort the points by the axis, we will have:</p> <pre><code>SortedByX = (1, 9), (3, 1), (2, 14), (7, 15), (12, 17), (16, 2), (19, 13)\nSortedByY = (3, 1), (16, 2), (1, 9), (19, 13), (7, 15), (3, 15), (12, 17)\n</code></pre> <p>The largest range is on the X axis, so we will select the median of the X axis as the root. The median of the X axis is <code>(7, 15)</code>, and the starting dimension will be X.</p> <p>For the next level, the left side candidates will be the ones with X less than <code>(7, 15)</code>, and the right side, the ones that are greater or equal to <code>(7, 15)</code>. But now this level will be governed sorted by Y:</p> <pre><code>LeftSortedByY  = (3, 1), (1, 9), (2, 14)\nRightSortedByY = (16, 2), (19, 13), (12, 17)\n</code></pre> <p>Graph showing the first split on X at (7, 15):</p> <p>The median for the left side is <code>(1, 9)</code>, and for the right side is <code>(19, 13)</code>.</p> <p>The current state of the tree is:</p> <p>{   \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",   \"description\": \"A scatter plot of the points\",   \"encoding\": {     \"x\": {\"field\": \"x\", \"type\": \"quantitative\"},     \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}   },   \"layer\": [     {       \"data\": {         \"values\": [           {\"x\": 3, \"y\": 1},           {\"x\": 7, \"y\": 15},           {\"x\": 2, \"y\": 14},           {\"x\": 16, \"y\": 2},           {\"x\": 19, \"y\": 13},           {\"x\": 12, \"y\": 17},           {\"x\": 1, \"y\": 9}         ]       },       \"mark\": \"point\"     },     {       \"data\": {         \"values\": [           {\"x\": 7, \"y\": 0},           {\"x\": 7, \"y\": 20}         ]       },       \"mark\": \"line\",       \"encoding\": {         \"color\": {           \"value\": \"#DB745B\"         }       }     }   ] }</p> <p>Now we apply the same rules for the children of the left and right nodes.</p> <pre><code>graph TD\n    Root(07,15)\n    Left(01,09)\n    Right(19,13)\n    LeftLeft(03,01)\n    LeftRight(02,14)\n    RightLeft(16,02)\n    RightRight(12,17)\n    Root --&gt; |x&lt;7| Left\n    Root --&gt; |x&gt;7| Right\n    Left --&gt; |y&lt;9| LeftLeft\n    Left --&gt; |y&gt;9| LeftRight\n    Right --&gt; |y&lt;13| RightLeft\n    Right --&gt; |y&gt;13| RightRight</code></pre> <p>The tree will be:</p> <p>{   \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",   \"description\": \"A scatter plot of the points\",   \"encoding\": {     \"x\": {\"field\": \"x\", \"type\": \"quantitative\"},     \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}   },   \"layer\": [     {       \"data\": {         \"values\": [           {\"x\": 3, \"y\": 1},           {\"x\": 7, \"y\": 15},           {\"x\": 2, \"y\": 14},           {\"x\": 16, \"y\": 2},           {\"x\": 19, \"y\": 13},           {\"x\": 12, \"y\": 17},           {\"x\": 1, \"y\": 9}         ]       },       \"mark\": \"point\"     },     {       \"data\": {         \"values\": [           {\"x\": 7, \"y\": 0},           {\"x\": 7, \"y\": 20}         ]       },       \"mark\": \"line\",       \"encoding\": {         \"color\": {           \"value\": \"#DB745B\"         }       }     },     {       \"data\": {         \"values\": [           {\"x\": 0, \"y\": 9},           {\"x\": 7, \"y\": 9}         ]       },       \"mark\": \"line\",       \"encoding\": {         \"color\": {           \"value\": \"#4F72DB\"         }       }     },     {       \"data\": {         \"values\": [           {\"x\": 7, \"y\": 13},           {\"x\": 20, \"y\": 13}         ]       },       \"mark\": \"line\",       \"encoding\": {         \"color\": {           \"value\": \"#4F72DB\"         }       }     }   ] }</p> <p>And lastly, we will have:</p> <p>{   \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",   \"description\": \"A scatter plot of the points\",   \"encoding\": {     \"x\": {\"field\": \"x\", \"type\": \"quantitative\"},     \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}   },   \"layer\": [     {       \"data\": {         \"values\": [           {\"x\": 3, \"y\": 1},           {\"x\": 7, \"y\": 15},           {\"x\": 2, \"y\": 14},           {\"x\": 16, \"y\": 2},           {\"x\": 19, \"y\": 13},           {\"x\": 12, \"y\": 17},           {\"x\": 1, \"y\": 9}         ]       },       \"mark\": \"point\"     },     {       \"data\": {         \"values\": [           {\"x\": 7, \"y\": 0},           {\"x\": 7, \"y\": 20}         ]       },       \"mark\": \"line\",       \"encoding\": {         \"color\": {           \"value\": \"#DB745B\"         }       }     },     {       \"data\": {         \"values\": [           {\"x\": 0, \"y\": 9},           {\"x\": 7, \"y\": 9}         ]       },       \"mark\": \"line\",       \"encoding\": {         \"color\": {           \"value\": \"#4F72DB\"         }       }     },     {       \"data\": {         \"values\": [           {\"x\": 7, \"y\": 13},           {\"x\": 20, \"y\": 13}         ]       },       \"mark\": \"line\",       \"encoding\": {         \"color\": {           \"value\": \"#4F72DB\"         }       }     },     {       \"data\": {         \"values\": [           {\"x\": 3, \"y\": 0},           {\"x\": 3, \"y\": 9}         ]       },       \"mark\": \"line\",       \"encoding\": {         \"color\": {           \"value\": \"#93DB35\"         }       }     },     {       \"data\": {         \"values\": [           {\"x\": 2, \"y\": 9},           {\"x\": 2, \"y\": 20}         ]       },       \"mark\": \"line\",       \"encoding\": {         \"color\": {           \"value\": \"#93DB35\"         }       }     },     {       \"data\": {         \"values\": [           {\"x\": 12, \"y\": 13},           {\"x\": 12, \"y\": 20}         ]       },       \"mark\": \"line\",       \"encoding\": {         \"color\": {           \"value\": \"#93DB35\"         }       }     },     {       \"data\": {         \"values\": [           {\"x\": 16, \"y\": 13},           {\"x\": 16, \"y\": 0}         ]       },       \"mark\": \"line\",       \"encoding\": {         \"color\": {           \"value\": \"#93DB35\"         }       }     }   ] }</p>"},{"location":"artificialintelligence/05-kdtree/#implementation","title":"Implementation","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\n// vector\nstruct Vector2f {\n    float x, y;\n    Vector2f(float x, float y) : x(x), y(y) {}\n    // subscript operator to be used in the KDTree\n    float&amp; operator[](size_t index) {\n        return index%2 == 0 ? x : y;\n    }\n    // distanceSqrd between two vectors\n    float distanceSqrd(const Vector2f&amp; other) const {\n        return (x - other.x)*(x - other.x) + (y - other.y)*(y - other.y);\n    }\n};\n\n// your object data structure\nclass GameObject {\n    // your other data\npublic:\n    Vector2f position;\n    explicit GameObject(Vector2f position={0,0}) : position(position) {}\n};\n\n// KDNode\nstruct KDNode {\n    GameObject* object;\n    KDNode* left;\n    KDNode* right;\n    KDNode(GameObject* object, KDNode* left = nullptr, KDNode* right= nullptr) :\n        object(object),\n        left(left),\n        right(right)\n      {}\n};\n\n// KDTree manager\nclass KDTree {\npublic:\n    KDNode* root;\n    KDTree() : root(nullptr) {}\n\n    ~KDTree() {\n        // interactively delete the nodes\n        std::vector&lt;KDNode*&gt; nodes;\n        nodes.push_back(root);\n        while (!nodes.empty()) {\n            KDNode* current = nodes.back();\n            nodes.pop_back();\n            if (current-&gt;left != nullptr) nodes.push_back(current-&gt;left);\n            if (current-&gt;right != nullptr) nodes.push_back(current-&gt;right);\n            delete current;\n        }\n    }\n\n    void insert(GameObject* object) {\n        if (root == nullptr) {\n            root = new KDNode(object);\n        } else {\n            KDNode* current = root;\n            size_t dimensionId = 0;\n            while (true) {\n                if (object-&gt;position[dimensionId] &lt; current-&gt;object-&gt;position[dimensionId]) {\n                    if (current-&gt;left == nullptr) {\n                        current-&gt;left = new KDNode(object);\n                        break;\n                    } else {\n                        current = current-&gt;left;\n                    }\n                } else {\n                    if (current-&gt;right == nullptr) {\n                        current-&gt;right = new KDNode(object);\n                        break;\n                    } else {\n                        current = current-&gt;right;\n                    }\n                }\n                dimensionId++;\n            }\n        }\n    }\n\n    void insert(std::vector&lt;GameObject*&gt; objects, int dimensionId=0 ) {\n        if(objects.empty()) return;\n        if(objects.size() == 1) {\n            insert(objects[0]);\n            return;\n        }\n        // find the median for the current dimension\n        std::sort(objects.begin(), objects.end(), [dimensionId](GameObject* a, GameObject* b) {\n            return a-&gt;position[dimensionId] &lt; b-&gt;position[dimensionId];\n        });\n        // insert the median\n        auto medianIndex = objects.size() / 2;\n        insert(objects[medianIndex]);\n\n        // insert the left and right exluding the median\n        insert(std::vector&lt;GameObject*&gt;(objects.begin(), objects.begin() + medianIndex), (dimensionId + 1) % 2);\n        insert(std::vector&lt;GameObject*&gt;(objects.begin() + medianIndex + 1, objects.end()), (dimensionId + 1) % 2);\n    }\n\n    // get the nearest neighbor\n    GameObject* nearestNeighbor(Vector2f position) {\n        return NearestNeighbor(root, position, root-&gt;object, root-&gt;object-&gt;position.distanceSqrd(position), 0);\n    }\n\n    GameObject* NearestNeighbor(KDNode* node, Vector2f position, GameObject* best, float bestDistance, int dimensionId) {\n        // create your own Nearest Neighbor algorithm. That's not hard, just follow the rules\n        // 1. If the current node is null, return the best\n        // 2. If the current node is closer to the position, update the best\n        // 3. If the current node is closer to the position than the best, search the children\n        // 4. If the current node is not closer to the position than the best, search the children\n        // 5. Return the best\n    }\n\n    // draw the tree\n    void draw() {\n        std::vector&lt;KDNode*&gt; nodes;\n        // uses space to shaw the level of the node\n        std::vector&lt;std::string&gt; spaces;\n        nodes.push_back(root);\n        spaces.push_back(\"\");\n        while (!nodes.empty()) {\n            KDNode* current = nodes.back();\n            std::string space = spaces.back();\n            nodes.pop_back();\n            spaces.pop_back();\n            if (current-&gt;right != nullptr) {\n                nodes.push_back(current-&gt;right);\n                spaces.push_back(space + \"  \");\n            }\n            std::cout &lt;&lt; space &lt;&lt; \":&gt; \" &lt;&lt; current-&gt;object-&gt;position.x &lt;&lt; \", \" &lt;&lt; current-&gt;object-&gt;position.y &lt;&lt; std::endl;\n            if (current-&gt;left != nullptr) {\n                nodes.push_back(current-&gt;left);\n                spaces.push_back(space + \"  \");\n            }\n        }\n    }\n};\n\nint main(){\n    // nodes: (3, 1), (7, 15), (2, 14), (16, 2), (19, 13), (12, 17), (1, 9)\n    KDTree tree;\n    std::vector&lt;GameObject*&gt; objects = {\n        new GameObject(Vector2f(3, 1)),\n        new GameObject(Vector2f(7, 15)),\n        new GameObject(Vector2f(2, 14)),\n        new GameObject(Vector2f(16, 2)),\n        new GameObject(Vector2f(19, 13)),\n        new GameObject(Vector2f(12, 17)),\n        new GameObject(Vector2f(1, 9))\n    };\n    // insert the objects\n    tree.insert(objects);\n    // draw the tree\n    tree.draw();\n    // get the nearest neighbor to (10, 10)\n    GameObject* nearest = tree.nearestNeighbor(Vector2f(3, 15));\n    std::cout &lt;&lt; \"Nearest neighbor to (3, 15): \" &lt;&lt; nearest-&gt;position.x &lt;&lt; \", \" &lt;&lt; nearest-&gt;position.y &lt;&lt; std::endl;\n    // will print 2, 14\n    return 0;\n}\n</code></pre>"},{"location":"artificialintelligence/05-kdtree/#homework","title":"Homework","text":"<ol> <li>Implement the KDTree in your favorite language;</li> <li>Improve the KDTree to support 3D;</li> <li>Implement more methods to make it dynamic: insert, remove, update;</li> <li>Modify the KDTree to be balanced on insertion;</li> </ol>"},{"location":"artificialintelligence/06-pathfinding/","title":"Pathfinding on a 2D grid","text":""},{"location":"artificialintelligence/06-pathfinding/#data-structures","title":"Data structures","text":"<p>In order to build an A-star pathfinding algorithm, we need to define some data structures. We need:</p> <ul> <li>Index for the quantized map;</li> <li>Position for the game objects;</li> <li>Bucket to query in O(1) if the elements are there;</li> <li>Map from Index to Buckets;</li> <li>Priority Queue to store the frontier of visitable buckets;</li> <li>Vector of Indexes to store the path;</li> </ul>"},{"location":"artificialintelligence/06-pathfinding/#index-and-position","title":"Index and Position","text":"<p>In order to A-star to work in a continuous space, we should quantize the space position into indexes.</p> <pre><code>// generic vector2 struct to work with floats and ints\ntemplate &lt;typename T&gt;\n// requires T to be int32_t or float_t\nrequires std::is_same&lt;T, int32_t&gt;::value || std::is_same&lt;T, float_t&gt;::value // C++20\nstruct Vector2 {\n    // data\n    T x, y;\n    // constructors\n    Vector2() : x(0), y(0) {}\n    Vector2(T x, T y) : x(x), y(y) {}\n    // copy constructor\n    Vector2(const Vector2&amp; v) : x(v.x), y(v.y) {}\n    // assignment operator\n    Vector2&amp; operator=(const Vector2&amp; v) {\n        x = v.x;\n        y = v.y;\n        return *this;\n    }\n    // operators\n    Vector2 operator+(const Vector2&amp; v) const {\n        return Vector2(x + v.x, y + v.y);\n    }\n    Vector2 operator-(const Vector2&amp; v) const {\n        return Vector2(x - v.x, y - v.y);\n    }\n    // distance\n    float distance(const Vector2&amp; v) const {\n        return sqrt((x - v.x) * (x - v.x) + (y - v.y) * (y - v.y));\n    }\n    // distance squared\n    float distanceSquared(const Vector2&amp; v) const {\n        return (x - v.x) * (x - v.x) + (y - v.y) * (y - v.y);\n    }\n    // quantize to index2\n    Vector2&lt;int32_t&gt; quantized(float scale=1) const {\n        return {(int32_t)std::round(x / scale), (int32_t)std::round(y / scale)};\n    }\n    // operator &lt; for std::map\n    bool operator&lt;(const Vector2&amp; v) const {\n        return x &lt; v.x || (x == v.x &amp;&amp; y &lt; v.y);\n    }\n    // operator == for std::map\n    bool operator==(const Vector2&amp; v) const {\n        return x == v.x &amp;&amp; y == v.y;\n    }\n};\n</code></pre> <ul> <li>The operators <code>&lt;</code> and <code>==</code> are required to use the Vector2 as a key in a std::map.</li> <li>The <code>quantized</code> method is used to convert a position into an index.</li> <li>The <code>distance</code> and <code>distanceSquared</code> methods are used to calculate the distance between two positions. Is used on A-star to calculate the cost to reach a neighbor or the distance to the goal.</li> </ul> <pre><code>using Index2 = Vector2&lt;int32_t&gt;;\nusing Position2 = Vector2&lt;float_t&gt;;\n</code></pre> <p>I am going to use <code>Index2</code> to store the quantized index in the grid and <code>Position2</code> to store the continuous position.</p> <pre><code>// hash function for std::unordered_map\ntemplate &lt;&gt;\nstruct std::hash&lt;Index2&gt; {\n    size_t operator()(const Index2 &amp;v) const {\n        return (((size_t)v.x) &lt;&lt; 32) ^ (size_t)v.y;\n    }\n};\n</code></pre> <p>This hash function is for the <code>std::unordered_map</code> and <code>std::unordered_set</code> to work with <code>Index2</code>.</p>"},{"location":"artificialintelligence/06-pathfinding/#bucket","title":"Bucket","text":"<p>In order to have an easy way to query if a game object is in a bucket, we need to use an <code>std::unordered_set</code> of pointers to the game objects. In order to index them, we will use an <code>std::unordered_map</code> from <code>Index2</code> to <code>std::unordered_set</code>.</p> <pre><code>std::unordered_map&lt;Index2, std::unordered_set&lt;GameObject*&gt;&gt; quantizedMap;\n</code></pre>"},{"location":"artificialintelligence/06-pathfinding/#costs","title":"Costs","text":"<p>Your scenario might have different costs to reach a bucket. You can use an <code>std::unordered_map</code> to store the cost of each bucket.</p> <pre><code>std::unordered_map&lt;Index2, float&gt; costMap;\n</code></pre>"},{"location":"artificialintelligence/06-pathfinding/#walls","title":"Walls","text":"<p>You might want to avoid some buckets. You can use an <code>std::unordered_map</code> to store the walls.</p> <pre><code>std::unordered_map&lt;Index2, bool&gt; isWall;\n</code></pre>"},{"location":"artificialintelligence/06-pathfinding/#priority-queue","title":"Priority Queue","text":"<p>In order to store the frontier of visitable buckets, we need to use a <code>std::priority_queue</code> of pairs of <code>float</code> and <code>Index2</code>.</p> <pre><code>std::priority_queue&lt;std::pair&lt;float, Index2&gt;&gt; frontier;\n</code></pre>"},{"location":"artificialintelligence/06-pathfinding/#implementation","title":"Implementation","text":"<pre><code>/**\nIn order to build an A-star pathfinding algorithm, we need to define some data structures. We need:\n- Index for the quantized map;\n- Position2 for the game objects;\n- Bucket to query in O(1) if the elements are there;\n- Map from Index to Buckets;\n- Priority Queue to store the frontier of visitable buckets;\n- Vector of Indexes to store the path;\n*/\n\n#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;unordered_set&gt;\n#include &lt;cmath&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n\nusing std::pair;\n\ntemplate&lt;typename K, typename V&gt;\nusing umap = std::unordered_map&lt;K, V&gt;;\n\ntemplate&lt;typename T&gt;\nusing uset = std::unordered_set&lt;T&gt;;\n\ntemplate&lt;typename T&gt;\nusing pqueue = std::priority_queue&lt;T&gt;;\n\n// generic vector2 struct to work with floats and ints\ntemplate &lt;typename T&gt;\n// requires T to be int32_t or float_t\nrequires std::is_same&lt;T, int32_t&gt;::value || std::is_same&lt;T, float_t&gt;::value // C++20\nstruct Vector2 {\n    // data\n    T x, y;\n    // constructors\n    Vector2() : x(0), y(0) {}\n    Vector2(T x, T y) : x(x), y(y) {}\n    // copy constructor\n    Vector2(const Vector2&amp; v) : x(v.x), y(v.y) {}\n    // assignment operator\n    Vector2&amp; operator=(const Vector2&amp; v) {\n        x = v.x;\n        y = v.y;\n        return *this;\n    }\n    // operators\n    Vector2 operator+(const Vector2&amp; v) const {\n        return Vector2(x + v.x, y + v.y);\n    }\n    Vector2 operator-(const Vector2&amp; v) const {\n        return Vector2(x - v.x, y - v.y);\n    }\n    // distance\n    float distance(const Vector2&amp; v) const {\n        return sqrt((x - v.x) * (x - v.x) + (y - v.y) * (y - v.y));\n    }\n    // distance squared\n    float distanceSquared(const Vector2&amp; v) const {\n        return (float)(x - v.x) * (x - v.x) + (float)(y - v.y) * (y - v.y);\n    }\n    // quantize to index2\n    Vector2&lt;int32_t&gt; quantized(float scale=1) const {\n        return {(int32_t)std::round(x / scale), (int32_t)std::round(y / scale)};\n    }\n    // operator &lt; for std::map\n    bool operator&lt;(const Vector2&amp; v) const {\n        return x &lt; v.x || (x == v.x &amp;&amp; y &lt; v.y);\n    }\n    // operator == for std::map\n    bool operator==(const Vector2&amp; v) const {\n        return x == v.x &amp;&amp; y == v.y;\n    }\n};\n\nusing Index2 = Vector2&lt;int32_t&gt;;\nusing Position2 = Vector2&lt;float_t&gt;;\n\n// implement this struct to store game objects by yourself\nstruct GameObject {\n    Position2 position;\n    // add here your other data\n\n    GameObject(const Position2&amp; position) : position(position) {}\n    GameObject() : position(Position2()) {}\n};\n\n// hash function for std::unordered_map\ntemplate &lt;&gt;\nstruct std::hash&lt;Index2&gt; {\n    size_t operator()(const Index2 &amp;v) const {\n        return (((size_t)v.x) &lt;&lt; 32) | (size_t)v.y;\n    }\n};\n\n// The game objects organized into buckets\numap&lt;Index2, uset&lt;GameObject*&gt;&gt; quantizedMap;\n// all game objects\nuset&lt;GameObject*&gt; gameObjects;\n// The cost of each bucket\numap&lt;Index2, float&gt; costMap;\n// The walls\numap&lt;Index2, bool&gt; isWall;\n\n// Pathfinding algorithm from position A to position B\nstd::vector&lt;Index2&gt; findPath(const Position2&amp; startPos, const Position2&amp; endPos) {\n    // quantize\n    Index2 start = startPos.quantized();\n    Index2 end = endPos.quantized();\n\n    // datastructures\n    pqueue&lt;pair&lt;float, Index2&gt;&gt; frontier; // to store the frontier of visitable buckets\n    umap&lt;Index2, float&gt; accumulatedCosts; // to store the cost to reach a bucket\n\n    // initialize\n    accumulatedCosts[start] = 0;\n    frontier.emplace(0, start);\n\n    // main loop\n    while (!frontier.empty()) {\n        // consume first element from the frontier\n        auto current = frontier.top().second;\n        frontier.pop();\n\n        // quit early\n        if (current == end)\n            break;\n\n        // iterate over neighbors\n        auto candidates = {\n                current + Index2(1, 0),\n                current + Index2(-1, 0),\n                current + Index2(0, 1),\n                current + Index2(0, -1)\n        };\n        for (const auto&amp; next : candidates) {\n            // skip walls\n            if(isWall.contains(current))\n                continue;\n            // if the neighbor has not been visited and is not on frontier\n            // calculate the cost to reach the neighbor\n            float newCost =\n                    accumulatedCosts[current] + // cost so far\n                    current.distance(next) + // cost to reach the neighbor\n                    (costMap.contains(next) ? costMap[next] : 0); // cost of the neighbor\n            // if the cost is lower than the previous cost\n            if (!accumulatedCosts.contains(next) || newCost &lt; accumulatedCosts[next]) {\n                // update the cost\n                accumulatedCosts[next] = newCost;\n                // calculate the priority\n                float priority = newCost + next.distance(end);\n                // push the neighbor to the frontier\n                frontier.emplace(-priority, next);\n            }\n        }\n    }\n\n    // reconstruct path\n    std::vector&lt;Index2&gt; path;\n    Index2 current = end;\n    while (current != start) {\n        path.push_back(current);\n        auto candidates = {\n                current + Index2(1, 0),\n                current + Index2(-1, 0),\n                current + Index2(0, 1),\n                current + Index2(0, -1)\n        };\n        for (const auto&amp; next : candidates) {\n            if (accumulatedCosts.contains(next) &amp;&amp; accumulatedCosts[next] &lt; accumulatedCosts[current]) {\n                current = next;\n                break;\n            }\n        }\n    }\n    path.push_back(start);\n    std::reverse(path.begin(), path.end());\n    return path;\n}\n\nint main() {\n/*\nmap. numbers are bucket cost, letters are objects, x is wall\nA 0 5 0 0 0\n0 X X 0 0 0\n5 X 0 0 5 0\n0 0 0 5 B 5\n0 0 0 0 5 0\n */\n\n    // Create 2 Game Objects\n    GameObject a(Position2(0.1, 0.1));\n    GameObject b(Position2(3.9, 4.1));\n\n    // place walls\n    isWall[Index2(1, 1)] = true;\n    isWall[Index2(1, 2)] = true;\n    isWall[Index2(2, 1)] = true;\n\n    // add cost to some buckets\n    // should avoid these:\n    costMap[Index2(2, 0)] = 5;\n    costMap[Index2(0, 2)] = 5;\n    // should pass-through these:\n    costMap[Index2(5, 4)] = 5;\n    costMap[Index2(3, 4)] = 5;\n    costMap[Index2(4, 3)] = 5;\n    costMap[Index2(4, 5)] = 5;\n\n    // add game objects to the set\n    gameObjects.insert(&amp;a);\n    gameObjects.insert(&amp;b);\n\n    // add game objects to the quantized map\n    for (auto&amp; g : gameObjects)\n        quantizedMap[g-&gt;position.quantized()].insert(g);\n\n    // find path\n    auto path = findPath(a.position, b.position);\n\n    // todo: smooth the path between the points\n\n    // print path\n    for (auto&amp; p : path)\n        std::cout &lt;&lt; \"(\" &lt;&lt; p.x &lt;&lt; \", \" &lt;&lt; p.y &lt;&lt; \") \";\n    std::cout &lt;&lt; std::endl;\n    // will print (0, 0) (1, 0) (1, -1) (2, -1) (3, -1) (3, 0) (3, 1) (3, 2) (3, 3) (4, 3) (4, 4)\n\n    return 0;\n}\n</code></pre>"},{"location":"artificialintelligence/07-automatedtesting/","title":"AI as a testing tool","text":"<p>There are several ways to use AI as a testing tool. </p> <ul> <li>Analytics</li> <li>Predicting behavior;</li> <li>A/B Testing;</li> <li>Game Environment Automated Testing via AI agents;</li> <li>Test Case Generation;</li> <li>Anti-cheat systems;</li> </ul>"},{"location":"artificialintelligence/07-automatedtesting/#analytics","title":"Analytics","text":"<p>Analytics is the most common way to use AI as a testing tool. You can use AI to track the user behavior and use the data to improve the game. But with that you can only analyze the past.</p> <p>You might want to track all user interactions, and use AI to analyze the data and give you insights on how to improve the game. This will be the core of many other AI testing tools.</p> <p>The common ways to track the user interactions are:</p> <ul> <li>Send events to a server;</li> <li>Use a third-party service to track the user interactions;</li> <li>Progression funnels;</li> <li>Heatmaps;</li> <li>User paths;</li> <li>Map all deaths / kills / wins / losses;</li> <li>Store the replay of the user interactions;</li> </ul>"},{"location":"artificialintelligence/07-automatedtesting/#predicting-behavior","title":"Predicting behavior","text":"<p>You can train an AI model to predict the behavior of the user to abandon the game, and intervene before it happens. </p> <p>In order to achieve this, you can track the user interactions and the consequences of those interactions. You can use a supervised learning algorithm to predict the behavior of the user. Once you discover the pattern, you can intervene and try to change the user behavior.</p> <p>Example: If the player is loosing too much, you can give him a boost to keep him playing. Or automatically change the difficulty of the game. Another good example is when you predict the user is going to abandon the game, you can give him a reward to keep him playing, or allow him to ask for more lives on social media friends.</p>"},{"location":"artificialintelligence/07-automatedtesting/#forcing-the-user-to-take-a-break","title":"Forcing the user to take a break","text":"<p>Sometimes you want to avoid the user to get burned out and force him to take a break. This is a common practice in mobile games.</p> <p>If your game gives rewards for plaing every day, or every session. You can use AI to predict when the user is going to play again and send him a notification to play again.</p> <p>This can be a bit shady, but, another use case is to force the game to get harder if the user is playing too much. And when it loses, add a timer to unlock the game again. You can even use this moment to show ads, or ask for money to unlock the game again. Can you think in a game like this?</p>"},{"location":"artificialintelligence/07-automatedtesting/#ab-testing","title":"A/B Testing","text":"<p>A/B testing is a way to compare two versions of a configuration setting or a feature to determine which one is better. It relies on remote configuration and the statistical analysis to determine which one is better.</p> <p>The process is simple:</p> <ul> <li>A developer create 2 scenarios to test. Ex.: the color of a button to buy a product (Red or Blue);</li> <li>The system will randomly select one of the scenarios to show to the user;</li> <li>The system will collect data from the user interaction;</li> <li>The system will compare the data from the two scenarios and determine which one is better;</li> <li>The system will select the best scenario to be the default one;</li> </ul>"},{"location":"artificialintelligence/07-automatedtesting/#game-environment-automated-testing-via-ai-agents","title":"Game Environment Automated Testing via AI agents","text":"<p>This can be really hard to implement, but in summary is to create AIs that can play as humans and test the game. This can be used to test the game balance, the game difficulty, the game mechanics and the game performance.</p> <p>If you are just trying to test game rules, or economy, you might wanna try to use a genetic algorithm to evolve the best strategy for a given game.</p> <p>If you are looking for creating a bot to find hardlocks where the player might fall and not recover, or detect bugs, you might try to use a reinforcement learning algorithm.</p> <p>This field is so vast that is hard to cover in a single section. I will use this in class just to see how it works.</p>"},{"location":"artificialintelligence/07-automatedtesting/#test-case-generation","title":"Test Case Generation","text":"<p>You can use AI to generate test cases for your game. There are plenty of LLMs online that can can read your code and generate test cases for you.</p>"},{"location":"artificialintelligence/07-automatedtesting/#anti-cheat-systems","title":"Anti-cheat systems","text":"<p>You can detect cheaters using AI. But you will have to be careful to not ban innocent players. You can use AI to detect patterns of cheating and intervene before it happens.</p> <p>Possible patterns to detect: Speed hacks; Aim bots; Wall hacks, ESP hacks, Macros; Auto-clickers; Memory hacks. and much more.</p>"},{"location":"artificialintelligence/07-automatedtesting/#shadow-banning","title":"Shadow banning","text":"<p>It is a common technique to ban cheaters. You can shadow-ban a cheater by making him play with other cheaters only. This way, the cheater will not know he is banned, but he will only play with other cheaters. This can be done using AI to detect the cheaters and put them in the same match.</p>"},{"location":"artificialintelligence/07-automatedtesting/#serious-sam-3-bfe-serious-digital-edition","title":"Serious Sam 3: BFE (Serious Digital Edition):","text":"<p>The protagonist encounters an invincible, extremely fast and screaming scorpion-like enemy, making the game nearly impossible to progress.</p>"},{"location":"artificialintelligence/07-automatedtesting/#game-dev-tycoon","title":"Game Dev Tycoon:","text":"<p>In the pirated versions, players find themselves struggling to make a profit as their virtual game studio is plagued by piracy.</p>"},{"location":"artificialintelligence/07-automatedtesting/#batman-arkham-asylum","title":"Batman: Arkham Asylum:","text":"<p>Batman's cape doesn't work properly, leading to a rather comical and dysfunctional experience.</p>"},{"location":"artificialintelligence/07-automatedtesting/#mirrors-edge","title":"Mirror's Edge:","text":"<p>Faith is unable to progress past a certain point due to an inability to grab a ledge, hindering the player's ability to complete the level.</p>"},{"location":"artificialintelligence/07-automatedtesting/#earthbound-mother-2","title":"Earthbound (Mother 2):","text":"<p>In pirated copies, the game triggers a constant stream of inescapable enemy encounters.</p> <p>Can you think in other examples?</p>"},{"location":"artificialintelligence/09-minmax/","title":"Min-Max Algorithm","text":"<p>Commonly while you build a tree of options, (say path, decisions, states or anything else), you will have to make a decision at each node of the tree to deepen the search. The min-max algorithm is a nice and easy approach to solve this problem. It might be used in games, decision making, and other fields.</p>"},{"location":"artificialintelligence/09-minmax/#use-cases","title":"Use cases","text":"<p>Min-Max algorithms shines in places where you will have to maximize the gain and minimize the loss.</p>"},{"location":"artificialintelligence/09-minmax/#algorithm","title":"Algorithm","text":""},{"location":"artificialintelligence/09-minmax/#alpha-beta-prunning","title":"Alpha beta prunning","text":""},{"location":"artificialintelligence/09-minmax/#alpha","title":"Alpha","text":"<ul> <li>Alpha is the best value that the maximizer currently can guarantee at that level or above.</li> <li>It is the lower bound that a MAX node can be assigned.</li> <li>MAX node will only update the value of alpha if it finds a value greater than alpha.</li> <li>Starts at -\u221e.</li> </ul>"},{"location":"artificialintelligence/09-minmax/#beta","title":"Beta","text":"<ul> <li>Beta is the best value that the minimizer currently can guarantee at that level or above.</li> <li>It is the upper bound that a MIN node can be assigned.</li> <li>MIN node will only update the value of beta if it finds a value less than beta.</li> <li>Starts at +\u221e.</li> </ul>"},{"location":"artificialintelligence/animation/","title":"Deep learning","text":"<p>https://cascadeur.com/</p> <p>https://www.youtube.com/watch?v=14tNq-fqTmQ</p> <p>https://www.youtube.com/watch?v=wAbLsRymXe4</p> <p>https://github.com/sebastianstarke/AI4Animation</p>"},{"location":"artificialintelligence/assignments/","title":"Setup the repos","text":"<ol> <li>Read about Privacy and FERPA compliance here</li> <li>This one, for in class coding assignments. https://github.com/InfiniBrains/Awesome-GameDev-Resources</li> <li>MoBaGEn, for interactive assignments. https://github.com/InfiniBrains/mobagen</li> <li>Install <code>CLion</code>  (has <code>CMake</code>  embedded) or see #development-tools</li> <li>Install git and add the binaries to your PATH;</li> <li>Those repositories are updated constantly. Pay attention to syncing your repo frequently.</li> </ol>"},{"location":"artificialintelligence/assignments/#types-of-coding-assignments","title":"Types of coding assignments","text":"<p>There are two types of coding assignments:</p> <ol> <li>Formal: Automatic grading system with automated tests. Some tests might not be fully working for you, talk with me if it doesnt work for you. Or just submit the code on canvas and I will grade it manually. Those should solved using C++ ; It is done following this repo;</li> <li> <p>Interactive: For the interactive assignments you can choose whatever Game Engine you like, but I recommend you to use the framework I created for you: MoBaGEn. If you use a Game Engine or custom solution for that, you will have to create all debug interfaces to showcase and debug AI which includes, but it is not limited to:</p> <ul> <li>Draw vectors to show forces applied by the AI;</li> <li>Menus to change AI parameters;</li> </ul> </li> </ol> <p>Danger</p> <p>Under no circunstaces, you should make your algorithm solutions public. Be aware that I spend so much time creating them and it is hard to me to always create new assignments.</p>"},{"location":"artificialintelligence/assignments/#code-assignments","title":"Code assignments","text":"<p>Warning</p> <p>If you are a enrolled in a class that uses this material, you SHOULD use the institutional and internal git server to be FERPA compliant. If you want to use part of this assignments to build your portfolio I recommend you to use github and make only the webgl build public. If you are just worried about privacy concerns, you can use a private repo on github.</p> <ol> <li>Create an account on github.com or any <code>git</code> hosting on your preference;</li> <li> <p>Fork repos or duplicate the target repo on your account; </p> <ol> <li>If you want to make it count as part of your portfolio, fork the repo follow this;</li> <li>If you want to keep it private or be FERPA compliant, duplicate the repo following this. </li> </ol> </li> <li> <p>Add my user to your repo to it with <code>read</code> role. My userid is <code>tolstenko</code>(or your professor) on github, for other options, talk with me in class. Follow this;</p> </li> <li>Send me a message on canvas with the link to your repo;</li> </ol> <p>Private repo</p> <p>GitHub doesnt allow private fork of a public repo. If you want to receive my updates into your private repo you can do in 2 different ways: </p> <ol> <li>Create an empty repo. Clone it to your machine. In your GitKraken or any other git tool, add my repo as another origin. Merge from from mine to yours with flag <code>--allow-unrelated-histories</code> (search it)</li> <li>Create an empty repo and clone it to your machine. From time to time, download the files from my repo and replace the ones I might have updated/fixed.</li> </ol>"},{"location":"artificialintelligence/assignments/#recordings","title":"Recordings","text":"<p>In all interactive assignments, you will have to record a 5 minute video explaining your code. Use OBS or any software you prefer to record your screen while you explain your code. But for this one, just send me the video showing the repo and the repo invites sent to me.</p>"},{"location":"artificialintelligence/assignments/#development-tools","title":"Development tools","text":"<p>I will be using <code>CMake</code>  for the classes, but you can use whatever you want. Please read this to understand the <code>C++</code>  toolset.</p> <p>In this class, I am going to use <code>CLion</code>  as the <code>IDE</code>, because it has nice support for <code>CMake</code>  and automated tests.</p> <ul> <li>Download it here.</li> <li>If you are a student, you can get a free license here.</li> </ul> <p>If you want to use <code>Visual Studio</code> :simple-visualstudio:, be assured that you have the <code>C++ Desktop Development</code>  workload installed, more info this. And then go to <code>Individual Components</code> and install <code>CMake Tools for Windows</code> .</p> <p>Note</p> <p>If you use <code>Visual Studio</code> :simple-visualstudio:, you won't be able to use the automated testing system that comes with the assignments.</p> <p>[OPINION]: If you want to use a lightweight environment, don't use VS Code for C++ development. Period. It is not a good IDE for that. It is preferred to code via sublime, notepad, vim, or any other text editor and then compile your code via terminal, and debug via gdb, than using VS Code for C++ development.</p>"},{"location":"artificialintelligence/assignments/#opening-the-repos","title":"Opening the Repos","text":"<ol> <li>Fork and clone the repos. Make it private if you can;</li> <li>Open <code>CLion</code>  or yor preferred <code>IDE</code> with <code>CMake</code>  support;</li> <li>Open the <code>CMakeLists.txt</code> as project from the root of the repo;</li> <li>Wait for the setup to finish (it will download the dependencies automatically, such as <code>SDL</code>);</li> </ol> <p>For the interactive assignments, use this repo and the assignments are located in the <code>examples</code> folder.</p> <p>For the algorithmic assignments, use this repo and the assignments are located in the <code>docs/artificialintelligence/assignments</code> folder. I created some automated tests to help you debug your code and ensure 100% of correctness. To run them, follow the steps (only available though <code>CLion</code>  or terminal, not <code>Visual Studio</code> :simple-visualstudio:):</p> <ol> <li>Go to the executable drop down selection (top right, near the green <code>run</code>  or <code>debug</code>  button) and select the assignment you want to run. It will be something like <code>ai-XXX</code> where <code>XXX</code> is the name of the assignment;</li> <li>If you want to test your assignment against the automated inputs/outputs, select the <code>ai-XXX-test</code> build target. Here you should use the <code>build</code>  button, not the <code>run</code>  or <code>debug</code>  button. It will run the tests and show the results in the <code>Console</code>  tab;</li> </ol>"},{"location":"artificialintelligence/assignments/catchthecat/","title":"Catch the Cat","text":"<p>You are in charge of creating 2 agents that will be playing the game of Catch the Cat.</p>"},{"location":"artificialintelligence/assignments/catchthecat/#game-rules","title":"Game rules","text":"<p>The game is played on a NxN board where N is an odd number that follows the sequence of <code>1+4*x</code> with <code>x</code> starnig from <code>1</code>: <code>5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, ...</code>. The game starts with a cat in the center of the board, and it starts with some random blocks placed randomly.</p> <p>The game is played in turns, where each player can move the cat or a catcher. </p>"},{"location":"artificialintelligence/assignments/catchthecat/#board","title":"Board","text":"<p>The board position follows <code>{x, y}</code> notation.</p> <p>The center of the board is <code>{0,0}</code> and the board is a square with <code>N</code> cells on each side.</p> <p>The board is a pointy top hexagon with the first line aligned to the left. Here goes an example of a 5x5 board indexes:</p> <pre><code> /  \\ /  \\ /  \\ /  \\ /  \\\n|-2-2|-1-2| 0-2| 1-2| 2-2|\n \\  / \\  / \\  / \\  / \\  / \\\n  |-2-1|-1-1| 0-1| 1-1| 2-1|\n /  \\ /  \\ /  \\ /  \\ /  \\ /\n|-2 0|-1 0| 0 0| 1 0| 2 0|\n \\  / \\  / \\  / \\  / \\  / \\\n  |-2 1|-1 1| 0 1| 1 1| 2 1|\n /  \\ /  \\ /  \\ /  \\ /  \\ /\n|-2 2|-1 2| 0 2| 1 2| 2 2|\n \\  / \\  / \\  / \\  / \\  /\n</code></pre>"},{"location":"artificialintelligence/assignments/catchthecat/#moves","title":"Moves","text":"<p>The Cat moves in any of the 6 immediate neighbors, but it cannot move to a blocked cell.</p> <p>The Catcher moves by blocking a cell. A cell can be blocked only once each turn.</p>"},{"location":"artificialintelligence/assignments/catchthecat/#win-condition","title":"Win condition","text":"<ol> <li>If the cat is surrounded by blocked cells in all 6 directions, it cannot move and the catcher wins.</li> <li>If the cat reaches a border cell, it wins.</li> <li> <p>If the cat makes invalid moves, it loses. Invalid moves are:</p> <ul> <li>Move to a blocked cell;</li> <li>Move to a cell that is not a neighbor;</li> <li>Stay in the same cell;</li> </ul> </li> <li> <p>The catcher makes invalid moves, it loses. Invalid moves are:</p> <ul> <li>Block an already blocked cell;</li> <li>Block a cell outside the board;</li> <li>Block a cell where the cat is;</li> </ul> </li> </ol>"},{"location":"artificialintelligence/assignments/catchthecat/#competition","title":"Competition","text":"<p>All students enrolled in the competition will submit both agents. The agents will play against each other, and the winner will be the one that wins the most games. </p> <p>The points will be counted as how many moves each one does;</p> <p>If Cat Wins:</p> <ul> <li>CatPoints: SideSize * SideSize/2 - CatMoves - K*CpuCatTime;</li> <li>CatcherPoints: CatcherMoves - K*CpuCatcherTime;</li> </ul> <p>If Catcher Wins:</p> <ul> <li>CatPoints: CatMoves - K*CpuCatTime;</li> <li>CatcherPoints: SideSize * SideSize/2 - CatcherMoves - K*CpuCatherTime;</li> </ul>"},{"location":"artificialintelligence/assignments/catchthecat/#how-to-participate","title":"How to participate:","text":"<p>I will create an automation that will use your agents to play against each other.</p> <ol> <li>Place the interface below in a file called <code>IAgent.h</code> on the root of your repo;</li> <li>Agents are stateless. At every turn, the state of all classes everything will be reset.</li> <li>The classes should be named <code>Cat</code> and <code>Catcher</code>;</li> <li>The simulator will include <code>Cat.h</code> and <code>Catcher.h</code>, so you should have at least these two files;</li> <li>Both agents should inherit <code>IAgent.h</code> and include <code>#include \"IAgent.h\"</code>; </li> <li>All <code>.cpp</code> and <code>.h</code> files should be at the same directory level. Don't use subdirs; </li> <li>Your submission will be a zip containing only <code>.h</code> and <code>.cpp</code> files. </li> <li>Do not submit any file with a <code>main</code> function;</li> </ol> <p>The reasoning is: I will create an automation for:</p> <ol> <li>Receive your zip and version them for auditing purposes and diagnostics;</li> <li>Create a folder for your user if not created yet;</li> <li>Clear the folder and keep the executable;</li> <li>Unzip the contents of your submission into a folder with your username;</li> <li>Add a <code>main.cpp</code> for the simulator;</li> <li>Compile the whole folder into one executable named as your username. Only the last working subimission will be kept;</li> </ol> <p>It will generate <code>N</code> executables that will be managed and called via terminal to generate the final report with points;</p> <p>The report will be generated via another automation that will generate 100 initial states randomly. All agents from all students play against each other.</p> <pre><code>executables = fetchAllExecutables() \ninitialstates = generateRandomStates(100);\nforeach cat of executables{\n  foreach catcher of executables {\n    turnIsCat = true;\n    foreach state of initialstate {\n      while(nat have winner &amp;&amp; correct output){\n        if(turnIsCat)\n          state = cat(state)\n        else\n          state = catcher(state)\n        turnIsCat = !turnIsCat\n      }\n      generate partial report from current cat and catcher  \n    }\n  }\n}\ncompose final report of the run\n</code></pre>"},{"location":"artificialintelligence/assignments/catchthecat/#iagenth","title":"IAgent.h","text":"IAgent.h<pre><code>#pragma once\n#include &lt;vector&gt;\n#include &lt;utility&gt;\n\n// NO NOT CHANGE THIS FILE\nstruct IAgent {\npublic:\n    /**\n     * @brief the agent implementation. the center of the world is {0,0}, top left is {-sideSize/2, -sideSize/2} and the bottom right is {sideSize/2, sideSize/2}.\n     *\n     * @param world the world as a vector of booleans. true means there is a wall, false means there is no wall. The vector is the linearization of the matrix of the world.\n     * @param catPos the position of the cat in the world {x,y} relative to the center of the world.\n     * @param sideSize the side size of the world. it will be always a square that follows the sequence of 4*i+1: 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, ...\n     *\n     * @return the position to move to {x,y}. relative to the center of the world.\n     */\n    virtual std::pair&lt;int,int&gt; move(const std::vector&lt;bool&gt;&amp; world, std::pair&lt;int,int&gt; catPos, int sideSize ) = 0;\n};\n</code></pre>"},{"location":"artificialintelligence/assignments/flocking/","title":"Flocking agents behavior formal assignment","text":"<p>You are in charge of implementing some functions to make some AI agents flock together in a game. After finishing it, you will be one step further to render it in a game engine, and start making reactive NPCs and enemies. You will learn all the basic concepts needed to code and customize your own AI behaviors.</p> <p>You can code this assignment in any language and/or game engine you want. But I already crafted some boilerplates to maximize your efficiency. </p> <ul> <li>(Preferred) Formal and automatically tested: This current repo </li> <li>(Funnier) Interactive with SDL2: MoBaGEn</li> <li>(Hard-core) C++ with CMake: SDL2-CPM-CMake-Example or create your own project from scratch by yourself or follow my Naked SDL + CPM project.</li> <li>I don't recommend using Game Engines for this specific assignment. Historically, students fail on the implementation of the double buffering and the math operations. But if you are confident, go ahead.</li> </ul> <p>Notes on imprecision</p> <p>The automated tests of the formal assignment may differ somehow because of floating point imprecison, so don't worry much. If you cannot make it pass 100% of the tests, explain how you tried to solve it and what you think is wrong. I will evaluate your code based on your explanation.  If you find an issue on my formal description or on the tests, send a PR and I will give you extra points.</p>"},{"location":"artificialintelligence/assignments/flocking/#what-is-flocking","title":"What is flocking?","text":"<p>Flocking is a behavior that is observed in birds, fish and other animals that move in groups. It is a very simple behavior that can be implemented with a few lines of code. The idea is that each agent will try to move towards the center of mass of the group (cohesion), and will try to align its velocity with the average velocity of the group (AKA alignment). In addition, each agent will try to avoid collisions with other agents (AKA avoidance).</p> <p>Formal Notation Review</p> <ul> <li>\\( \\vec{F} \\) means a vector \\( F \\) that has components. In a 2 dimensional vector it will hold \\( F_x \\) and \\( F_y \\). For example, if \\( F_x = 1 \\) and \\( F_y = 3 \\), then \\( \\vec{F} = (1,3) \\)</li> <li>Simple math operations between vectors are done component-wise. For example, if \\( \\vec{F} = (1,1) \\) and \\( \\vec{G} = (2,2) \\), then \\( \\vec{F} + \\vec{G} = (3,3) \\)</li> <li>The notation \\( \\overrightarrow{P_{1}P_{2}} \\) means the vector that goes from \\( P_1 \\) to \\( P_2 \\). It is the same as \\( P_2-P_1 \\)</li> <li>The modulus notation means the length (magnitude) of the vector. \\( |\\vec{F}| = \\sqrt{F_x^2+F_y^2} \\) For example, if \\( \\vec{F} = (1,1) \\), then \\( |\\vec{F}| = \\sqrt{2} \\)</li> <li>The hat ^ notation means the normalized vector(magnitude is 1) of the vector. \\( \\hat{F} = \\frac{\\vec{F}}{|\\vec{F}|} \\) For example, if \\( \\vec{F} = (1,1) \\), then \\( \\hat{F} = (\\frac{1}{\\sqrt{2}},\\frac{1}{\\sqrt{2}}) \\)</li> <li>The hat notation over 2 points means the normalized vector that goes from the first point to the second point. \\( \\widehat{P_1P_2} = \\frac{\\overrightarrow{P_1P_2}}{|\\overrightarrow{P_1P_2}|} \\) For example, if \\( P_1 = (0,0) \\) and \\( P_2 = (1,1) \\), then \\( \\widehat{P_1P_2} = (\\frac{1}{\\sqrt{2}},\\frac{1}{\\sqrt{2}}) \\)</li> <li>The sum \\( \\sum \\) notation means the sum of all elements in the list going from <code>0</code> to <code>n-1</code>. Ex. \\( \\sum_{i=0}^{n-1} \\vec{V_i} = \\vec{V_0} + \\vec{V_1} + \\vec{V_2} + ... + \\vec{V_{n-1}} \\)</li> </ul> <p>It is your job to implement those 3 behaviors following the ruleset below:</p>"},{"location":"artificialintelligence/assignments/flocking/#cohesion","title":"Cohesion","text":"<p>Apply a force towards the center of mass of the group.</p> <ol> <li>The \\( n \\) neighbors of an agent are all the other agents that are within a certain radius \\( r_c \\)( <code>&lt;</code> operation ) of the agent. It doesn't include the agent itself;</li> <li>Compute the location of the center of mass of the group (\\( P_{CM} \\));</li> <li>Compute the force that will move the agent towards the center of mass(\\( \\overrightarrow{F_c} \\)); The farther the agent is from the center of mass, the force increases linearly up to the limit of the cohesion radius \\( r_c \\).</li> </ol> <p></p> \\[  P_{CM} = \\frac{\\sum_{i=0}^{n-1} P_i}{n} \\] \\[ \\overrightarrow{F_{c}} = \\begin{cases}     \\frac{ \\overrightarrow{P_{agent}P_{CM}} }{r_c} &amp; \\text{if } |\\overrightarrow{P_{agent}P_{CM}}| \\leq r_c \\\\     0 &amp; \\text{if } |\\overrightarrow{P_{agent}P_{CM}}| &gt; r_c \\end{cases} \\] <p>Tip</p> <p>Note that the maximum magnitude of \\( \\overrightarrow{F_c} \\) is 1. Inclusive. This value can be multiplied by a constant \\( K_c \\) to increase or decrease the cohesion force to looks more appealing.</p> Cohesion Example <p></p>"},{"location":"artificialintelligence/assignments/flocking/#separation","title":"Separation","text":"<p>It will move the agent away from other agents when they get too close.</p> <ol> <li>The \\( n \\) neighbors of an agent are all the other agents that are within the separation radius \\( r_s \\) of the agent;</li> <li>If the distance to a neighbor is less than the separation radius, then the agent will move away from it inversely proportionally to the distance between them.</li> <li>Accumulate the forces that will move the agent away from each neighbor (\\( \\overrightarrow{F_{s}} \\)). And then, clamp the force to a maximum value of \\( F_{Smax} \\).</li> </ol> <p> </p> \\[ \\overrightarrow{F_s} = \\sum_{i=0}^{n-1} \\begin{cases}       \\frac{\\widehat{P_aP_i}}{|\\overrightarrow{P_aP_i}|} &amp; \\text{if } 0 &lt; |\\overrightarrow{P_aP_i}| \\leq r_s \\\\       0 &amp; \\text{if } |\\overrightarrow{P_aP_i}| = 0  \\lor |\\overrightarrow{P_aP_i}| &gt; r_s  \\end{cases} \\] <p>Tip</p> <p>Here you can see that if we have more than one neighbor and one of them is way too close, the force will be very high and make the influence of the other neighbors irrelevant. This is the expected behavior.</p> <p>The force will go near infinite when the distance between the agent and the \\( n \\) neighbor is 0. To avoid this, after accumulating all the influences from every neighbor, the force will be clamped to a maximum magnitude of \\( F_{Smax} \\).</p> \\[ \\overrightarrow{F_{s}} = \\begin{cases}      \\overrightarrow{F_s} &amp; \\text{if } |\\overrightarrow{F_s}| \\leq F_{Smax} \\\\     \\widehat{F_s} \\cdot F_{Smax} &amp; \\text{if } |\\overrightarrow{F_s}| &gt; F_{Smax} \\end{cases} \\] <p>Tip</p> <ul> <li>You can implement those two math together, but it is better to isolate in two steps to make it easier to understand and debug.</li> <li>This is not an averaged force like the cohesion force, it is a sum of forces. So, the maximum magnitude of the force can be higher than 1.</li> </ul> Separation Example <p></p>"},{"location":"artificialintelligence/assignments/flocking/#alignment","title":"Alignment","text":"<p>It is the force that will align the velocity of the agent with the average velocity of the group.</p> <ol> <li>The \\( n \\) neighbors of an agent are all the agents that are within the alignment radius \\( r_a \\) of the agent, including itself;</li> <li>Compute the average velocity of the group (\\( \\overrightarrow{V_{avg}} \\));</li> <li>Compute the force that will move the agent towards the average velocity (\\( \\overrightarrow{F_{a}} \\));</li> </ol> <p></p> \\[ \\overrightarrow{V_{avg}} = \\frac{\\sum_{i=0}^{n-1} \\vec{V_i}}{n} \\] Alignment Example <p></p>"},{"location":"artificialintelligence/assignments/flocking/#behavior-composition","title":"Behavior composition","text":"<p>The force composition is made by a weighted sum of the influences of those 3 behaviors. This is the way we are going to work, this is not the only way to do it, nor the more correct. It is just a way to do it. </p> <ul> <li>\\(  \\vec{F} = K_c \\cdot \\overrightarrow{F_c} + K_s \\cdot \\overrightarrow{F_s} + K_a \\cdot \\overrightarrow{F_a}  \\) <code>This is a weighted sum!</code></li> <li>\\(  \\overrightarrow{V_{new}} = \\overrightarrow{V_{cur}} + \\vec{F} \\cdot \\Delta t  \\) <code>This is a simplification!</code></li> <li>\\(  P_{new} = P_{cur}+\\overrightarrow{V_{new}} \\cdot \\Delta t  \\) <code>This is an approximation!</code></li> </ul> <p>Warning</p> <p>A more precise way for representing the new position would be to use full equations of motion. But given timestep is usually very small and it even squared, it is acceptable to ignore it. But here they are anyway, just dont use them in this assignment:</p> <ul> <li>\\(  \\overrightarrow{V_{new}} = \\overrightarrow{V_{cur}}+\\frac{\\overrightarrow{F}}{m} \\cdot \\Delta t  \\)</li> <li>\\(  P_{new} = P_{cur}+\\overrightarrow{V_{cur}} \\cdot \\Delta t + \\frac{\\vec{F}}{m} \\cdot \\frac{\\Delta t^2}{2}  \\)</li> </ul> <p>Where:</p> <ul> <li>\\( \\overrightarrow{F} \\) is the force applied to the agent;</li> <li>\\( \\overrightarrow{V} \\) is the velocity of the agent;</li> <li>\\( P \\) is the position of the agent;</li> <li>\\( m \\) is the mass of the agent, here it is always 1;</li> <li>\\( \\Delta t \\) is the time frame (1/FPS);</li> <li>\\( cur \\) is the current value of the variable;</li> <li>\\( new \\) is the new value of the variable to be used in the next frame.</li> </ul> <p>The \\( \\overrightarrow{V_{new}} \\) and \\( P_{new} \\) are the ones that will be used in the next frame and you will have to print to the console at the end of every single frame.</p> <p>Note</p> <ul> <li>For simplicity, we are going to assume that the mass of all agents is 1.</li> <li>In a real game simulation, it would be nice to apply some friction to the velocity of the agent to make it stop eventually or just clamp it to prevent the velocity get too high. But, for simplicity, we are going to ignore it.</li> </ul> Combined behavior examples <p>Alignment + Cohesion:</p> <p></p> <p>Separation + Cohesion:</p> <p></p> <p>Separation + Alignment:</p> <p></p> <p>All 3:</p> <p></p>"},{"location":"artificialintelligence/assignments/flocking/#input","title":"Input","text":"<p>The input consists in a list of parameters followed by a list of agents. The parameters are:</p> <ul> <li>\\( r_c \\) - Cohesion radius</li> <li>\\( r_s \\) - Separation radius</li> <li>\\( F_{Smax} \\) - Maximum separation force</li> <li>\\( r_a \\) - Alignment radius</li> <li>\\( K_c \\) - Cohesion constant</li> <li>\\( K_s \\) - Separation constant</li> <li>\\( K_a \\) - Alignment constant</li> <li>\\( N \\) - Number of agents</li> </ul> <p>Every agent is represented by 4 values in the same line, separated by a space:</p> <ul> <li>\\( x \\) - X coordinate</li> <li>\\( y \\) - Y coordinate</li> <li>\\( vx \\) - X velocity</li> <li>\\( vy \\) - Y velocity</li> </ul> <p>After reading the agent's data, the program should read the time frame (\\( \\Delta t \\)), simulate the agents and then output the new position of the agents in the same sequence and format it was read. The program should keep reading the time frame and simulating the agents until the end of the input.</p> <p>Data Types</p> <p>All values are double precision floating point numbers to improve consistency between different languages.</p>"},{"location":"artificialintelligence/assignments/flocking/#input-example","title":"Input Example","text":"<p>In this example we are going to test only the cohesion behavior. The input is composed by the parameters and 2 agents. </p> <pre><code>1.000 0.000 0.000 0.000 1.000 0.000 0.000 2\n0.000 0.500 0.000 0.000\n0.000 -0.500 0.000 0.000\n0.125\n</code></pre>"},{"location":"artificialintelligence/assignments/flocking/#output","title":"Output","text":"<p>The expected output is the position and velocity for each agent after the simulation step using the time frame. After printing each simulation step, the program should wait for the next time frame and then simulate the next step. All values should have exactly 3 decimal places and should be rounded to the nearest.</p> <pre><code>0.000 0.484 0.000 -0.125\n0.000 -0.484 0.000 0.125\n</code></pre>"},{"location":"artificialintelligence/assignments/flocking/#grading","title":"Grading","text":"<p>10 points total:</p> <ul> <li>3 Points \u2013 by following standards;</li> <li>2 Points \u2013 properly submitted in Canvas;</li> <li>5 Points \u2013 passed on test cases;</li> </ul>"},{"location":"artificialintelligence/assignments/genai/","title":"Stable Diffusion","text":""},{"location":"artificialintelligence/assignments/genai/#introduction","title":"Introduction","text":"<p>The steps to understand GenAI are as follows:</p> <ol> <li>Artificial Neurons, types of neurons, and activation functions</li> <li>Networks of Neurons, topology, and training</li> <li>Stable Diffusion</li> </ol>"},{"location":"artificialintelligence/assignments/genai/#tldr","title":"TLDR;","text":"<ol> <li>Install the latest Python. Add it to the environment PATH. [Windows:] Install directly to C drive and select the 3.10.6 version of python, install for all users;</li> <li>Download latest release from Automatic1111 or clone the repository. Clone/Download it to a subfolder on C drive. Dont use your personal folder.;</li> <li>Unzip the release. Run the <code>webui</code> bash file [Windows:] <code>webui.bat</code>;</li> <li>Select a bunch of the images that you are willing to train the network with;</li> <li>Go to <code>train</code> tab and create a tag for your embeddings;</li> <li>Use your tag to generate a new image;</li> </ol> <p>Extras:</p> <ol> <li>Go to Hugging face and download 2 Stable Diffusion models. They should be compatible (ex. both should be v2.1 or 1.5).;</li> <li>Go to checkpoin merger, and merge two or more models.</li> </ol>"},{"location":"artificialintelligence/assignments/genai/#artificial-neurons","title":"Artificial Neurons","text":"<pre><code>graph LR\n    I1[Input1] --&gt; |Weight1| N[Neuron]\n    I2[Input2] --&gt; |Weight2| N[Neuron]\n    N --&gt; |Activation| O[Output]</code></pre> <p>Artificial neurons are the basic building blocks of neural networks and all the other Generative AI algorithms. Neuron networks are composed by:</p> <ul> <li>Inputs: The inputs are the data that the network will process. They are the data that the network will use to make decisions. In the case of the neural networks, the inputs are the data that will be processed by the neurons.</li> <li>Weights: The weights are the parameters that the network will learn. They are the parameters that the network will use to make decisions. In the case of the neural networks, the weights are the parameters that will be learned by the neurons.</li> <li>Functions: summing, activation and bias.<ul> <li>Summing: The summing function is the function that will sum the inputs and the weights.</li> <li>Activation: The activation function is the function that will decide if the neuron will fire or not or how it will fire or propagate.</li> <li>Bias: The bias is a weight that will be added to the summing function.</li> </ul> </li> <li>Output: The output is the result of the neuron. It can be used to feed another neuron or to be the final result of the network.</li> </ul> <p>Depending on how the neuron activates, which math operator it uses to sum the inputs and the weights, and how it propagates the output, the neuron can be classified as: Linear, Binary, Sigmoid, Tanh, and many others that follow math functions to combine data and propagate the output.</p>"},{"location":"artificialintelligence/assignments/genai/#topologies","title":"Topologies","text":"<p>Material</p>"},{"location":"artificialintelligence/assignments/genai/#generative-ai","title":"Generative AI","text":"<p>Generative AI is the new trend in AI. It is the field of AI that is focused on creating new data from existing data using neural networks and other algorithms. Here we will focus on the Stable Diffusion ones.</p> <p>Stable diffusion pipeline:</p> <pre><code>graph TD\n  Start --&gt; GausiannNoise\n  Start --&gt; prompt\n  subgraph CLIP\n    direction LR\n    tokenizer --&gt; TokenToEmbedding[Token to Embeddings]\n  end\n  prompt[Prompt] --&gt; CLIP\n  CLIP --&gt; embeddings[Text Embeddings]\n  embeddings --&gt; unet[Text Conditioned 'U-Net']\n  Latents --&gt; |Loop N times| unet\n  unet --&gt; CoditionedLatents[Conditioned Latents]\n  CoditionedLatents --&gt; Scheduler[Scheduler 'Reconstruct'\\nto add noise]\n  Scheduler --&gt; Latents\n  GausiannNoise[Gaussian Noise] --&gt; Latents\n  CoditionedLatents --&gt; VAE[Variational\\nAutoencoder\\nDecoder]\n  VAE --&gt; |Image|Output</code></pre>"},{"location":"artificialintelligence/assignments/life/","title":"Game of Life","text":"<p>You are applying for an internship position at Valvule Corp, and they want to test your abilities to manage states. You were tasked to code the Conway's Game of Life.</p> <p>The game consists in a C x L matrix of cells (Columns and Lines), where each cell can be either alive or dead. The game is played in turns, where each turn the state of the cells are updated according to the following rules:</p> <ol> <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li> <li>Any live cell with two or three live neighbours lives on to the next generation.</li> <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li> <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li> </ol> <p></p> <p>The map is continuous on every direction, so the cells on the edges have the cells on the opposite edge as neighbors. It is effectively a toroidal surface.</p> <p></p>"},{"location":"artificialintelligence/assignments/life/#input","title":"Input","text":"<p>The first line of the input are three numbers, C, L and T, the number of columns, lines and turns, respectively. The next L lines are the initial state of the cells, where each line has C characters, either <code>.</code> for dead cells or <code>#</code> for alive cells.</p> <pre><code>5 5 4\n.#...\n..#..\n###..\n.....\n.....\n</code></pre>"},{"location":"artificialintelligence/assignments/life/#output","title":"Output","text":"<p>The output should be the state of the cells after T turns, in the same format as the input.</p> <pre><code>.....\n..#..\n...#.\n.###.\n.....\n</code></pre>"},{"location":"artificialintelligence/assignments/life/#references","title":"References","text":"<ul> <li>Animated Example</li> <li>Conway's Game of Life Wiki</li> <li>Wikipedia</li> </ul>"},{"location":"artificialintelligence/assignments/maze/","title":"Maze generation via Depth First Search","text":"<p>You are in charge of implementing a new maze generator for a procedurally generated game. The game is a 2D top-down game, where every level is composed by squared rooms blocked by walls. The rooms are generated by a maze generator, and the walls can be removed to create paths.</p> <p>There are many ways to implement a maze generation and one of the most common is the Depth First Search algorithm combined with a Random Walk. The algorithm is simple and can be implemented in a recursive or interactive way. The suggested algorithm is as follows:</p> <ol> <li>All walls are up;</li> <li>Add the top left cell to the stack;</li> <li>While the stack is not empty:<ol> <li>If the stack top cell has visitable neighbor(s):<ol> <li>Mark the top cell as visited;</li> <li>List visitable neighbors;</li> <li>Choose a neighbor (see below);</li> <li>Remove the wall between the cell and the neighbor;</li> <li>Add the neighbor to the stack;</li> </ol> </li> <li>Else:<ol> <li>Remove the top cell from the stack, backtracking;</li> </ol> </li> </ol> </li> </ol> Simulation <p>If you simulate the algorithm visually, the result would be something similar to the following</p> <p></p>"},{"location":"artificialintelligence/assignments/maze/#random-number-generation","title":"Random Number Generation","text":"<p>In order to be consistent with all languages and random functions the pseudo random number generation should follow the following sequence of 100 numbers:</p> <pre><code>[72, 99, 56, 34, 43, 62, 31, 4, 70, 22, 6, 65, 96, 71, 29, 9, 98, 41, 90, 7, 30, 3, 97, 49, 63, 88, 47, 82, 91, 54, 74, 2, 86, 14, 58, 35, 89, 11, 10, 60, 28, 21, 52, 50, 55, 69, 76, 94, 23, 66, 15, 57, 44, 18, 67, 5, 24, 33, 77, 53, 51, 59, 20, 42, 80, 61, 1, 0, 38, 64, 45, 92, 46, 79, 93, 95, 37, 40, 83, 13, 12, 78, 75, 73, 84, 81, 8, 32, 27, 19, 87, 85, 16, 25, 17, 68, 26, 39, 48, 36];\n</code></pre> <p>Every call to the random function should return the current number the index is pointing to, and then increment the index. If the index is greater than 99, it should be reset to 0.</p>"},{"location":"artificialintelligence/assignments/maze/#direction-decision-making","title":"Direction decision-making","text":"<p>In order to give consistency on how to decide the direction of the next cell, the following procedure should be followed:</p> <ol> <li>List all visitable neighbors of the current cell;</li> <li>Sort the list of visitable neighbors by clockwise order, starting from the top neighbor: UP, RIGHT, DOWN, LEFT;</li> <li>If there is one visitable, do not call random, just return the first neighbor found;</li> <li>If there are two or more visitable neighbors, call random and return the neighbor at the index of the random number modulo the number of visitable neighbors. <code>vec[i]%visitableCount</code></li> </ol> <p>Data Structure</p> <p>Read the Data Structure page to understand how the maze could be represented in memory.</p>"},{"location":"artificialintelligence/assignments/maze/#input","title":"Input","text":"<p>The input is a single line with three <code>32 bits</code> unsigned integer numbers, <code>C</code>, <code>L</code> and <code>I</code>, where <code>C</code> and <code>L</code> are the number of columns and lines of the maze, respectively, and <code>I</code> is the index of the first random number to be used&gt; <code>I</code> can varies from <code>0</code> to <code>99</code>.</p> <pre><code>2 2 0\n</code></pre> <p>In this case, our map will have <code>2</code> columns, <code>2</code> lines and the first random number to be used is the first one, <code>72</code> because it is pointed by the index <code>0</code>.</p>"},{"location":"artificialintelligence/assignments/maze/#output","title":"Output","text":"<p>Every line is a combination of underscore <code>_</code>, pipe <code>|</code> and  empty <code></code> characters. The <code>_</code> character represents a horizontal wall and the <code>|</code> character represents a vertical wall.</p> <p>The initial state of the 2 x 2 map is:</p> <pre><code> _ _  \n|_|_| \n|_|_| \n</code></pre> <p>In order to interactively solve this, we will add <code>(0,0)</code> to the queue.</p> <p>The neighbors of the current top (0,0) are RIGHT and DOWN, <code>(0,1)</code> and <code>(1,0)</code> respectively.</p> <p>Following the clockwise order, the sorted neighbor list will be <code>[(0,1), (1,0)]</code>.</p> <p>We have more than one neighbor, so we call random. The current random index is <code>0</code>, so the random number is <code>72</code> and we increment the index.</p> <p>The random number is <code>72</code> and the number of neighbors is <code>2</code>, so the index of the neighbor to be chosen is <code>72 % 2 = 0</code>, so we choose the neighbor <code>(0,1)</code>, the RIGHT one.</p> <p>The wall between <code>(0,0)</code> and <code>(0,1)</code> is removed, and <code>(0,1)</code> is added to the queue. Now it holds <code>[(0,0), (0,1)]</code>. The map is now:</p> <pre><code> _ _  \n|_ _| \n|_|_| \n</code></pre> <p>Now the only neighbor of (0,1) is DOWN, (1,1). So no need to call random, we just choose the only neighbor.</p> <p>The wall between <code>(0,1)</code> and <code>(1,1)</code> is removed, and <code>(1,1)</code> is added to the queue. Now it holds <code>[(0,0), (0,1), (1,1)]</code>. The map is now:</p> <pre><code> _ _  \n|_  | \n|_|_| \n</code></pre> <p>Now the only neighbor of <code>(1,1)</code> is LEFT, <code>(1,0)</code>. So no need to call random, we just choose the only neighbor.</p> <p>The wall between (1,1) and (1,0) is removed, and (1,0) is added to the queue. Now it holds <code>[(0,0), (0,1), (1,1), (1,0)]</code>. The map is now:</p> <pre><code> _ _  \n|_  | \n|_ _| \n</code></pre> <p>Now, the current top of the queue is <code>(1,0)</code> and there isn't any neighbor to be visited, so we remove the current top <code>(1,0)</code> from the queue and backtrack. The queue is now <code>[(0,0), (0,1), (1,1)]</code>.</p> <p>The current top is <code>(1,1)</code> and there isn't any neighbor to be visited, so we remove <code>(1,1)</code> from the queue and backtrack. The queue is now <code>[(0,0), (0,1)]</code>.</p> <p>The current top is <code>(0,1)</code> and there isn't any neighbor to be visited, so we remove <code>(0,1)</code> from the queue and backtrack. The queue is now <code>[(0,0)]</code>.</p> <p>The current top is <code>(0,0)</code> and there isn't any neighbor to be visited, so we remove <code>(0,0)</code> from the queue and backtrack. The queue is now empty and we finish priting the map state. The final map is:</p> <pre><code> _ _  \n|_  | \n|_ _| \n</code></pre> <p>And this the only one that should be printed. No intermediary maps should be printed.</p>"},{"location":"artificialintelligence/assignments/maze/#example-1","title":"Example 1","text":""},{"location":"artificialintelligence/assignments/maze/#input-1","title":"Input 1","text":"<pre><code>3 3 0\n</code></pre>"},{"location":"artificialintelligence/assignments/maze/#output-1","title":"Output 1","text":"<pre><code> _ _ _  \n|_  | | \n|  _| | \n|_ _ _| \n</code></pre>"},{"location":"artificialintelligence/assignments/maze/#example-2","title":"Example 2","text":""},{"location":"artificialintelligence/assignments/maze/#input-2","title":"Input 2","text":"<pre><code>3 3 1\n</code></pre>"},{"location":"artificialintelligence/assignments/maze/#output2","title":"Output2","text":"<pre><code> _ _ _  \n| |_  | \n|_ _  | \n|_ _ _| \n</code></pre>"},{"location":"artificialintelligence/assignments/maze/maze-datastructure/","title":"Maze Data structures","text":"<p>Mazes are a pretty common type of scenario for game development, and they can be represented in many ways. In this document, we will explore some of the most common data structures used to represent mazes.</p> <p></p>"},{"location":"artificialintelligence/assignments/maze/maze-datastructure/#grid-of-rooms","title":"Grid of Rooms","text":"<p>The most common way to represent a maze is a grid of rooms. It usually can be a squared grid, or rarely, a hexagonal grid. Here I will talk about the squared grid, but you can adapt the concepts to a hexagonal grid too. </p> <p>Let's simplify the maze to a grid of rooms where each room can have walls in any of the four directions (north, south, east, west) and the data the room should store.</p> <pre><code>Example: of a 3x3 grid maze\n _ _ _\n|_|_|_|\n|_|_|_|\n|_|_|_| \n</code></pre>"},{"location":"artificialintelligence/assignments/maze/maze-datastructure/#data-structure","title":"Data Structure","text":"<p>The abstract idea of the room could be something like this:</p> <pre><code>struct RoomInfo {\n    // data of the room\n};\n\nstruct Room {\n    RoomInfo data;\n    bool northWall;\n    bool southWall;\n    bool eastWall;\n    bool westWall;\n};\n</code></pre> <p>We can store the rooms into a simple 2D array:</p> <pre><code>Room maze[3][3];\n</code></pre> <p>But 2D arrays are a bit worse in terms of cache locality compared to a 1D array, so we can flatten the 2D array into a 1D array:</p> <pre><code>Room maze[3*3];\nRoom&amp; getRoom(int x, int y) {\n    return maze[y*3 + x];\n}\n</code></pre> <p>To further improve the cache locality, applying concepts of Data Oriented Programming we could create a registry for our maze and isolate the room data from the walls:</p> <pre><code>struct RoomInfo {\n    // data of the room\n};\nstruct RoomWall {\n    bool north;\n    bool south;\n    bool east;\n    bool west;\n};\nstruct RoomRegistry {\n    int width, height;\n    vector&lt;RoomInfo&gt; data;\n    vector&lt;RoomWall&gt; walls;\n    RoomInfo&amp; getRoomInfo(int x, int y) {\n        return data[y*width + x];\n    }\n    RoomWall&amp; getRoomWall(int x, int y) {\n        return walls[y*width + x];\n    }\n};\n</code></pre> <p>If you have a sparse maze, you can use a hash map to store the rooms, and be a bit more memory efficient:</p> <pre><code>struct RoomRegistry {\n    unordered_map&lt;pair&lt;int, int&gt;, RoomInfo&gt; data;\n    unordered_map&lt;pair&lt;int, int&gt;, RoomWall&gt; walls;\n    RoomInfo&amp; getRoomInfo(int x, int y) {\n        return data[{x, y}];\n    }\n    RoomWall&amp; getRoomWall(int x, int y) {\n        return walls[{x, y}];\n    }\n};\n</code></pre> <p>Or you can use pointers for the neighbors, if the pointer is null, it means there is no neighbor in that direction. But it will use more memory (pointers usually uses 8 bytes), will be less cache efficient (data information would be scattered in the heap), and you will have extra effort to query rooms at position (X,Y). </p> <pre><code>struct Room {\n    RoomInfo data;\n    Room* north; \n    Room* south;\n    Room* east;\n    Room* west;\n};\n</code></pre> <p>Let's assume we don't have a sparse maze, so we will use the 2D array representation.</p> <p>Now I will try to reduce the amount of memory used by the walls. Consider the current state of the RoomWall struct:</p> <pre><code>struct RoomWall {\n    bool north; // uses 1 byte\n    bool south; // uses 1 byte\n    bool east; // uses 1 byte\n    bool west; // uses 1 byte\n};\n</code></pre> <p>Can we make it more memory efficient? Yes, we can use bitfields to store the walls in a single byte:</p> <pre><code>struct RoomWall {\n    uint8_t walls; // one byte\n    bool hasNorthWall() const {\n        return walls &amp; 1;\n    }\n    bool hasSouthWall() const {\n        return walls &amp; 2;\n    }\n    bool hasEastWall() const {\n        return walls &amp; 4;\n    }\n    bool hasWestWall() const {\n        return walls &amp; 8;\n    }\n    void setNorthWall(bool value) {\n        if (value) walls |= 1;\n        else walls &amp;= ~1;\n    }\n    void setSouthWall(bool value) {\n        if (value) walls |= 2;\n        else walls &amp;= ~2;\n    }\n    void setEastWall(bool value) {\n        if (value) walls |= 4;\n        else walls &amp;= ~4;\n    }\n    void setWestWall(bool value) {\n        if (value) walls |= 8;\n        else walls &amp;= ~8;\n    }\n}; // one byte\n</code></pre> <p>Or we can simplify it by just using data layout to do the same thing but with less code, and left the compiler to do the work:</p> <pre><code>struct RoomWall {\n    bool north: 1; // uses 1 bit\n    bool south: 1; // uses 1 bit\n    bool east: 1;  // uses 1 bit\n    bool west: 1;  // uses 1 bit\n}; // uses 1 byte because byte is the smallest unit of addressable memory\n</code></pre> <p>There is another issue with that representation: two adjacent rooms will have duplicated walls. Ex.: the north wall of a given room is the same as the south wall of the room above it. </p> <p>To fix that issue, we will need to not use the abstraction of RoomWall anymore and store the walls directly in the RoomRegistry struct:</p> <pre><code>struct RoomRegistry {\n    int width, height;\n    vector&lt;RoomInfo&gt; data;\n    vector&lt;bool&gt; walls; \n};\n</code></pre> <p>Before going deep into how can we address the indexes for the walls, you need to know <code>vector&lt;bool&gt;</code> are not common vectors where each element returns a reference to a bool. Instead, it returns a proxy object that behaves like a bool. This is because the standard <code>vector&lt;bool&gt;</code> is a specialization of the vector class that is optimized for space efficiency. </p> <pre><code>// Example of how vector&lt;bool&gt; works\ntemplate&lt;typename T&gt;\nstuct vector&lt;bool&gt; {\n    // other controlling fields and methods\n    uint_t* data;\n    bool operator[](size_t index) {\n        return data[index / 8] &amp; (1 &lt;&lt; (index % 8));\n    }\n};\n</code></pre> <p></p> <p>Now we have a way to address bits directly using <code>vector&lt;bool&gt;</code>, but you need to remember that for an X x Y grid, we will need X+1 vertical walls and Y+1 horizontal walls. Check the following example below for a 2x2 grid:</p> <pre><code> _ _\n|_|_|\n|_|_| \n</code></pre> <p>So we will need 3 vertical walls and 3 horizontal walls.</p> <p>Now, we reached to the next issue. How can we address the walls in the <code>std::vector&lt;bool&gt;</code>? We will need to change our point of view from addressing Rooms at position (X,Y) to WallIntersections. Every intersection will be 2 bits to represent vertical and horizontal walls.</p> <pre><code> _ _\n|_|_|\n|_|_| \n</code></pre> <p>In the previous example of a 2x2 grid, we will have the following intersections:</p> y x vertical horizontal 0 0 false true 0 1 false true 0 2 false false 1 0 true true 1 1 true true 1 2 true false 2 0 true true 2 1 true true 2 2 true false <p>So that grid is represented as an array of 18 bits like this:</p> <pre><code>01 01 00 11 11 10 11 11 10\n</code></pre> <p>So if we address it via index,</p> index value y x orientation 0 0 0 0 vertical 1 1 0 0 horizontal 2 0 0 1 vertical 3 1 0 1 horizontal 4 0 0 2 vertical 5 0 0 2 horizontal 6 1 1 0 vertical 7 1 1 0 horizontal 8 1 1 1 vertical 9 1 1 1 horizontal 10 1 1 2 vertical 11 0 1 2 horizontal 12 1 2 0 vertical 13 1 2 0 horizontal 14 1 2 1 vertical 15 1 2 1 horizontal 16 1 2 2 vertical 17 0 2 2 horizontal <p>Now all we need to do is to create functions to get and set the walls for a specific room at position (X,Y). In this world reference, we will consider the top-left corner as the origin (0,0) and the bottom-right corner as (width-1, height-1).</p> <pre><code>struct RoomRegistry {\n    int width, height;\n    vector&lt;RoomInfo&gt; data;\n    vector&lt;bool&gt; walls; \n    bool getNorthWall(int x, int y) {\n        return walls[2*(y*(width+1)+x)+1];\n    }\n    bool getSouthWall(int x, int y) {\n        return walls[2*((y+1)*(width+1) + x)+1];\n    }\n    bool getWestWall(int x, int y) {\n        return walls[2*((y+1)*(width+1)+x)];\n    }\n    bool getEastWall(int x, int y) {\n        return walls[2*((y+1)*(width+1)+x+1)];\n    }\n    // set functions\n};\n</code></pre>"},{"location":"artificialintelligence/assignments/maze/maze-datastructure/#conclusion","title":"Conclusion","text":"<p>Now we are using the most memory efficient way to represent a dense maze. We learned matrix flattening, bit index addressing, data layout, and discovered why <code>vector&lt;bool&gt;</code> is a bit different from other vectors.</p>"},{"location":"artificialintelligence/assignments/rng/","title":"Pseudo Random Number Generation","text":"<p>You are a game developer in charge to create a fast an reliable random number generator for a procedural content generation system. The requirements are:</p> <ul> <li>Do not rely on external libraries;</li> <li>Dont need to be cryptographically secure;</li> <li>Be blazing fast;</li> <li>Fully reproducible via automated tests if used the same seed;</li> <li>Use exactly 32 bits as seed;</li> <li>Be able to generate a number between a given range, both inclusive.</li> </ul> <p>So you remembered a strange professor talking about the xorshift algorithm and decided it is good enough for your use case. And with some small research, you found the Marsaglia \"Xorshift RNGs\". You decided to implement it and test it.</p>"},{"location":"artificialintelligence/assignments/rng/#xorshift","title":"XorShift","text":"<p>The xorshift is a family of pseudo random number generators created by George Marsaglia. The xorshift is a very simple algorithm that is very fast and have a good statistical quality. It is a very good choice for games and simulations.</p> <p><code>xorshift</code> is the process of shifting the binary value of a number and then <code>xor</code>'ing that binary to the original value to create a new value. </p> <p><code>value = value xor (value shift by number)</code></p> <p>The shift operators can be to the left <code>&lt;&lt;</code> or to the right <code>&gt;&gt;</code>. When shifted to the left, it is the same thing as multiplying by 2 at the power of the number. When shifted to the right, it is the same thing as dividing.</p> <p>Note</p> <p>The value of a &lt;&lt; b is the unique value congruent to \\(a * 2^{b}\\) modulo \\( 2^{N} \\) where \\( N \\) is the number of bits in the return type (that is, bitwise left shift is performed and the bits that get shifted out of the destination type are discarded).</p> <p>The value of \\( a &gt;&gt; b \\) is \\( a/2^{b} \\) rounded down (in other words, right shift on signed a is arithmetic right shift).</p> <p>The <code>xorshift</code> algorithm from Marsaglia is a combination of 3 <code>xorshifts</code>, the first one is the seed (or the last random number generated), and the next ones are the result of the previous <code>xorshift</code>. The steps are: </p> <ol> <li><code>xorshift</code> the value by <code>13</code> bits to the left;</li> <li><code>xorshift</code> the value by <code>17</code> bits to the right;</li> <li><code>xorshift</code> the value by <code>5</code> bits to the left;</li> </ol> <p>At the end of this 3 <code>xorshifts</code>, the current state of the value is your current random number.</p> <p>In order to clamp a random number the value between two numbers (max and min), you should follow this idea:</p> <p><code>value = min + (random % (max - min + 1))</code></p>"},{"location":"artificialintelligence/assignments/rng/#input","title":"Input","text":"<p>Receives the seed <code>S</code>, the number <code>N</code> of random numbers to be generated and the range <code>R1</code> and <code>R2</code> of the numbers should be in, there is no guarantee the range numbers are in order. The range numbers are both inclusive. <code>S</code> and <code>N</code> are both <code>32 bits</code> unsigned integers and <code>R1</code> and <code>R2</code> are both <code>32 bits</code> signed integers.</p> <pre><code>1 1 0 99\n</code></pre>"},{"location":"artificialintelligence/assignments/rng/#output","title":"Output","text":"<p>The list of numbers to be generated, one per line. In this case, it would be only one and the random number should be clamped to be between 0 and 99.</p> <pre><code>seed in decimal:       1\nseed in binary:        0b00000000000000000000000000000001 \n\nseed:                  0b00000000000000000000000000000001\nseed &lt;&lt; 13:            0b00000000000000000010000000000000\nseed xor (seed &lt;&lt; 13): 0b00000000000000000010000000000001\n\nseed:                  0b00000000000000000010000000000001\nseed &gt;&gt; 17:            0b00000000000000000000000000000000\nseed xor (seed &gt;&gt; 17): 0b00000000000000000010000000000001\n\nseed:                  0b00000000000000000010000000000001\nseed &lt;&lt; 5:             0b00000000000001000000000000100000\nseed xor (seed &lt;&lt; 5):  0b00000000000001000010000000100001\n\nThe final result is 0b00000000000001000010000000100001 which is 270369 in decimal.\n</code></pre> <p>Now in order to clamp it to be between 0 and 99, we do:</p> <pre><code>value = min + (random % (max - min + 1))\nvalue = 0 + (270369 % (99 - 0 + 1))\nvalue = 0 + (270369 % 100)\nvalue = 0 + 69\nvalue = 69\n</code></pre> <p>So this output would be:</p> <pre><code>69\n</code></pre>"},{"location":"artificialintelligence/readings/spatial-quantization/","title":"Space quantization","text":"<p>Space quantization is a way to sample continuous space, and it can to be used in in many fields, such as Artificial Intelligence, Physics, Rendering, and more. Here we are going to focus primarily Spatial Quantization for AI, because it is the base for pathfinding, line of sight, field of view, and many other techniques.</p> <p>Some of the most common techniques for space quantization are: grids, voxels, graphs, quadtrees, octrees, KD-trees, BSP, Spatial Hashing and more. Another notable techniques are line of sight(or field of view), map flooding, caching, and movement zones.</p>"},{"location":"artificialintelligence/readings/spatial-quantization/#grids","title":"Grids","text":"<p>Grids are the most common technique for space quantization. It is a very simple technique, but it is very powerful. It consists in dividing the space in a grid of cells, and then we can use the cell coordinates to represent the space. The most common grid is the square grid, but we can use hexagonal and triangular grids, you might find some irregular shapes useful to exploit the space conformation better.</p>"},{"location":"artificialintelligence/readings/spatial-quantization/#square-grid","title":"Square Grid","text":"<p>The square grid is a regular grid, where the cells are squares. It is very simple to implement and understand.</p> <p>There are some ways to store data for squared grids. Arguably you could 2D arrays, arrays of arrays or vector of vectors, but depending on the way you implement it, it can hurt the performance. Example: if you use an array of arrays or vector of vectors, where every entry from de outer array is a pointer to the inner array, you will have a lot of cache misses, because the inner arrays are not contiguous in memory. </p>"},{"location":"artificialintelligence/readings/spatial-quantization/#notes-on-cache-locality","title":"Notes on cache locality","text":"<p>So in order do increase data locality for squared grids, you can use a single array, and then use the following formula to calculate the index of the cell. We call this strategy matrix flattening.</p> <pre><code>int arrray[width * height]; // 1D array with the total size of the grid\nint index = x + y * width; // index of the cell at x,y\n</code></pre> <p>There is a catch here, given we usually represent points as X and Y coordinates, we need to be careful with the order of the coordinates. While you are iterating over all the matrix, you need to iterate over the Y coordinate first, and then the X coordinate. This is because the Y coordinate is the one that changes the most, so it is better to have it in the inner loop. By doing that, you will have better cache locality and effectively the index will be sequential.</p> <pre><code>vector&lt;YourStructure&gt; data; // data is filled with some data elsewhere\nfor(int y = 0; y &lt; height; y++) {\n    for(int x = 0; x &lt; width; x++) {\n        // do something with the cell at index x,y\n        data[y * width + x] = yourstrucure;\n        // it is the same as: data[y][x] = yourstructure;\n    }\n}\n</code></pre>"},{"location":"artificialintelligence/readings/spatial-quantization/#quantization-and-dequantization-of-square-grids","title":"Quantization and dequantization of square grids","text":"<p>If your world is based on floats, you can use the square by using the floor function or just cast to integer type, because the default behavior of casting from float to integer is to floor it. Example: In the case of a quantization resolution of size of 1.0f, everything between 0 and 1 will be in the cell (0,0), everything between 1 and 2 will be in the cell (1,0), and so on.</p> <pre><code>Vector2int quantize(Vector2f position, float resolution) {\n    return Vector2int((int)floor(position.x/resolution), (int)floor(position.y/resolution));\n}\n</code></pre> <p>If you need to get the center of the cell in the world coordinates following the quantization resolution, you can use the following code.</p> <pre><code>Vector2f dequantize(Vector2int index, float resolution) {\n    return Vector2f((float)index.x * resolution + resolution/2.0f, (float)index.y * resolution + resolution/2.0f);\n}\n</code></pre> <p>If you need to get the corners of the cell following the quantization resolution, you can use the following code.</p> <pre><code>Rectangle2f cell_bounds(Vector2int index, float resolution) {\n    return {index.x * resolution, index.y * resolution, (index.x+1) * resolution, (index.y+1) * resolution};\n}\n</code></pre> <p>If you need to get the neighbors of a cell, you can use the following code.</p> <pre><code>std::vector&lt;Vector2int&gt; get_neighbors(Vector2int index) {\n    return {{index.x-1, index.y}, {index.x, index.y-1},\n            {index.x+1, index.y}, {index.x, index.y+1}};\n}\n</code></pre> <p>We already understood the idea of matrix flattening to improve efficiency, we can use it to represent a maze. But in a maze, we have walls to </p> <p>Imagine that you are willing to be as memory efficient and more cache friendly as possible. You can use a single array to store the maze, and you can use the following formula to convert from matrix indexes to the index of the cell in the array.</p> <pre><code>## Hexagonal Grid\n\nHexagonal grid is an extension of a square grid, but the cells are hexagons. It feels nicer to human eyes because we have more equally distant neighbors. If used as subtract for pathfinding, it can be more efficient because the path can be more straight.\n\nIt can be implemented as single dimension array, but you need to be careful with shift that happens in different odd or even indexes. You can use the following formula to calculate the index of the cell. In this world quantization can be in 4 conformations, depending on the rotation of the hexagon and the alignment of the first cell.\n\n1. Point pointy top hexagon with first line aligned to the left:\n``` text\n  / \\ / \\ / \\ \n | A | B | C |\n  \\ / \\ / \\ / \\\n   | D | E | F |\n  / \\ / \\ / \\ /\n | G | H | I |\n  \\ / \\ / \\ / \n</code></pre> <ol> <li>Point pointy top hexagon with first line aligned to the right <pre><code>    / \\ / \\ / \\\n   | A | B | C |\n  / \\ / \\ / \\ / \n | D | E | F |\n  \\ / \\ / \\ / \\\n   | G | H | I |\n    \\ / \\ / \\ /\n</code></pre></li> <li>Flat top hexagon with first column aligned to the top: <pre><code> __    __\n/A \\__/C \\\n\\__/B \\__/\n/D \\__/F \\\n\\__/E \\__/\n/G \\__/I \\\n\\__/H \\__/\n   \\__/\n</code></pre></li> <li>Flat top hexagon with first column aligned to the bottom: <pre><code>     __\n  __/B \\__ \n /A \\__/C \\\n \\__/E \\__/\n /D \\__/F \\\n \\__/H \\__/\n /G \\__/I \\\n \\__/  \\__/\n</code></pre></li> </ol>"},{"location":"artificialintelligence/readings/spatial-quantization/#quantization-and-dequantization-of-hexagonal-grids","title":"Quantization and dequantization of hexagonal grids","text":"<p>For simplicity, we are going to use the first conformation, where the first line is aligned to the left, and the hexagons are pointy top. The quantization is done by using the following formula.</p> <pre><code>// I am assuming that the hexagon is pointy top, and the first line is aligned to the left\n// I am also assuming that the hexagon is centered in the cell, and the top left corner is at (0,0), \n// y axis is pointing down and x axis is pointing right\n// this dont work for all the cases, but it is a good approximation for locations near the center of the hexagon\n/*\n  / \\ / \\ / \\ \n | A | B | C |\n  \\ / \\ / \\ / \\\n   | D | E | F |\n  / \\ / \\ / \\ /\n | G | H | I |\n  \\ / \\ / \\ /\n */\nVector2int quantize(Vector2f position, float hexagonSide) {\n    int y = (position.y - hexagonSide)/(hexagonSide * 2);\n    int x = y%2==0 ?\n      (position.x - hexagonSide * sqrt3over2) / (hexagonSide * sqrt3over2 * 2) : // even lines\n      (position.x - hexagonSide * sqrt3over2 * 2)/(hexagonSide * sqrt3over2 * 2) // odd lines\n    return Vector2int(x, y);\n}\nVector2f dequantize(Vector2int index, float hexagonSide) {\n    return Vector2f(index.y%2==0 ? \n      hexagonSide * sqrt3over2 + index.x * hexagonSide * sqrt3over2 * 2 : // even lines\n      hexagonSide * sqrt3over2 * 2 + index.x * hexagonSide * sqrt3over2 * 2, // odd lines\n      hexagonSide + index.y * hexagonSide * 2);\n}\n</code></pre> <p>You will have to figure out the formula for the other conformations. Or send a merge request to this repository adding more information.</p>"},{"location":"artificialintelligence/readings/spatial-quantization/#voxels-and-grid-3d","title":"Voxels and Grid 3D","text":"<p>Grids in 3D works the same way as in 2D, but you need to use 3D vectors/arrays or voxel volumes. Most concepts applies here. If you want to expand this section, send a merge request.</p>"},{"location":"artificialintelligence/readings/spatial-quantization/#quadtree","title":"Quadtree","text":"<p>Quadtree is a tree data structure where each node has 4 children. It is used to partition a space in 2D. It is used to optimize collision detection, pathfinding, and other algorithms that need to iterate over a space. It is also used to optimize rendering, because you can render only the visible part of the space.</p>"},{"location":"artificialintelligence/readings/spatial-quantization/#quadtree-implementation","title":"Quadtree implementation","text":"<p>Quadtree is a recursive data structure, so you can implement it using a recursive data structure. The following code is a simple implementation of a quadtree.</p> <pre><code>// this code is not tested, but it should work. It is just an example and send a merge request if you find any errors.\n// node\ntemplate&lt;class T&gt;\nstruct DataAtPosition {\n    Vector2f center;\n    T data;\n};\n\ntemplate&lt;class T&gt;\nstruct QuadtreeNode {\n    Rectangle2f bounds;\n    std::vector&lt;DataAtPosition&lt;T&gt;&gt; data;\n    std::vector&lt;QuadtreeNode&lt;T&gt;&gt; children;\n};\n\n// insert\ntemplate&lt;class T&gt;\nvoid insert(QuadtreeNode&lt;T&gt;&amp; root, DataAtPosition&lt;T&gt; data) {\n    if (root.children.empty()) {\n        root.data.push_back(data);\n        if (root.data.size() &gt; 4) {\n            root.children.resize(4);\n            for (int i = 0; i &lt; 4; ++i) {\n                root.children[i].bounds = root.bounds;\n            }\n            root.children[0].bounds.max.x = root.bounds.center().x; // top left\n            root.children[0].bounds.max.y = root.bounds.center().y; // top left\n            root.children[1].bounds.min.x = root.bounds.center().x; // top right\n            root.children[1].bounds.max.y = root.bounds.center().y; // top right\n            root.children[2].bounds.min.x = root.bounds.center().x; // bottom right\n            root.children[2].bounds.min.y = root.bounds.center().y; // bottom right\n            root.children[3].bounds.max.x = root.bounds.center().x; // bottom left\n            root.children[3].bounds.min.y = root.bounds.center().y; // bottom left\n            for (auto&amp; data : root.data) {\n                insert(root, data);\n            }\n            root.data.clear();\n        }\n    } else {\n        for (auto&amp; child : root.children) {\n            if (child.bounds.contains(data.center)) {\n                insert(child, data);\n                break;\n            }\n        }\n    }\n}\n\n// query\ntemplate&lt;class T&gt;\nvoid query(QuadtreeNode&lt;T&gt;&amp; root, Rectangle2f bounds, std::vector&lt;DataAtPosition&lt;T&gt;&gt;&amp; result) {\n    if (root.bounds.intersects(bounds)) {\n        for (auto&amp; data : root.data) {\n            if (bounds.contains(data.center)) {\n                result.push_back(data);\n            }\n        }\n        for (auto&amp; child : root.children) {\n            query(child, bounds, result);\n        }\n    }\n}\n</code></pre>"},{"location":"artificialintelligence/readings/spatial-quantization/#quadtree-optimization","title":"Quadtree optimization","text":"<p>The quadtree is a recursive data structure, so it is not cache friendly. You can optimize it by using a flat array instead of a recursive data structure. </p>"},{"location":"artificialintelligence/readings/spatial-quantization/#octree","title":"Octree","text":"<p>Section WiP. Send a merge request if you want to contribute.</p>"},{"location":"artificialintelligence/readings/spatial-quantization/#kd-tree","title":"KD-Tree","text":"<p>KD-Trees are a tree data structure that are used to partition a spaces in any dimension (2D, 3D, 4D, etc). They are used to optimize collision detection(Physics), pathfinding(AI), and other algorithms that need to iterate over a space. Also they are also used to optimize rendering, because you can render only the visible part of the space. Pay attention that KD-Trees are not the same as Quadtree and Octrees, even if they are similar.</p> <p>In KD-trees, every node defines an orthogonal partition plan that alternate every deepening level of the tree. The partition plan is defined by a dimension, a value. The dimension is the axis that is used to partition the space, and the value is the position of the partition plan. The partition plan is orthogonal to the axis, so it is a line in 2D, a plane in 3D, and a hyperplane in 4D.</p>"},{"location":"artificialintelligence/readings/spatial-quantization/#bsp-tree","title":"BSP Tree","text":"<p>BSP inherits almost all characteristics of KD-Trees, but it is not a tree data structure, it is a graph data structure. The main difference is to instead of being orthogonal you define the plane of the section. The plane is defined by a point and a normal. The normal is the direction of the plane, and the point is a point in the plane. </p>"},{"location":"artificialintelligence/readings/spatial-quantization/#spatial-hashing","title":"Spatial Hashing","text":"<p>Spatial hashing is a data structure that is used to partition a space. It consists in a hash table where the keys are the positions of the elements, and the values are the elements in buckets. It is very fast to insert and query elements. But it is not good for iteration, because it is not cache friendly.</p> <p>Usually when you want to use a spatial hashing, you create hash functions for the bucket keys, there is no limit on how you do that, but you have to keep in mind that the hash functions have to be fast and have to be good for the distribution of the elements. Here is a good example of a hashing function for 2D vectors.</p> <pre><code>namespace std {\n    template&lt;&gt;\n    struct hash&lt;Vector2f&gt; {\n        // I am assuming size_t is 64 bits and the float is 32 bits\n        size_t operator()(const Vector2f&amp; v) const {\n            // get the bits of the float in a integer\n            uint64_t x = *(uint64_t*)&amp;v.x;\n            uint64_t y = *(uint64_t*)&amp;v.y;\n            // mix the bits of the floats\n            uint64_t hash = x | (y &lt;&lt; 32);\n            return hash;\n        }\n    };\n}\n</code></pre> <p>Pay attention that the hashing function above generates collisions, so you have to use a data structure that can handle collisions. You will use datastructures like <code>unordered_map&lt;Vector2D, unordered_set&lt;DATATYPE&gt;&gt;</code> or <code>unordered_map&lt;Vector2D, vector&lt;DATATYPE&gt;&gt;</code>. The first one is better for insertion and query, but it is not cache friendly. </p> <p>To avoid having one bucket per every possible position, you have to setup properly the dimension of the bucket, a good sugestion is to alwoys floor the position and have buckets dimension of 1.0f. That would be good enough for most cases.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/07/28/the-problem-with-ai-trolley-dilemma/","title":"The problem with AI Trolley dilemma","text":"<p>The premise about the AI trolley dilemma is invalid. So the whole discussion about who should the car kill in a fatal situation. Let me explain why.</p> <p>Yesterday I attended a conference about Ethics and AI, and the speaker mentioned the trolley dilemma. The question asked was \"What should the self-driving car do?\" and kind of forced us to take sides on the matter. </p> <ul> <li>Kill the passengers; </li> <li>Kill the pedestrians;</li> </ul> <p>This is the same as the trolley problem but one difference. AI don't have morals, it will follow what is programmed without any hesitation. So the question is not what the AI should do, but what the programmer codes it to do.</p> <p>Well, the whole premise on asking what should do \"kill this, or that\" is totally wrong. As a programmer myself, and knowing the limits of the system, I would never code a system to make such a decision. If the car is in a situation that it cannot break in time with the current limited vision, it should go slower. So no decision ever has to be made.</p> <p>Let's do some math for you to see how this could be easily solved.</p>"},{"location":"blog/2023/07/28/the-problem-with-ai-trolley-dilemma/#the-math","title":"The math","text":"<p>Let's use the standard formula for the distance needed to stop a car.</p> \\[S = v*t + \\frac{v^2}{2*u*g}\\] <p>Where:</p> <ul> <li>\\(S\\) is the distance needed to stop;</li> <li>\\(v\\) is the speed of the car;</li> <li>\\(t\\) is the reaction time;</li> <li>\\(v*t\\) is the distance traveled during the reaction time;</li> <li>\\(u\\) is the tire friction factor;</li> <li>\\(g\\) is the gravity acceleration;</li> <li>\\(\\frac{v^2}{2*u*g}\\) is the distance traveled during the breaking time;</li> </ul> <p>If the car is going at \\(100 km/h\\) (\\(27.7 m/s\\), \\(62.14 mi/h\\)) and the reaction time of the AI is relatively fast, let's say \\(0.2 s\\), so the distance traveled to a complete sage stop would be:</p> \\[S = 27.7 * 0.2 + \\frac{27.7^2}{2*0.2*9.8} = 5.54 + 38.5 = 44.04 m\\] <p>Which means that the car would need \\(44.04 m\\) to stop. So if the car cannot clearly see a distance greater than that, it should slow down. And this is the reason the self-driving AIs are said to be slow drivers.</p>"},{"location":"blog/2023/09/09/setup-sdl-with-cmake-and-cpm/","title":"Setup SDL with CMake and CPM","text":"<p>In my opinion, the minimum toolset needed to give you the ability to start creating games cross-platform from scratch is the combination of the following tools:</p> <ol> <li> <p>CLion - Cross-platform C++ IDE with embedded CMake support</p> <ul> <li>Apply for a student license;</li> <li>Download and install it;</li> <li>For Macs, you will need extra tools: <code>XCode</code> and the command line tools. You can install them by running <code>xcode-select --install</code> on the terminal;</li> </ul> </li> <li> <p>(Required for Windows and if you don't use CLion) Git - Version control system</p> <ul> <li>Download only if you are on Windows and don't forget to tick the option to add it to your environment path (CMake will be calling it). On Mac and Linux, you can install via your package manager (ex. brew on Mac e apt on Ubuntu).</li> </ul> </li> </ol> <p>After installing the tool(s) above, you can follow the steps below to create a new project:</p>"},{"location":"blog/2023/09/09/setup-sdl-with-cmake-and-cpm/#clion-project","title":"CLion project","text":"<ol> <li>Open CLion and select <code>New Project</code>:</li> </ol> <ol> <li>Create a new project and select <code>C++ Executable</code> and <code>C++XX</code> as the language standard, where <code>XX</code> is the latest one available for you. Use the default compiler and toolchain:</li> </ol> <ol> <li>Start coding:</li> </ol> <p>You might note the existence of a <code>CMakeLists.txt</code> file on the left side of the IDE on the <code>Project</code> tab. This file is used by CMake to generate the build files for your project. Now, we are going to set up everything you need to use <code>SDL3</code>. If you open the <code>CMakeLists.txt</code> file, you will see something similar to the following:</p> <pre><code># cmake_minimum_required(VERSION &lt;specify CMake version here&gt;)\ncmake_minimum_required(VERSION 3.26)\n# project(&lt;name&gt; [&lt;language-name&gt;...])\nproject(MyGame)\n# set(CMAKE_CXX_STANDARD &lt;specify C++ standard here&gt;)\nset(CMAKE_CXX_STANDARD 17)\n# add_executable(&lt;name&gt; file.cpp file2.cpp ...)\nadd_executable(MyGame main.cpp)\n</code></pre>"},{"location":"blog/2023/09/09/setup-sdl-with-cmake-and-cpm/#cpm-c-package-manager","title":"CPM - C++ Package Manager","text":"<p>CPM is a setup-free C++ package manager. It is a single CMake script that you can add to your project and use to download and install packages from GitHub. It is a great tool to manage dependencies and many C++ projects use it.</p> <p>You can make this as simple as adding the following lines to your <code>CMakeLists.txt</code> file (after the <code>project</code> command):</p> <pre><code>set(CPM_DOWNLOAD_VERSION 0.38.2)\n\nif(CPM_SOURCE_CACHE)\n  set(CPM_DOWNLOAD_LOCATION \"${CPM_SOURCE_CACHE}/cpm/CPM_${CPM_DOWNLOAD_VERSION}.cmake\")\nelseif(DEFINED ENV{CPM_SOURCE_CACHE})\n  set(CPM_DOWNLOAD_LOCATION \"$ENV{CPM_SOURCE_CACHE}/cpm/CPM_${CPM_DOWNLOAD_VERSION}.cmake\")\nelse()\n  set(CPM_DOWNLOAD_LOCATION \"${CMAKE_BINARY_DIR}/cmake/CPM_${CPM_DOWNLOAD_VERSION}.cmake\")\nendif()\n\n# Expand relative path. This is important if the provided path contains a tilde (~)\nget_filename_component(CPM_DOWNLOAD_LOCATION ${CPM_DOWNLOAD_LOCATION} ABSOLUTE)\n\nfunction(download_cpm)\n  message(STATUS \"Downloading CPM.cmake to ${CPM_DOWNLOAD_LOCATION}\")\n  file(DOWNLOAD\n       https://github.com/cpm-cmake/CPM.cmake/releases/download/v${CPM_DOWNLOAD_VERSION}/CPM.cmake\n       ${CPM_DOWNLOAD_LOCATION}\n  )\nendfunction()\n\nif(NOT (EXISTS ${CPM_DOWNLOAD_LOCATION}))\n  download_cpm()\nelse()\n  # resume download if it previously failed\n  file(READ ${CPM_DOWNLOAD_LOCATION} check)\n  if(\"${check}\" STREQUAL \"\")\n    download_cpm()\n  endif()\n  unset(check)\nendif()\n\ninclude(${CPM_DOWNLOAD_LOCATION})\n</code></pre> <p>This will download the <code>CPM.cmake</code> file to your project, and you can use it to download and install packages from GitHub. </p> <p>To check if <code>CPM</code> is being automatically downloaded, you can go to <code>CLion</code> and click on <code>CMake</code>  icon on the left side of the <code>Project</code>. It is the first one on the bottom. And then click the <code>Reload CMake Project</code>  button:</p> <p></p> <p>Now that you have <code>CPM</code>, you can start adding packages to your project. Here are some ways of doing that:</p> <pre><code># A git package from a given uri with a version\nCPMAddPackage(\"uri@version\")\n# A git package from a given uri with a git tag or commit hash\nCPMAddPackage(\"uri#tag\")\n# A git package with both version and tag provided\nCPMAddPackage(\"uri@version#tag\")\n# examples:\n# CPMAddPackage(\"gh:fmtlib/fmt#7.1.3\")\n# CPMAddPackage(\"gh:nlohmann/json@3.10.5\")\n# CPMAddPackage(\"gh:catchorg/Catch2@3.2.1\")\n# An archive package from a given url. The version is inferred\n# CPMAddPackage(\"https://example.com/my-package-1.2.3.zip\")\n# An archive package from a given url with an MD5 hash provided\n# CPMAddPackage(\"https://example.com/my-package-1.2.3.zip#MD5=68e20f674a48be38d60e129f600faf7d\")\n# An archive package from a given url. The version is explicitly given\n# CPMAddPackage(\"https://example.com/my-package.zip@1.2.3\")\n\n# A complex package with options:\nCPMAddPackage(\n        NAME          # The unique name of the dependency (should be the exported target's name)\n        VERSION       # The minimum version of the dependency (optional, defaults to 0)\n        OPTIONS       # Configuration options passed to the dependency (optional)\n        DOWNLOAD_ONLY # If set, the project is downloaded, but not configured (optional)\n        GITHUB_REPOSITORY # The GitHub repository (owner/repo) to download from (optional)\n        GIT_TAG       # The git tag or commit hash to download (optional)\n        [...]         # Origin parameters forwarded to FetchContent_Declare\n)\n</code></pre>"},{"location":"blog/2023/09/09/setup-sdl-with-cmake-and-cpm/#sdl","title":"SDL","text":"<p>In order to generate <code>SDL</code> libraries and link them corretly in our executable, we have to state the lib should be in the same folder as the executable, so you have to add this to your <code>CMakeLists.txt</code> file:</p> <pre><code># Set all outputs to be at the same location\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})\nlink_directories(${CMAKE_BINARY_DIR})\n</code></pre> <p>Now that we have <code>CPM</code> set up, we can use it to download and install <code>SDL</code>. If you want to try the stable version <code>v2</code>, add the following lines to your <code>CMakeLists.txt</code> file and refresh CMake:</p> <pre><code>CPMAddPackage(\n  NAME SDL2\n  GITHUB_REPOSITORY libsdl-org/SDL\n  GIT_TAG release-2.28.3 \n  VERSION 2.28.3\n)\n</code></pre> <p>If you don't have <code>git</code> installed on your machine, you might want to use the <code>ZIP</code> version(it is even faster to download but slower to switch versions). In this case, you can use the following lines and refresh CMake:</p> <pre><code>CPMAddPackage(\n  NAME SDL2\n  URL \"https://github.com/libsdl-org/SDL/archive/refs/tags/release-2.28.3.zip\"\n  VERSION 2.28.3\n)\n</code></pre> <p>If you want to try the bleeding edge version <code>v3</code>, add the following lines to your <code>CMakeLists.txt</code> file at your own risk:</p> <pre><code>CPMAddPackage(\n  NAME SDL3\n  GITHUB_REPOSITORY libsdl-org/SDL\n  GIT_TAG main\n)\n</code></pre> <p>Now that we have <code>SDL</code> set up, we should link it to our project. In order to do that, we can add the following lines after the line <code>add_executable</code> to our <code>CMakeLists.txt</code> file and refresh CMake:</p> <pre><code>target_link_libraries(MyGame SDL2::SDL2)\n# change SDL2 to SDL3 if you are using the bleeding edge version\n#target_link_libraries(MyGame SDL2::SDL2)\n</code></pre> <p>And this will make <code>SDL</code> available to our project. Now we can start coding. Let's create a simple window:</p> <pre><code>#define SDL_MAIN_HANDLED true\n#include &lt;SDL.h&gt;\n\nint main(int argc, char** argv) {\n    SDL_Init(SDL_INIT_VIDEO);\n\n    SDL_Window* window = SDL_CreateWindow(\n            \"SDL2Test\",\n            SDL_WINDOWPOS_UNDEFINED,\n            SDL_WINDOWPOS_UNDEFINED,\n            640,\n            480,\n            0\n    );\n\n    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);\n\n    SDL_Event e;\n    bool quit = false;\n    while (!quit){\n        while (SDL_PollEvent(&amp;e)){\n            if (e.type == SDL_QUIT){\n                quit = true;\n            }\n        }\n\n        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);\n        SDL_RenderClear(renderer);\n        SDL_RenderPresent(renderer);\n        SDL_Delay(0);\n    }\n\n    SDL_DestroyWindow(window);\n    SDL_Quit();\n\n    return 0;\n}\n</code></pre> <p>If you feel that you want to test the bleeding-edge version, you can use this code instead:</p> <pre><code>#define SDL_MAIN_HANDLED true\n#include &lt;SDL.h&gt;\n\nint main(int argc, char* argv[]) {\n    SDL_Init(SDL_INIT_VIDEO);\n\n    SDL_Window *window = SDL_CreateWindow(\n            \"MyGame\",\n            640,\n            480,\n            0\n    );\n\n    SDL_Renderer* renderer = SDL_CreateRenderer(window, nullptr, SDL_RENDERER_ACCELERATED);\n    SDL_Event e;\n    bool quit = false;\n\n    while (!quit) {\n        while (SDL_PollEvent(&amp;e)) {\n            if (e.type == SDL_EVENT_QUIT) {\n                quit = true;\n            }\n        }\n        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);\n        SDL_RenderClear(renderer);\n        SDL_RenderPresent(renderer);\n        SDL_Delay(0);\n    }\n\n    SDL_DestroyWindow(window);\n    SDL_Quit();\n\n    return 0;\n}\n</code></pre> <p>Now you have a way to code games with <code>SDL</code> in a way that is cross-platform, and easy to setup.</p> <p>If you hit <code>Run</code> or <code>Debug</code> on <code>CLion</code>, you will see a window like this:</p> <p></p> <p>and then:</p> <p></p> <p>I hope it works for you. If you have any problems, please let me know on Discord or via GitHub issues.</p>"},{"location":"blog/2023/08/30/ferpa-consent/","title":"FERPA Consent","text":"<p>FERPA (The Family Educational Rights and Privacy Act) is a federal law protecting the confidentiality of student records. It restricts others from accessing or discussing your educational records without your consent. Here we are going to discuss how it applies to the courses I teach and what are the benefits on sharing your work publicly if you want.</p> <p>FERPA consent form</p> <p>Read more about the reasoning and rationale below.</p> <p>Note</p> <p>This a modified version from this original.</p> <p>In a typical class, your homework (and other information delineating your academic performance) would not be visible to the public. Indeed, the FERPA law requires that you have the right to privacy in this regard. This is one of the main reasons for the existence of so many \"walled gardens\" for courseware, such as Autolab, Blackboard, CanvasLMS and Piazza, which keep all student work hidden behind passwords.</p> <p>An essential component of the educational experience in new media arts, however, is learning how to participate in the \"Grand Conversation\" all around us, by becoming more effective culture operators. We cannot do this in the safe space of a Canvas module. Our work is strengthened and sharpened in the forge of public scrutiny: in this case, the agora of the Internet.</p> <p>Sometimes students are afraid to publish something because it is of poor quality. They think that they will receive embarrassing, negative critiques. In fact, negative critique is quite rare. The most common thing that happens when one creates an artwork of poor quality, is that it is simply ignored. Being ignored - this, not being shunned or derided - this is the fate of mediocre work.</p> <p>On the other hand, if something is truly great is published - and great projects can happen, and have happened, even in an introductory class like this one - there is the chance that it may be circulated widely on the Internet. Every year that I have taught, a handful of the students' projects get blogged and receive as many as 50000 views in a week. It cannot be emphasized that this can be an absolutely transformative experience for students, that cannot be obtained without taking the risk to work publicly. Students get jobs and build careers on the basis of such success.</p> <p>That said, there are also plenty of reasons why you may wish to work anonymously, when you work online. Perhaps you are concerned about stalkers or harassment. Perhaps you wish to address themes in your work which might not meet with the approval of your parents or future employers. These are valid considerations, in which case, we advise using an anonymous identity on Github. On our course repository, your work will be indexed by a public-facing name, generally your first name. If you would prefer something else, please inform the professor.</p>"},{"location":"blog/2023/08/30/ferpa-consent/#ferpa-consent-form","title":"Ferpa Consent Form","text":"<p>Fill this form if you want to share your work publicly. If you don't fill this form, your work should be private:</p> <p>FERPA consent form</p>"},{"location":"blog/2024/01/29/differences-between-map-vs-unordered_map/","title":"Differences between map vs unordered_map","text":"<p>Both <code>std::map</code> and <code>std::unordered_map</code> are associative containers that store key-value pairs, let's have a deep dive into the differences between them.</p> <p></p>"},{"location":"blog/2024/01/29/differences-between-map-vs-unordered_map/#underlying-data-structure","title":"Underlying Data Structure:","text":"<ul> <li><code>std::map</code>: Implements a balanced binary search tree:<ul> <li>Usually a red-black tree, but it is defined by the STL implementation provided by your compiler;</li> <li>Ensures that elements are always sorted, which allows for efficient range queries and ordered traversal;</li> </ul> </li> <li> <p><code>std::unordered_map</code>: Implements a hash table.</p> <ul> <li>The elements are not sorted and are stored in buckets based on the hash value of the keys.</li> </ul> </li> <li> <p>On a <code>map</code>, if the tree become too deep, it can have performance issues, because it is O(lg(N)) for almost all functions. The jumps between nodes pointers might not be cache friendly.</p> </li> <li>On an <code>unordered_map</code>, the keys are stored as hashes and might have collisions, if it does collide to be stored on the same bucket, the search inside it is linear. Given the size of the bucket is usually small, this search is usually fast. </li> </ul>"},{"location":"blog/2024/01/29/differences-between-map-vs-unordered_map/#complexity","title":"Complexity:","text":"<p>On a <code>map</code>, when you query, you will pay the price for navigating a tree until you find the element you are searching for. While on a <code>unordered_map</code> you pay the price for the hashing function you use and when it have colision, and pay the price to find an element in a vector that is the bucket.</p> <ul> <li><code>map</code>: query(key) -&gt; navigate tree(might be not cache friendly) -&gt; your value;</li> <li><code>unordered_map</code>: query(key) -&gt; hash the key(can be costly) -&gt; find the bucket -&gt; linear search in all elements inside the bucket(cache friendly)</li> </ul>"},{"location":"blog/2024/01/29/differences-between-map-vs-unordered_map/#algorithm-analysis","title":"Algorithm analysis:","text":"<p>Evaluate the cost of:</p> <ul> <li><code>map</code>: <ol> <li>How many node hops; </li> <li>How many key comparisons; </li> <li>Tree indexing can fit in the cache the whole time;</li> </ol> </li> <li><code>unordered_map</code>:<ol> <li>How many CPU cycles the hashing function uses; </li> <li>How frequent collisions happens; </li> <li>How many elements you will have in the bucket on average?</li> </ol> </li> </ul> <p>Example:</p> <p>Assume you have \\(1024\\) elements, a balanced tree can potentially reach 10 levels deep. \\(\\log_{2}(1024) = 10\\) .</p> <p>In a tree search we will fetch content of pointers <code>10</code> times and make <code>10</code> key comparisons until we reach the leaves;</p> <p>If the key is just a pair of <code>int32_t</code>, you can easily implement a hash function that concatenates the bits of one into the another and have a <code>uint64_t</code> value as the key. This <code>shift</code> operation followed by <code>xor</code> is really cheap, but still have a constant cost. If your key is anything more complex, you might face a performance penalty. In this case, the cost here will be <code>2</code> basic CPU operations;</p> <p>After paying the cost of hashing your key, you will have to fetch the content of pointer <code>1</code> time to receive the address of an array of elements which is the bucket. Hopefully you just have one element inside it, if not, you will have to iterate inside the bucket array.</p> <p>In a hashing-bucket approach you pay the cost of hashing funtion, 1 fetch content, and then the linear search inside the bucket array.</p> <p>So what is better? </p> <p>a. Jump between memory locations in tree nodes; b. pay the price for a hashing function and then potentially a search inside an array?</p>"},{"location":"blog/2024/01/29/differences-between-map-vs-unordered_map/#insertion-query-and-deletion-complexity","title":"Insertion, Query, and Deletion Complexity:","text":"<ul> <li><code>std::map</code>:<ul> <li>Insertion/Deletion: <code>O(log n)</code></li> <li>Query: <code>O(log n)</code></li> </ul> </li> <li><code>std::unordered_map</code>:<ul> <li>Average-case complexity (amortized):<ul> <li>Insertion/Deletion: <code>O(1)</code></li> <li>Query: <code>O(1)</code></li> </ul> </li> <li>Worst-case complexity (when dealing with hash collisions):<ul> <li>Insertion/Deletion: <code>O(n)</code> in the worst case</li> <li>Query: <code>O(n)</code> in the worst case</li> </ul> </li> </ul> </li> </ul>"},{"location":"blog/2024/01/29/differences-between-map-vs-unordered_map/#ordered-vs-unordered","title":"Ordered vs. Unordered:","text":"<ul> <li><code>std::map</code> maintains order based on the keys, allowing for efficient range queries and ordered traversal of elements.</li> <li><code>std::unordered_map</code> does not guarantee any specific order of elements.</li> </ul>"},{"location":"blog/2024/01/29/differences-between-map-vs-unordered_map/#memory-overhead","title":"Memory Overhead:","text":"<p><code>std::map</code> typically has a higher memory overhead due to the additional structure needed for the balanced binary search tree.</p> <p><code>std::unordered_map</code> may have a lower memory overhead, but it can be affected by the load factor and hash collisions.</p>"},{"location":"blog/2024/01/29/differences-between-map-vs-unordered_map/#use-cases","title":"Use Cases:","text":"<p>Use <code>std::map</code> when you need ordered traversal or range queries and can tolerate slightly slower insertion and deletion. Use <code>std::unordered_map</code> when you need fast average-case constant-time complexity for insertion, deletion, and queries, and the order of elements is not important.</p>"},{"location":"blog/2024/01/29/differences-between-map-vs-unordered_map/#closing","title":"Closing","text":"<p>In summary, the choice between <code>std::map</code> and <code>std::unordered_map</code> depends on the specific requirements of your application. If you need ordered elements and can tolerate slightly slower operations, <code>std::map</code> might be a better choice. If you prioritize fast average-case constant-time operations and the order of elements is not important, <code>std::unordered_map</code> may be more suitable.</p> <p>I challenge you to implement your own associative container following what you learned here. It is a great exercise to learn how to implement a hash table and a binary search tree. Talk with me via discord if you want to discuss your implementation.</p>"},{"location":"blog/2023/10/02/memory-efficient-data-structure-for-procedural-maze-generation/","title":"Memory-efficient Data Structure for Procedural Maze Generation","text":"<p>In this post, you will learn how to create a memory-efficient data structure for maze generation. We will jump from a 320 bits data structure to just 2! It is achieved by taking a bunch of clever decisions, changing the referential and doing some math. Be warned, this not for the fainted hearts. Are you brave enough? </p> <p>Problem statement: You need to generate mazes dynamicly, and you need to break or add walls between rooms. Ex.: How can we store data for a simple 3x3 maze like this:</p> <pre><code> _ _ _ \n| |   |\n| | | |\n|_ _|_|\n</code></pre> <p>The naive approach is to create a data structure like this:</p> <pre><code>class Node {\n    Node* top, right, bottom, left;\n    bool top_wall, right_wall, bottom_wall, left_wall;\n};\n</code></pre> <p>This one above will work, but it is:</p> <ul> <li>Cache unfriendly;</li> <li>Random access to any element will be slow;</li> <li>Memory inefficient;</li> <li>Huge memory consumption;</li> <li>Redundant data usage;</li> </ul> <p>Cache Unfriendly: The cache locality is hurt by extensive usage of dynamic allocation (4 pointer per node), and not reserving contigous memory for every new object created.</p> <p>Random Access: To access the room <code>{x,y}</code> will have to iterate over node by node from the origin. The access of a room will have the algorithmic complexity of O(rows+columns) or simply O(n). For small mazes it is not a problem, but for big mazes it will be.</p> <p>Memory inefficiency: The memory allocation for each room is 4 pointers and 4 booleans. If the size of the pointer is 8 bytes and each boolean is 1 byte, we might think it will have 36 bytes per room, right? Wrong! The compiler will add padding to the struct, so it will have 40 bytes per room. If we have a 1000x1000 maze, we will have 40MB of memory allocated for the maze. It is a lot of memory for a simple maze.</p> <p>Data redundancy: The wall data is stored in two neighbors. If we break a wall, we have to break the wall in two places. It is not a big deal, but it is a waste of memory.</p>"},{"location":"blog/2023/10/02/memory-efficient-data-structure-for-procedural-maze-generation/#optimization","title":"Optimization","text":"<p>Well, let's try to optimize it. The first step is to use a single array of data. And then we need to reduce the duplicity of data.</p> <p>By removing all the pointers, and store the wall data in a single array following matrix linearization, we will drop the memory consumption to 4 bytes per room (10x improvement). It is a huge improvement, but we can do better. Now we can create an array of WallData as follows:</p> <pre><code>struct WallData {\n    bool top, right, bottom, left;\n};\nvector&lt;WallData&gt; data;\nWallData get_wall(int x, int y) {\n    return data[y * width + x];\n}\n</code></pre> <p>The size of the WallData is 4 bytes. But we can reduce it if we use data layout optimization:</p> <pre><code>struct WallData {\n    bool top:1, right:1, bottom:1, left:1;\n};\n</code></pre> <p>In this version, WallData will use 1 byte per room(40x improvement). But we will be using only 4 bits of the byte. Another way of optmizing it is to use vector of bools for every type of wall. Let's group them into vectors. </p> <pre><code>vector&lt;bool&gt; topWalls, rightWals, bottomWalls, leftWalls;\n</code></pre> <p>For vector, depending on the implementation, it needs to store the size of it, the capacity, and the pointer to the data, which will use 24 bytes per vector. If  can reach 32 if it stores the reference count to it as a smart pointer.</p> <p>So what we are going to do next? Reduce the number of vectors used to reduce overhead. If you want to go deeper, you can use only one vector where every bit is a wall. So we will have only 4 bits per room and do some math to get the right bit(80x improvement).  <pre><code>vector&lt;bool&gt; walls;\n</code></pre> <p>Can we do it better? Yes! As you might have noticed, every wall data is being stored in two nodes redundantly. So we will jump from 40 bytes(320 bits) to 2 bits per room (approximately 160x improvement). But in order to achieve that, you have to follow a strict set of rules andodifications.</p> <ol> <li>Every even bit is a top wall, and every odd bit is a right wall relative to an intersection;</li> <li>Every dimension of the maze will be increased by one unity in order to properly address the borders.</li> <li>We need to create accessors via matrix index and flaten with linearization technique. </li> </ol> <pre><code> _ _ _\n|_|_|_|\n|_|_|_|\n</code></pre> <p>This 3x2 maze will be represented by a 4x3 linearized matrix. It is easier to understand if you look at the walls as edges and the wall intersections as nodes. So for a 3x2 maze, we need 4 vertical walls and 3 horizontal walls. So in this specific case, if we follow the pattern of 1 if the wall is present and 0 if it is not there, and do this only for top and right walls of a node(intersection), we will have:</p> <pre><code>This fully blocked 3x2 maze\n _ _ _\n|_|_|_|\n|_|_|_|\n\nWill give us 4x3 pairs of bits:\n01 01 01 00\n11 11 11 10\n11 11 11 10\n\nLinearized as:\n010101001111111011111110\n</code></pre> <p>Just to recaptulate: we went from 40 Bytes (320 bits) per room to approximately 2 bits per room. A maze map with 128x128 would go from 128*128*320/8 = 640KB to 129*129*2/8 = 4161 bytes. It is 157.5 times densely packed. It is a huge improvement.</p>"},{"location":"blog/2023/10/02/memory-efficient-data-structure-for-procedural-maze-generation/#notes-about-vectors","title":"Notes about vectors:","text":"<ol> <li>vector of bools is a bitfield, so it will pack 8 bools per byte, it will do the shift and masking for us. </li> <li>vector of bools is arguably an antipattern because it doesn't behave like a commom vector by not following the rule of zero cost abstraction from C++. It adds a cost for the densely packed bitfield.</li> <li>For our intent, this is exactly what we want, so we can use it, just check if your compiler implements it as a bitfield.</li> </ol> <p>Here goes a simple implementation of a data structure to hold the maze data:</p> <pre><code>struct Maze {\nprivate:\n  vector&lt;bool&gt; walls;\n  vector&lt;bool&gt; visited;\n  int width, height;\npublic:\n  Maze(int width, int height): width(width), height(height) {\n    walls.resize((width+1)*(height+1)*2, true);\n    for(int i = 0; i &lt;= width; i++) // clear verticals on the top\n      SetNorthWall(i, 0, false);\n    for(int i = 0; i &lt;= height; i++) // clear horizontals on the right\n      SetEastWall(width, i, false);\n    visited.resize(width*height, false); // no room is visited yet\n  }\n\n  bool GetVisited(int x, int y) const { return visited[y*width + x]; }\n  void SetVisited(int x, int y, bool val) { visited[y*width + x] = val; }\n\n  bool GetNorthWall(int x, int y) const { return walls[(y*(width+1) + x)*2 + 1]; }\n  bool GetSouthWall(int x, int y) const { return walls[((y+1)*(width+1) + x)*2 + 1];}\n  bool GetEastWall(int x, int y) const { return walls[((y+1)*(width+1) + x+1)*2];}\n  bool GetWestWall(int x, int y) const { return walls[((y+1)*(width+1) + x)*2];}\n\n  void SetNorthWall(int x, int y, bool val) { walls[(y*(width+1) + x)*2 + 1] = val; }\n  void SetSouthWall(int x, int y, bool val) { walls[((y+1)*(width+1) + x)*2 + 1] = val;}\n  void SetEastWall(int x, int y, bool val) { walls[((y+1)*(width+1) + x+1)*2] = val;}\n  void SetWestWall(int x, int y, bool val) { walls[((y+1)*(width+1) + x)*2] = val;}\n}\n</code></pre>"},{"location":"blog/2023/10/02/memory-efficient-data-structure-for-procedural-maze-generation/#further-ideas","title":"Further ideas","text":"<ol> <li>Is it possible to explore even more the structure?</li> <li>Is it possible to do the same for hexagonal grids? Every node will have 3 walls instead of 4 in the squared grid. </li> </ol>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/","title":"Let's talk about Virtual Reality","text":"<p>The goal of this article is not be a comprehensive guide about Virtual Reality, but to give you a general sense of what it is and how it works. I will also give you some examples of how it is being used today and what we can expect for the future.</p>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#history","title":"History","text":"<pre><code>graph TB\n  Start[Start] \n  -- 1838 --&gt; Stereoscope[Stereoscope] \n  -- 1935 --&gt; multisensory[Multi Sensory Machines]\n  -- 1960 --&gt; hmd[Head Mounted Devices\\nVR Goggles]\n  -- 1965 --&gt; military[Military Research\\nTraining\\nHelmets]\n  -- 1970 --&gt; artificialreality[Artificial Reality\\nComputer Simulations]\n  -- 1980 --&gt; gloves[Stereo Vision Glasses\\nGloves for VR]\n  -- 1989 --&gt; nasa[NASA Training\\nComputer Simulated Teleoperation]\n  -- 1990 --&gt; game[VR Gaming\\nVR Arcades]\n  -- 1997 --&gt; serious[PTSD Treatment]\n  -- 2007 --&gt; datavis[Google Street View\\nStereoscopic 3D]\n  -- 2010 --&gt;oculus[Oculus VR\\nOculus Kickstarter\\nFacebook acquisition]\n  -- 2015 --&gt;general[General Audience\\nMultiple VR products]\n  -- 2016 --&gt;ar[AR\\nPokemon Go\\nHololens] \n  -- 2017 --&gt;ARKIT[AR\\nApple ARKit] \n  -- 2018 --&gt;oculusquest[Oculus Quest\\nStandalone VR]\n  -- 2021 --&gt;metaverse[Metaverse\\nFacebook rebrands to Meta]\n  -- 2023 --&gt;apple[Apple Vision]</code></pre> <p>As you can see the history of VR is quite long and full of interesting surprising developments, but it is only in the last 10 years that it has become a reality for the general audience.</p>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#terms-disambiguation","title":"Terms Disambiguation","text":"<p>Before we go any further, let's disambiguate some terms that are often used interchangeably. Nowadays we have a spectrum of immersive technologies that goes from the real world to the virtual world.</p> <pre><code>graph LR\n    real[Real World]--&gt;mixed\n\n    subgraph mixed[Mixed Reality]\n        augmentedreality[Augmented Reality]\n        augmentedvirtuality[Augmented Virtuality]\n    end\n\n    mixed --&gt; virtual[Virtual Reality]</code></pre>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#virtual-reality","title":"Virtual Reality","text":"<p>Virtual Reality (VR) is the most pervasive and ambiguous term. It is sometimes used as an umbrella for all immersive technologies, but it is more commonly used to refer to the process of simulating a virtual world that is completely isolated the user from the real world. This is usually done by using a Head Mounted Display (HMD) that blocks the user's view of the real world and replaces it with a simulation in front of the user's eyes; and headphones to replace the real sounds with virtual. The user can also use controllers to interact in it.</p> <p>This term gained lots of attention with the modern VR boom that started in 2010 with the Oculus Kickstarter campaign followed by its acquisition by Facebook in 2014. After that, many other companies started to develop their own VR products, such as the HTC Vive, the Playstation VR, and the Samsung Gear VR.</p>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#augmented-reality","title":"Augmented Reality","text":"<p>Augmented Reality is another ambiguous term, but its meaning is more settled. It refers to the process of adding computer generated elements to the real world. It can be done by using a Head Mounted Display (HMD) that allows the user to see the real world and the virtual elements at the same time such as Google Glass or the Microsoft Hololens. It can also be done by using a smartphone or tablet that uses the camera to capture the real world and then adds virtual elements to it. This is the case of the Snapchat filters and the popular game Pokemon Go launched in 2016.</p>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#augmented-virtuality","title":"Augmented Virtuality","text":"<p>This term usually is not misused and more specifically refers to the process of adding real world elements to a virtual world. It can appears in many forms, for example, the use of a treadmill to simulate walking in the virtual world or the use of a camera to capture the user's face and add it to the virtual world. Stereocameras or depth sensors are also used to capture the user's hands and add them to the virtual world as well.</p> <p>Most of the time Augmented Virtuality (AV) is seen as an enhancement to the already existing immersive experience. It can be used to add another level of realism to the virtual world, to make the user feel more immersed in it, reduce nausea, or discomfort by adding real world anchors to the virtual world.</p>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#challenges","title":"Challenges","text":"<p>In order to make immersive gadgets a reality, we need to overcome some challenges. The most important ones are:</p> <ul> <li>Motion Sickness: the feeling of nausea and discomfort caused by the mismatch between the user's movements and the virtual world. It is mostly caused by:<ul> <li>Latency: the time it takes for the system to react to the user's actions. The system needs to process the inputs, accelerometers, gyroscopes, and other sensors, and then render the new image to the user. This process takes time and if it is too long the user will feel unresponsiveness and will get sick; </li> <li>Field of View: the area that the user can see at any given time doesnt match the area that the user can see in the real world;</li> <li>Resolution: the number of pixels that the user can see at any given time. Ex. The Oculus Rift DK1 had a resolution of 640x800 per eye that was zoomed to cover the user's entire field of view, and on top of that, the spacing between pixels makes the image looks like a grid of squared dots; you can see why it received so many complaints;</li> <li>Tracking: the ability of the system to track the user's movements properly. The sensors usually do not refresh at the same rate as the display, so the system needs to interpolate the user's movements between the sensor readings. This can cause the user to feel like the virtual world is lagging behind the real world and be out of sync with the user's movements;</li> </ul> </li> <li>Comfort: the feeling of comfort that the user has while using the system. If the device needs to be worn for a long period of time, right weight distribution, padding, and ventilation are important to make the user feel comfortable;</li> <li>Cost: the cost of the system. The machinery and technology used to create the system can be very expensive to be accessible to the general audience;</li> <li>Portability: the ability of the system to be used in different places. If the system is too heavy or too big it will be hard to carry; </li> <li>Social Acceptance: the acceptance of the system by the society. If the system is too intrusive or too weird it will be hard to use in public places. It could be seen as a threat to privacy or as a threat to the user's safety;</li> <li>Battery Life: the amount of time that the system can be used without being plugged in. If the system needs to be plugged in all the time it will be hard to use in public places;</li> <li>Software Development Kits: the tools that developers use to create applications for the system. If the SDK is too hard to use or too limited it will be hard to create applications for the system;</li> </ul> <p>I will add to this list a personal experience that I don't see many people talking about: bad smell, oily foams, and connectors corrosion. The root of those problems is the proximity with the user's face. The user's face is a very oily place and the foam that is used to make the device comfortable is an exceptional place for bacteria to grow. The connectors are also exposed to the user's sweat and can corrode over time and brick your device.</p>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#applications","title":"Applications","text":"<p>There are virtually infinite applications for immersive technologies, but I will focus on the ones that I think are the most important ones in my opinion:</p> <ul> <li>Entertainment: Games in general, but also movies, etc.;</li> <li>Data Visualization: the ability to visualize data in a 3D space can be very useful to understand complex data;</li> <li>Education: Training, virtual classrooms, virtual museums, virtual tours, etc.;</li> <li>Social: Virtual meetings, parties, dating, etc.;</li> <li>Psychological Treatment: Virtual exposure therapy(Ex.: PTSD, phobias), virtual reality therapy, etc.;</li> <li>Medical: Surgery planning, surgery simulation, etc.;</li> <li>Design: Architecture, interior design, etc.; </li> </ul>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#future","title":"Future","text":"<p>In my past, I have created a startup to help surgeons plan their surgeries and ported it to VR - DocDo. I created some small scoped projects to psychological treatment via progressive exposition, some for data visualization and others for education. I am not in position to have a strong opinion about the future of VR, but I can share my thoughts about it.</p> <p>At the beginning of the metaverse boom, I was very skeptical about it, and I am still. I felt it was a just a new interpretation of a product previously tested on Second Life and proved to be a niche product, focused in being fun, but forcing the use of device with many issues. Another problem was the lack of a real application besides the fun factor.</p> <p>As a developer, I am in love with Apple's new Vision OS emulator and SDK. It is surprisingly easy to use, filled with useful functions, although it is buggy and crashes randomly in beta channel that I am using now. I think it is an exceptional example of how to create a nice SDK for a new platform. I am not sure if it will be a success, but I am sure that it will empower many developers to create new or port existing applications to their platform. They have created a simply way to bring a desktop experience to a VR gadget that just work. You can \"easily\" port your app to it and it will work. It is portable, easy to code, powerful hardware, nice battery life, and a nice SDK. I think it is a nice recipe for success. My only concern is related to the cost and social acceptance.</p>"},{"location":"blog/2024/08/19/neurodivergence-in-the-game-development/","title":"Neurodivergence in the Game Development","text":"<p>Most of us game devs hold some degree of divergence. If you fall into the typical box, don't worry: you are not alone. The game industry is filled with neurodivergent people, and it is a place where you can be yourself, be accepted, and thrive. But if you are a typical person, you should be at least aware of the differences and how to deal with them.</p> <p>IGDA (International Game Developers Association) ran a research in 2023 about disability and they found a shocking number of 44% of game professionals holds some degree of neurodivergence. Check it out here the full report.</p> <p></p> <p>The person who is writing this article (AKA myself, yay!) is an autistic person, with triple exptionalities (giftedness, ADHD, and autism). I am also a teacher for more than 10 years and I have been trying to understand how to deal with neurodivergent students in the classroom for a while. Please, allow me to share some of my insights and experiences with you.</p>"},{"location":"blog/2024/08/19/neurodivergence-in-the-game-development/#depression-and-anxiety-as-hints-for-deeper-issues","title":"Depression and Anxiety as hints for deeper issues","text":"<p>Well, if I could say something to my younger self is to understand more about depression and anxiety, it could be symptoms for deeper issues. Those are the first things people note on you, and you can feel them more clearly than the other characteristics. It is pretty common for an atypical person to force itself into a typical box, and it is a recipe for disaster. If you feel that, seek for help! It is not a shame to be different!</p>"},{"location":"blog/2024/08/19/neurodivergence-in-the-game-development/#chronic-depression-and-anxiety","title":"Chronic Depression and Anxiety","text":"<p>As a professor, I think that most of my struggling students face some of the following characteristics somehow, and I remember what happened to me too. I was wrongly diagnosed as Depressed and Anxious, but in my case, it was a consequence of my brain trying to force myself into others expectations and failing. So I will list some common symptoms of those chronic issues and how read them.</p> <ul> <li>Tiredness: trying to fit can be really draining, and it can lead to tiredness or even exhaustion.</li> <li>Lack of motivation and interest: You feel so tired that just focus on something can become a herculean task. You might feel like you are not interested in anything, but it might be just your brain trying to protect you from the exhaustion.</li> <li>Low self-esteem: As you fail to do what others do, you constantly feel like you are not enough. Thus, you feel hopelessness, worthlessness, pessimist and empty. Have you thought that you might be judging yourself by others standards, and being blind to your own abilities?</li> <li>Sleep problems: it can be the two extremes, sleeping too much or too little. My case: When I didn't understand that on me, I couldn't sleep well, I faint out of exhaustion or even delirious while awake. It was pretty common for me to have headaches for the lack of sleep.</li> <li>Appetite or weight changes: This can be related to Anxiety too. Sometimes you feel so frustrated that you seek for dopamine in food, or you feel so anxious trying to do something that your brain can't focus on eating.</li> <li>Concentration problems: You feel hard do pay attention to things that are not interesting to you or don't connect with you well. For me, this is a consequence of being tired. You can create coping mechanisms to keep at least partially focused such as drawing in class, but it is not sustainable. I have another article about learning techniques. Check it out later.</li> <li>Emotional problems and mood: Sometimes you might feel emotionally unstable. Feeling sad frequently or even not feeling what you know you should feel. You might feel hard to feel empathy and understand others feelings. Or you disconnect from your own feelings. You can be easily irritable just because you are exhausted. Or worse, you feel like you are a robot, and you don't have feelings at all, because you create so many protections around yourself that it is easier to dissociate from your feelings than to deal with them.</li> <li>Pain: You might experience pain differently. In my case, I have a high pain tolerance and don't perceive pain the way most people do. For example, I thought I had merely bumped a toe against the bed while walking at night and went back to sleep. It wasn\u2019t until later when I woke up trembling cold and noticed my foot was purple, so I went to the hospital. The doctors informed me that my foot was fractured in three places and did a surgery. The very next day I was teaching already.</li> <li>Other Physical Symptoms: most common are: constant headaches, digestive problems, or sexual problems (ex.: porn addiction or not interested at all). But it is pretty common to have heart palpitations, sweating, lightheadedness, trouble breathing, nausea, stomach upset, diarrhea, frequent urination, dizziness, and shakiness.</li> </ul> <p>I am no doctor, and I am here just to raise awareness as a person with issues by showing empathy to others and trying to prove that I can understand most of your issues. If you are facing any of those, and you are one of my students, you can count on me to give you extra attempts on assignments or extending due dates. No questions asked. But you have to ask. Deal?</p>"},{"location":"blog/2024/08/19/neurodivergence-in-the-game-development/#brain-model","title":"Brain model","text":"<p> source</p> <p>I am no psychologist nor neuroscientist, but I have been studying the brain for a while to understand myself and how to be more effective teacher by helping people like me. But in order to explain my point, I will use a simplified model of the brain. I will use the Freud model.</p> <p>As far as I could understand about my issues and some o my students, I came to the conclusion that we have a different way to process, store and retrieve information, how we learn, and we have an atypical way to interact with the world.</p> <p>So, the core issue I could feel is a sheer pressure coming from the rational core towards the other layers, but we forget that conscious is just the emergence of what is happening in the other layers. So, we have to learn to respect and listen to our unconscious and preconscious mind.</p> <p>It is just like having two people living inside yourself, and they are constantly fighting for control. The rational core is the one that is always trying to fit in, to be like others, to be accepted, to be loved. But the unconscious and preconscious mind are the ones that are trying to protect you, to make you feel safe, to make you feel happy. And if they are in disagreement, you might feel the symptoms I listed above. Does it make sense to you?</p> <p>Sometimes this fight between these poles can be so intense that you might feel exhausted, and it can lead to depression and anxiety. But I will phrase Jim Carrey:</p> <p></p> <p>\"Depression is your body saying: 'I don't want to be this character anymore. I don't want to hold up this avatar that you've created in the world. It's too much for me.'\";</p> <p></p> <p>\"I believe depression is legitimate. But I also believe that if you don\u2019t exercise, eat nutritious food, get sunlight, get enough sleep, consume positive material, surround yourself with support, then you aren\u2019t giving yourself a fighting chance.\"</p>"},{"location":"blog/2024/08/19/neurodivergence-in-the-game-development/#protecting-your-subconscious","title":"Protecting your subconscious","text":"<p>Well, what you could do to help yourself? I will list some of the things that helped me and some of my students thrive.</p> <p>The obvious and direct actions are:</p> <ul> <li>Sleep well and track your sleep quality with any mobile app you like, I use Sleep as Android, my kid uses the Pokemon Sleep, it connects to Pokemon GO!.</li> <li>Take sunbathes, at least 15 minutes a day. If you cant, take vitamin D supplements. I go to work by bike, so I take my sunbathes while I am going to work. On days that I can't, I take buses and walk. If you see me around, don't be shy, say hi! I would love it!</li> <li>Eat well, track your food intake with any mobile app you like. Learn to eat healthy even if you distaste it, first you will learn how to tolerate and then you will enjoy it. Avoid sugary food and highly processed food.</li> <li>Drink enough water to help your body clean unwanted substances. I use a 1.5L bottle with time markings to help me to drink enough water throughout the day.</li> <li>Create a support network. It can be through games, sports or anything that might make you be in touch with others. I am currently building an open source system, and I am always in touch with the community.</li> <li> <p>Do outside activities and get some fresh air:</p> </li> <li> <p>Is it raining? Go for it! You can take a shower after that.</p> </li> <li>Is it snowing? Feel the snowflakes in your skin and the urge to maintain your body temperature.</li> <li>Is it sunny? Go to the lake and feel the water in your feet and the sun in your skin.</li> </ul> <p>Those are the building blocks to allow your subconscious to feed your conscious mind. These apparently simple steps help you close the distance between your two selfs. If you feel that something works for you and I didn't list it, please share with me. I would love to learn more about it.</p> <p>Again. I am just a neurodivergent guy trying to help others like me. Seek professional help if you think you identify with the symptoms I listed above.</p>"},{"location":"blog/2024/08/19/neurodivergence-in-the-game-development/#my-personal-take-on-conceding-exceptions-to-students","title":"My personal take on conceding exceptions to students","text":"<p>As a teacher, I have to follow some rules. While the learning and supporting systems are not ready for people like me, I am do my best to be flexible enough to deal with the differences fairly. The only requirement I ask is: if you are my student and are struggling, please reach me out or just add comments into the assignment online stating that you would request extra time or whatever your case would be. I want you to succeed. The reason is: these tools does not offer a nice way to me to track your particularities or allow me to attach notes to students.</p>"},{"location":"blog/2023/08/24/notes-on-submissions/","title":"Notes on Submissions","text":"Source: ideogram   <p>Here are my personal opinions, rules and processes that I follow about submissions. I will cover gradings, deadlines, tolerances, and AI-assistant tools usage.</p>"},{"location":"blog/2023/08/24/notes-on-submissions/#policy-on-limited-use-of-ai-assisted-tools","title":"Policy on Limited use of AI-assisted tools","text":"<p>Note</p> <p>\"During our classes, we may use AI writing tools such as ChatGPT in certain specific cases. You will be informed as to when, where, and how these tools are permitted to be used, along with guidance for attribution. Any use outside of these specific cases  constitutes a violation of Academic Honesty Policy.\" Source.</p> <p>The learner has to produce original content. You can use tools like ChatGPT to help you learn by prompting your own questions, but not to solve the problems, assignments, or quizzes.</p> <p>The rationale is that the student has to learn the concepts and ideas rather than just copying and pasting the answers.</p>"},{"location":"blog/2023/08/24/notes-on-submissions/#what-is-acceptable","title":"What is acceptable:","text":"<ul> <li>On writing, coding assignments, or interactive assignments, you can ask AI questions about concepts, ideas, syntaxes, etc;</li> <li>You can ask AI assistants what is wrong with your code, but you cannot use the answer 1 to 1 copy to your final submission. You have to modify it;</li> <li>If your submission contains part of an AI-assisted tool, you have to cite it. Ex.: \"I prompted ____ in ChatGPT, and the answer was ____.\" and as a professor, I will deduct points from your submission with fairness instead of giving you zero points;</li> </ul>"},{"location":"blog/2023/08/24/notes-on-submissions/#what-is-not-acceptable","title":"What is not acceptable","text":"<ul> <li>You cannot copy the question and prompt AI to answer it and then use the answer as your own;</li> <li>You cannot ask AI to code a solution for you;</li> <li>You cannot use any AI while coding(e.g. GitHub Copilot), but I do recommend you to use any IDE instead;</li> <li>You cannot use AI assistance to solve quizzes or exams in any circumstances.</li> <li>Even in accepted cases, using AI assistance and not citing it will be considered plagiarism and will be reported to higher instances and zero-ed;</li> </ul>"},{"location":"blog/2023/08/24/notes-on-submissions/#how-do-i-detect-plagiarism-and-ai-assisted-tools-abuse","title":"How do I detect Plagiarism and AI-assisted tools abuse","text":"<ul> <li>I use some automated tools such as Turnitin(canvas), moss(Beecrowd), and others;</li> <li>I use my own experience to detect plagiarism;</li> <li>If two students use the same AI assistant, chances are high that they will produce the same answer, and I will detect it;</li> </ul>"},{"location":"blog/2023/08/24/notes-on-submissions/#grading-timings","title":"Grading Timings","text":"<p>I usually take up to 1 week to grade assignments, but I will grade them as soon as possible. The worst-case scenario is two weeks.</p>"},{"location":"blog/2023/08/24/notes-on-submissions/#late-submissions-policy","title":"Late Submissions Policy","text":"<p>If you submit an assignment late, you will receive a flat 20% deduction on your grade.</p> <p>If you have accommodations, message me, and I will try accommodating you. But always send a message on every submission stating that. Canvas is a nice tool, but it needs to cover accommodations better.</p> <p>If you fall under special conditions, such as sickness, death of a relative, or any other condition that you cannot submit the assignment on time, please send me a message through Canvas, and I will try to accommodate you.</p>"},{"location":"blog/2023/08/24/notes-on-submissions/#plagiarism","title":"Plagiarism","text":"<p>Plagiarism is a serious offense and will be reported to the higher instances. I will not tolerate any plagiarism as I define:</p> <ul> <li>Searching for answers on the internet and copy and paste it as your own;</li> <li>Copying answers from other students;</li> <li>Using AI-assisted tools to produce full answers;</li> <li>Using AI-assisted tools to produce partial answers without citing it;</li> </ul>"},{"location":"blog/2023/08/24/notes-on-submissions/#welcoming-environment","title":"Welcoming environment","text":"<p>I am here to teach you the best I can and guide you through your learning process. You can count on me as a friend and a teacher, and I will help you as much as possible. I am willing to make exceptions for the ones that need it.</p>"},{"location":"dojo/","title":"Coding Dojo Definition","text":"<p>A coding dojo is a programming practice that involves a group of developers coming together to collaborate on solving coding challenges. It is a learning and collaborative environment where developers can improve their coding skills and work on real-world coding problems.</p> <p>The term \"dojo\" comes from the Japanese term for <code>place of the way</code>, which is a traditional place of training for martial arts. In a coding dojo, participants practice the skills they have learned, exchange knowledge and experience, and work together to solve programming challenges.</p> <p>During a coding dojo session, participants work in pairs or small groups to solve programming challenges, using techniques such as pair programming and test-driven development. They work through the problem step by step, discussing and sharing their ideas and approaches along the way. The goal of a coding dojo is to improve individual and team coding skills, and to learn from each other's experiences.</p>"},{"location":"dojo/#timeline-structure","title":"Timeline Structure","text":"<ul> <li>Introduction (5 minutes): The facilitator introduces the coding dojo and the coding challenge for the session.</li> <li>Warm-up exercise (10 minutes): A brief exercise is conducted to get participants warmed up and ready for the coding challenge.</li> <li>Coding challenge (60 minutes): Participants work in pairs or small groups to solve the coding challenge using techniques such as pair programming and test-driven development.</li> <li>Review and discussion (15 minutes): Participants share their solutions and discuss the various approaches taken to solve the challenge.</li> <li>Retrospective (10 minutes): Participants reflect on the session and provide feedback on what went well and what could be improved for future sessions.</li> <li>Closing (5 minutes): The facilitator concludes the session and thanks the participants for their contributions.</li> </ul>"},{"location":"dojo/Full-Cycle-SDL-Development/","title":"Full Cycle Cross-platform Game Development with SDL, CMAKE and GitHub","text":"<p>This Dojo is focused in training professionals on setting up a full cycle project using SDL, CMAKE and GitHub actions.</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#agenda","title":"Agenda:","text":"<ul> <li>Introduction (5 minutes): The facilitator introduces the coding dojo and the goal of the session, which is to create a CMake build system for an SDL project using GitHub Actions.</li> <li>Warm-up exercise (10 minutes): A brief exercise is conducted to get participants warmed up and familiar with SDL and CMake.</li> <li>Setting up the project (30 minutes): Participants work in pairs or small groups to clone the SDL project from GitHub and create a CMake build system for it.</li> <li>Adding GitHub Actions (30 minutes): Participants continue to work on their CMake build systems and add GitHub Actions to automate the build and test process.</li> <li>Review and discussion (10 minutes): Participants share their solutions and discuss the various approaches taken to create the CMake build system and implement GitHub Actions.</li> <li>Retrospective (5 minutes): Participants reflect on the session and provide feedback on what went well and what could be improved for future sessions.</li> <li>Closing (5 minutes): The facilitator concludes the session and thanks the participants for their contributions.</li> </ul>"},{"location":"dojo/Full-Cycle-SDL-Development/#introduction","title":"Introduction","text":""},{"location":"dojo/Full-Cycle-SDL-Development/#warm-up","title":"Warm-up","text":"<ul> <li>Write down what do you expect from this Dojo here;</li> </ul>"},{"location":"dojo/Full-Cycle-SDL-Development/#setup","title":"Setup","text":"<p>You can either fork Modern CPP Starter Repo (and star it) or create your own from scratch.</p> <p>Ensure that you have the following software installed in your machine:</p> <ul> <li>C++ Compiler. Ex.: GCC(build-essential, and cmake) on Linux, MS Visual Studio on Windows(select C++ and in additional tools, select cmake), Command Line Tools for OSX.</li> <li>Git. Ex.: Gitkraken(free for students);</li> <li>IDE. Ex.: Clion(free for students);</li> <li>CMake. Ex.: cmake-gui, but clion already bundle it for you.</li> </ul>"},{"location":"dojo/Full-Cycle-SDL-Development/#action","title":"Action","text":""},{"location":"dojo/Full-Cycle-SDL-Development/#1-clone","title":"1. Clone.","text":"<p>Clone your repository you created or forked in the last step (Modern CPP Starter Repo);</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#2-cmake-glob","title":"2. CMake Glob","text":"<p>Edit your CMakeLists.txt to glob your files (naive and powerful approach). Example:</p> <p>Minimum CMake: <pre><code>cmake_minimum_required(VERSION 3.25)\nproject(MY_PROJECT)\nset(CMAKE_CXX_STANDARD 17)\nadd_executable(mygamename main.cpp)\n</code></pre> Add a GLOB to search for four files.  <pre><code>file(GLOB MY_INCLUDES # Rename this variable\n        CONFIGURE_DEPENDS\n        ${CMAKE_CURRENT_SOURCE_DIR}/*.h\n        ${CMAKE_CURRENT_SOURCE_DIR}/*.hpp\n        )\n\nfile(GLOB MY_SOURCE # Rename this variable\n        CONFIGURE_DEPENDS\n        ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/*.c\n        )\n</code></pre> Then edit your last line to use the result of it as the sources for your executable. <pre><code>add_executable(mygamename ${MY_SOURCE} ${MY_INCLUDE})\n</code></pre></p>"},{"location":"dojo/Full-Cycle-SDL-Development/#3-cpm","title":"3. CPM","text":"<p>Add code for the package manager CPM. </p> <p>Read their example and how do you download it. Optionally, you can download it dynamically, this is the way I prefer.;</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#4-sdl-dependency","title":"4. SDL dependency","text":"<p>Use CPM to download your dependencies. Please refer to this issue comment for an example. If you want to see something already done, check this one;</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#5-linking","title":"5. Linking","text":"<p>Link your executable to SDL; <pre><code>target_link_libraries(mygamename PUBLIC SDL2)\n</code></pre> You can see it in action here. In this example, we include the external cmake file manage that. It is a good practice to do that. </p>"},{"location":"dojo/Full-Cycle-SDL-Development/#6-optional-imgui","title":"6. Optional: ImGUI","text":"<p>ImGui for debugging interface purposes;</p> <p>Use CPM to download ImGUI and link it to your library. Example - You can optionally remove the static link if you want.   https://github.com/InfiniBrains/SDL2-CPM-CMake-Example/blob/main/main.cpp</p> <p>Link your executable to IMGUI <pre><code>target_link_libraries(mygamename PUBLIC SDL2 IMGUI)\n</code></pre></p>"},{"location":"dojo/Full-Cycle-SDL-Development/#7-it-is-game-time","title":"7. It is GAME time!","text":"<p>Copy this example here to your <code>main.cpp</code> if you are going do use ImGUI or just use something like this:</p> <pre><code>#include &lt;stdio.h&gt;\n\n#include \"SDL.h\"\n\nint main()\n{\n    if(SDL_Init(SDL_INIT_VIDEO) != 0) {\n        fprintf(stderr, \"Could not init SDL: %s\\n\", SDL_GetError());\n        return 1;\n    }\n    SDL_Window *screen = SDL_CreateWindow(\"My application\",\n            SDL_WINDOWPOS_UNDEFINED,\n            SDL_WINDOWPOS_UNDEFINED,\n            640, 480,\n            0);\n    if(!screen) {\n        fprintf(stderr, \"Could not create window\\n\");\n        return 1;\n    }\n    SDL_Renderer *renderer = SDL_CreateRenderer(screen, -1, SDL_RENDERER_SOFTWARE);\n    if(!renderer) {\n        fprintf(stderr, \"Could not create renderer\\n\");\n        return 1;\n    }\n\n    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);\n    SDL_RenderClear(renderer);\n    SDL_RenderPresent(renderer);\n    SDL_Delay(3000);\n\n    SDL_DestroyWindow(screen);\n    SDL_Quit();\n    return 0;\n}\n</code></pre>"},{"location":"dojo/Full-Cycle-SDL-Development/#8-github-actions","title":"8. Github Actions.","text":"<p>Create folder <code>.github</code> and inside it another one <code>workflows</code>. Inside it create a <code>.yml</code> file.</p> <p>Here you will code declaratively how your build should proceed. The basic steps are usually: Clone, Cache, Install dependencies, Configure, Build, Test and Release conditionally to branch.</p> <p>Check and try to reproduce the same thing you see here. </p> <p>If you are following the Modern CPP Starter Repo, you can explore automated tests. Be my guest and try it.</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#review","title":"Review","text":"<p>How far you went? Share your repos here.</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#retrospective","title":"Retrospective","text":"<p>Please give me feedbacks in what we did today. If you like or have something to improve, say something in here. Ah! you can always fork this repo, improve it and send a pull request back to this repo.</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#closing","title":"Closing","text":"<p>Give stars to all repos you saw here as a way to contribute to the continuity of the project. </p> <p>Propose a new Dojo and be in touch. </p>"},{"location":"dojo/The-most-asked-interview-question/","title":"The most asked interview question","text":"<p>Arguably, the most asked question in coding interviews is the Two Number Sum. It is used by many Bigtechs and AAA Game Studios. You can see this question in many youtube videos, coding websites such as hackerank, leetcode, algoexpert ...</p>"},{"location":"dojo/The-most-asked-interview-question/#agenda-two-number-sum-coding-dojo","title":"Agenda: Two Number Sum Coding Dojo","text":""},{"location":"dojo/The-most-asked-interview-question/#introduction-5-minutes","title":"Introduction (5 minutes)","text":"<ol> <li>Welcome participants to the dojo</li> <li>Introduce the Two Number Sum question as a common coding interview question</li> <li>Discuss the importance of problem-solving skills in coding interviews</li> <li>Briefly explain the rules and structure of the dojo</li> <li>Problem Explanation (10 minutes)</li> </ol>"},{"location":"dojo/The-most-asked-interview-question/#provide-a-brief-overview-of-the-two-number-sum-question","title":"Provide a brief overview of the Two Number Sum question","text":"<ol> <li>Define the problem and its requirements</li> <li>Discuss potential edge cases and constraints</li> <li>Review sample inputs and expected outputs</li> <li>Coding Session (50 minutes)</li> </ol>"},{"location":"dojo/The-most-asked-interview-question/#problem-restrictions-and-characterization","title":"Problem restrictions and characterization","text":"<p>Write a function that will receive an array/vector/list of integers and a target number. Find two numbers inside the array that summed will match the target. You have to return both in a array/vector/list ordered.</p> <p>Implement the solution in 3 different ways. Open the details only after you try. First approach:</p>  1. Naive solution. O(N^2) time and O(1) space; - required to know this;  <p>Can you make it faster?</p>  2. Fastest solution. O(N) time and O(N) space; - this will make you  <p>Can you make it not use much memory, but still be fast?</p>  3. Fastest without mem allocation. O(N*log(N)) time and O(1) space;"},{"location":"dojo/The-most-asked-interview-question/#participants-work-on-solving-the-two-number-sum-problem-in-pairs-or-small-groups","title":"Participants work on solving the Two Number Sum problem in pairs or small groups","text":"<ol> <li>Emphasize the importance of communication and collaboration during the coding session</li> <li>Encourage participants to use a whiteboard or paper to sketch out their solutions</li> <li>Provide guidance and support as needed</li> <li>Code Review (20 minutes)</li> </ol>"},{"location":"dojo/The-most-asked-interview-question/#participants-share-their-solutions-with-the-group","title":"Participants share their solutions with the group","text":"<ol> <li>Facilitate a discussion about each solution, highlighting strengths and areas for improvement</li> <li>Encourage participants to ask questions and provide feedback to their peers</li> <li>Discuss potential optimizations and alternative approaches to the problem</li> <li>Wrap-Up (5 minutes)</li> </ol>"},{"location":"dojo/The-most-asked-interview-question/#recap-the-main-takeaways-from-the-dojo","title":"Recap the main takeaways from the dojo","text":"<ol> <li>Encourage participants to continue practicing problem-solving skills on their own</li> <li>Thank participants for attending the dojo and provide any additional resources or support as needed.</li> <li>Note: The time allocation can be adjusted based on the group's needs and pace.</li> </ol>"},{"location":"intro/","title":"Intro to Programming","text":""},{"location":"intro/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Understand the fundamental concepts of programming and computer science;</li> <li>Practice how to solve problems programatically using C++;</li> <li>Use tools to write and compile C++ programs;</li> <li>Code, document, test, and implement a well-structured, robust computer program using the C++ programming language.</li> <li>Write reusable modules (collections of functions).</li> <li>Use version control to manage your code;</li> <li>Use the debugger to find and fix bugs in your code;</li> <li>Understand the basics of file input/output;</li> <li>Work in groups to solve problems;</li> </ul>"},{"location":"intro/#learning-outcomes","title":"Learning Outcomes","text":"<ul> <li>Be able to understand computer science concepts and terminology;</li> <li>To describe the basic components of a computer system and their functions;</li> <li>Differentiate between the various types of programming languages;</li> <li>To describe and use software tools in the programming process;</li> <li>Use modern concepts and principles of C++ programming language;</li> <li>To design, code, test, and debug a computer program using the C++ programming language;</li> <li>To demonstrate an understanding of primitive data types, values, operators and expressions in C/C++;</li> <li>Manage and manipulate files in C++;</li> <li>Deliver a full working project collaboratively;</li> </ul>"},{"location":"intro/#schedule","title":"Schedule","text":"<p>Warning</p> <p>This is a work in progress, and the schedule is subject to change. Every change will be communicated in class. Use the github repo as the source of truth for the schedule and materials. The materials provided in canvas are just a copy for archiving purposes and might be outdated.</p> <p>Relevant dates for the Fall 2023 semester:</p> <ul> <li>09-13 Oct 2023 - Midterms Week</li> <li>20-24 Nov 2023 - Thanksgiving Break</li> <li>11-15 Dec 2023 - Finals Week</li> </ul> Week Date Topic 1 2023/08/28 1. Introduction, 2. Tools for first Program 2 2023/09/04 Data Types, Arithmetic Operations, Type conversion 3 2023/09/11 Conditionals, Boolean and Bitwise Operations 4 2023/09/18 Loops, for, while, goto and debugging 5 2023/09/25 Functions, Base Conversion, Pointers, Reference 6 2023/10/02 Streams, File IO 7 2023/10/09 Midterm 8 2023/10/16 Arrays, Vectors, String 9 2023/10/23 Recursion 10 2023/10/30 Sorting 11 2023/11/06 Structs, Unions, Enumerations 12 2023/11/13 Work sessions 13 2023/11/20 Thanks giving week 14 2023/11/27 Work sessions / Review 15 2023/12/04 Review / Presentations 16 2023/12/11 Finals"},{"location":"intro/#references","title":"References","text":"<p>10<sup>th</sup> edition Gaddis, T. (2020) Starting out with C++. Early objects / Tony Gaddis, Judy Walters, Godfrey Muganda. Pearson Education, Inc. Available at: https://research-ebsco-com.cobalt.champlain.edu/linkprocessor/plink?id=047f7203-3c9c-399b-834f-42cdaac4c1da</p> <p>9<sup>th</sup> edition Gaddis, T. (2017) Starting out with C++. Early objects / Tony Gaddis, Judy Walters, Godfrey Muganda. Pearson. Available at: https://discovery-ebsco-com.cobalt.champlain.edu/linkprocessor/plink?id=502e29d6-3b46-38ff-9dc2-65e79c81c29b</p> <ul> <li>C++ early objects. Amazon (Champlain: 9<sup>th</sup> 10<sup>th</sup>)</li> <li>Modern C++ Programming</li> <li>learncpp</li> <li>cpluslus</li> <li>cprogramming</li> <li>programming-books</li> <li>google style guide</li> <li>riptutorial</li> <li>cpp manual</li> <li>cpp core guidelines</li> <li>rooksguide</li> <li>cpp best practices</li> </ul>"},{"location":"intro/01-introduction/","title":"Reasons why you should learn how to program with C++","text":"<p>Before we start, this repository aims to be practical, and I highly incentive you to look for other references. I want to add this another awesome repository it holds an awesome compilation of modern C++ concepts.</p> <p>Another relevant reference for what we are going to cover is the updated core guidelines that explain why some syntax or style is bad and what you should be doing instead.</p>"},{"location":"intro/01-introduction/#why","title":"Why?","text":"<p>The first thing when you think of becoming a programmer is HOW DO I START? Well, C++ is one of the best  programming languages to give you insights into how a computer works. Through the process of learning how to code  C++, you will learn not only how to use this language as a tool to solve your problems, but the farther you go, the  more you will start uncovering and exploring exciting computer concepts.</p> <p>C++ gives you the simplicity of C and adds a lot of steroids. It delivers lots of quality-of-life stuff, increasing  the developer experience. Let\u2019s compare C with C++, shall we?</p> <ol> <li>The iconic book \"The C Programming Language\" by Brian W. Kernighan and Dennis M. Ritchie has only 263 pages.     Pretty simple, huh?</li> <li>The book \"C++ How to Program\" by Harvey and Paul Deitel It holds around 1000 pages, and the pages are way     bigger than the other one.</li> </ol> <p></p> <p>So, don\u2019t worry, you just need to learn the basics first, and all the rest are somehow advanced concepts. I will do  my best to keep you focused on what is relevant to each moment of your learning journey.</p> <p>Without further ado. Get in the car!</p> <p></p>"},{"location":"intro/01-introduction/#speed-matters","title":"Speed Matters","text":"<p>A LOT. Period. C++ is one of the closest intelligible programming languages before reaching the level of  machine code, as known as Assembly Language. If you code in machine code, you obviously will code precisely what  you want the machine to do, but this task is too painful to be the de-facto standard of coding. So we need  something more straightforward and more human-readable. So C++ lies in this exact area of being close to assembly language and still able to be \"easily\" understandable. Note the quotes, they are there because it might not be that easy when you compare its syntax to other languages, C++ has to obey some constraints to keep the generated binary fast  as a mad horse while trying to be easier than assembly. Remember, it can always get worse.</p> <p></p> <p>The main philosophy that guides C++ is the \"Zero-cost abstractions\", and it is the main reason why C++ is so fast. It means that the language does not add any overhead to assembly. So, if someone proposes a new core feature as a Technical specification, it should pass through this filter. And it is a very high bar to pass. I am looking at you, ts reflection, everyone I know that want to make games, ask for this feature, but it is not there yet. </p> <p></p>"},{"location":"intro/01-introduction/#why-does-speed-matter","title":"Why does speed matter?","text":"<p>Mainly because we don\u2019t want to waste time. Right? But it has more impactful consequences. Let\u2019s think a bit more, you  probably have a smartphone, and it lives only while it has enough energy on its battery. So, if you are a lazy  mobile developer and do not want to learn how to do code efficiently, you will make your app drain more energy  from the battery just by making the user wait for the task to be finished or by doing lots of unnecessary  calculations! You will be the reason the user has not enough power to use their phones up to the end of the day.  In fact, you will be punishing your user by using your app. You don\u2019t want that, right? So let\u2019s learn how to code  appropriately. For the sake of the argument, worse than that, a lazy blockchain smart contract developer will make  their users pay more for extra gas fee usage for the extra inefficient CPU cycles.</p> <p></p>"},{"location":"intro/01-introduction/#language-benchmarks","title":"Language benchmarks","text":"<p>I don\u2019t want to point fingers at languages, but, hey, excuse me, python, are you listening to me, python? Python?  Please answer! reference cpp vs python.  Nevermind. It is still trying to figure things out. Ah! Hey ruby, don\u2019t be shy, I know you look  gorgeous, and I  admire you a lot, but can you dress up faster and be ready to run anytime soon? </p> <p>You don\u2019t need makeup to run fast. That\u2019s the idea. If the language does lots of fancy stuff, it won\u2019t be extracting the juicy power of the CPU.</p> <p>So let\u2019s first clarify some concepts for a fair comparison. Some languages do not generate binaries that run in your  CPU. Some of them run on top of a virtual machine. The Virtual Machine(VM) is a piece of software that, in runtime,  translates the bytecode or even compiles source code to something the CPU can understand. It\u2019s like an old car;  some of them will make you wait for the ignition or even get warm enough to run fast. I am looking at you Java and JavaScript. It is a funny concept, I admit, but you can see here that the ones that run on top of a translation device  would never run as fast as a compiled binary ready to run on the CPU.</p> <p>So let\u2019s bring some ideas from my own experience, and I invite you to test by yourself. Just search for \"programming  languages benchmark\" on your preferred search engine or go here. </p> <p></p> <p>I don\u2019t want to start a flame-war. Those numbers might be wrong, but the overall idea is correct. Assuming C++ does not  add much overhead to your native binary, let\u2019s set the speed to run as 1x. Java would be around 1.4x slower, and  JavaScript is 1.6x, python 40x, and ruby 100x. The only good competitor in the house is Rust because its compiled code  runs straight on the CPU efficiently with lots of quality-of-life additions. Rust gives almost similar results if  you do not play around with memory-intensive problems. Another honorable mention is WASM - Web Assembly, although it is  a bytecode for a virtual machine, many programming languages are able to target it(compile for it), it is becoming blazing fast and it is getting traction nowadays, keep tuned. </p> <p></p>"},{"location":"intro/01-introduction/#who-should-learn-c","title":"Who should learn C++","text":"<p>YOU! Yes, seriously, I don\u2019t know you, but I am pretty sure you should know how to code in any language. C++  can be challenging, it is a fact, but if you dare to challenge yourself to learn it, your life will be somewhat better.</p> <p>Let\u2019s cut to the bullets:</p> <ol> <li>The ones who seek to build efficient modules for mobile apps, such as the video/image processing unit;</li> <li>Game developers. Even the gameplay developers that usually only script things should know how to ride a horse(CPU)     fast;</li> <li>Researchers looking to not waste time by coding inefficient code and wait hours, even days, to see the result of     their calculations. They should reduce the costs of renting CPU clusters;</li> <li>Computer scientists are those who should know how a computer works. After all, C++ is one of the preferred     programming languages that unlocks all the power of the CPU;</li> <li>Engineers, in general, should know how to simulate things efficiently;</li> </ol>"},{"location":"intro/01-introduction/#how-do-machines-run-code","title":"How do machines run code?","text":"<p>The first thing is: the CPU does not understand any programming language, only binary instructions. So you have to  convert your code into something the machine can understand. This is the job of the compiler. A compiler is a  piece of software that reads a text file written following the rules of a programming language and essentially  converts it into binary instructions that the CPU can execute. There are many strategies and many ways of doing it. So, given its nature of being near assembly, with C++, you will control precisely what instructions the CPU will  run.</p> <p>But, there is a catch here: for each CPU, you will need a compiler for that instruction set. Ex.: the compiler GCC can generate an executable program for ARM processors, and the generated program won\u2019t work on x86 processors; In the same  way, an x64 executable won\u2019t work on an x86; you need to match the binary instructions generated by the compiler with  the same instruction set available on the target CPU you want to run it. Some compilers can cross-compile: the compiler  runs in your machine on your CPU with its instruction set, but the binary generated only runs on a target machine with  its own instruction set.</p> <pre><code>graph TD\n    START((Start))--&gt;\n    |Source Code|PreProcessor--&gt;\n    |Pre-processed Code|Compiler--&gt;\n    |Target Assembly Code|Assembler--&gt;\n    |Relacable Machine Code|Linker--&gt;\n    |Executable Machine Code|Loader--&gt;\n    |Operation System|Memory--&gt;\n    |CPU|RUN((Run))</code></pre>"},{"location":"intro/01-introduction/#program-life-cycle","title":"Program Life Cycle","text":"<p>Software development is complex and there is lots of styles, philosophies and standard, but the overall structure  looks like this:</p> <ol> <li>Analysis, Specification, Problem definition </li> <li>Design of the Software (pseudocode/algorithm, flowchart), Problem analysis</li> <li>Implementation / Coding</li> <li>Testing and Debugging - In TDD(Test Driven Development) we write the tests first.</li> <li>Maintenance - Analytics and Improvements</li> <li>End of Life</li> </ol>"},{"location":"intro/01-introduction/#pseudocode","title":"Pseudocode","text":"<p>Pseudocode is a way of expressing algorithms using a combination of natural language and programming constructs. It  is not a programming language and cannot be compiled or executed, but it provides a clear and concise way to  describe the steps of an algorithm. Here is an example of pseudocode that describes the process of finding the  maximum value in a list of numbers:</p> <pre><code>set maxValue to 0\nfor each number in the list of numbers\n  if number is greater than maxValue\n    set maxValue to number\noutput maxValue\n</code></pre> <p>Pseudocode is often used as a planning tool for programmers and can help to clarify the logic of a program before it  is written in a specific programming language. It can also be used to communicate algorithms to people who are not familiar with a particular programming language. Reference</p>"},{"location":"intro/01-introduction/#flowcharts","title":"Flowcharts","text":"<p>A flowchart is a graphical representation of a process or system that shows the steps or events in a sequential  order. It is a useful tool for demonstrating how a process works, identifying potential bottlenecks or  inefficiencies in a process, and for communicating the steps involved in a process to others. </p> <p>Flowcharts are typically composed of a series of boxes or shapes, connected by arrows, that represent the steps in  a process. Each box or shape usually contains a brief description of the step or event it represents. The arrows  show the flow or movement from one step to the next. </p> <p>Flowcharts can be used in a variety of settings, including business, engineering, and software development. They  are particularly useful for demonstrating how a process works, identifying potential issues or bottlenecks in the  process, and for communicating the steps involved in a process to others. </p> <p>There are many symbols and notations that can be used to create flowcharts, and different organizations  and industries may have their own standards or conventions for using these symbols. Some common symbols and  notations used in flowcharts include: </p> <ol> <li>Start and end symbols: These are used to indicate the beginning and end of a process.</li> <li>Process symbols: These are used to represent the various steps or events in a process.</li> <li>Decision symbols: These are used to represent a decision point in a process, where the flow of the process depends on the outcome of a decision. </li> <li>Connector symbols: These are used to connect the various symbols in a flowchart, showing the flow or movement from one step to the next.</li> <li>Annotation symbols: These are used to add additional information or notes to a flowchart.</li> </ol> <p>By using a combination of these symbols and notations, you can create a clear and concise flowchart that effectively communicates the steps involved in a process or system. Reference</p> <p>I suggest using the tool Code2Flow to write pseudocode and see the flowchart drawn in real  time. But you can draw them on Diagrams. If you are into sequence diagrams, I suggest using sequencediagram.org.</p>"},{"location":"intro/01-introduction/#practice","title":"Practice","text":"<p>Try to think ahead the problem definition by questioning yourself before expressing the algorithm as pseudocode or  flowchart:  - What are the inputs? - What is a valid input? - How to compute the math? - What is the output? - How many decimals is needed to express the result?</p> <p>Use diagrams to draw a flowchart or use Code2Flow to  write a working pseudocode to: 1. Compute the weighted average of two numbers. The first number has weight of 1 and the     second has weight of 3;  2. Area of a circle; 3. Compute GPA; 4. Factorial number;</p>"},{"location":"intro/01-introduction/#glossary","title":"Glossary","text":"<p>It is expected for you to know superficially these terms and concepts. Research about them. It is not strictly required, because we are going to cover them in class.</p> <ul> <li>CPU</li> <li>GPU</li> <li>ALU</li> <li>Main Memory</li> <li>Secondary Memory</li> <li>Programming Language</li> <li>Compiler</li> <li>Linker</li> <li>Assembler</li> <li>Pseudocode</li> <li>Algorithms</li> <li>Flowchart</li> </ul>"},{"location":"intro/01-introduction/#activities","title":"Activities","text":"<ol> <li>Sign up on beecrowd. If you are a enrolled student, look for the key in canvas to be assigned to the coding assignments. </li> <li>https://blockly.games/maze - test your ability to solve small problems via block programming</li> <li>https://codecombat.com/ - very interesting game</li> <li>https://scratch.mit.edu/ - start a project and make it say hello when you click on it</li> </ol>"},{"location":"intro/01-introduction/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion this is publicly  visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me.</p>"},{"location":"intro/02-tooling/","title":"Tools for C++ development","text":"<p>Opinion</p> <p>This list is a mix of standard tools and personal choice. It is a good starting point, but in the future you will be impacted by other options, just keep your mind open to new choices.</p> <ul> <li> Version Control<ul> <li> GIT</li> <li> Github</li> <li> GitKraken</li> </ul> </li> <li> Compiler</li> <li> CMake</li> </ul> <p>Every programing language use different set of tools in order to effectively code. In C++ you will need to learn how to use a bunch of them to solve problems and develop software.</p>"},{"location":"intro/02-tooling/#version-control","title":"Version Control","text":"<p>Version control are tools that help you to keep track of your code changes. It is a must have tool for any developer. You can keep track the state of your code, and if you mess up something, you can go back to a previous state. It is also a great tool to collaborate with other developers. You can work on the same codebase without messing up each other work.</p>"},{"location":"intro/02-tooling/#git","title":"GIT","text":"<p>Optional</p> <p>Install Git</p> <p> Git is a version control system that is used to track changes to files, including source code, documents, and other types of files. It allows multiple people to work on the same files concurrently, and it keeps track of all changes made to the files, making it easy to go back to previous versions or merge changes made by different people. Git is widely used by developers for managing source code, but it can be used to track changes to any type of file. It is particularly useful for coordinating work on projects that involve multiple people, as it allows everyone to see and track changes made by others.</p>"},{"location":"intro/02-tooling/#github","title":"Github","text":"<p>Action</p> <p>Github Student Pack</p> <p> Github is a web-based platform for version control and collaboration on software projects. It is a popular platform for developers to share and collaborate on code, as well as to track and manage software development projects. GitHub provides version control using Git, a version control system that allows developers to track changes to their codebase and collaborate with other developers on the same codebase. It also includes a range of features such as bug tracking, project management, and team communication tools. In addition to being a platform for software development, GitHub is also a community of developers and a marketplace for buying and selling software development services.</p> <p>In this course we are going to extensively use GITHUB functionalities. So create an account now with your personal account. Use a meaningful username. Avoid names that hard to associate with you. If you have a educational email or student id, apply for the Github Student Pack, so you will have access to lots of free tools.</p> <p>It is nice to have <code>git</code> in your machine, but it is not required, because we are going to use gui via gui tools. See  GitKraken below. </p>"},{"location":"intro/02-tooling/#gitkraken","title":"GitKraken","text":"<p>Action</p> <p>Install Gitkraken</p> <p>GitKraken  is a Git client for Windows, Mac, and Linux that provides a graphical interface for working with Git repositories. It allows users to manage Git repositories, create and review changes to code, and collaborate with other developers. Some features of GitKraken include a visual representation of the repository's commit history, the ability to stage and discard changes, and support for popular version control systems like GitHub and GitLab. GitKraken is designed to be user-friendly and to make it easier for developers to work with Git, particularly for those who may be new to version control systems.</p> <p>Gitkraken is a paid software, and it is free for public repositories, but you can have all enterprise and premium functionalities enabled for free with the student pack and described before.  </p> <p>Install Gitkraken. If you login into gitkraken using GitHub with student pack it will unlock all pro features.</p>"},{"location":"intro/02-tooling/#compiler","title":"Compiler","text":"<p>A compiler is a type of computer program that translates source code into machine instructions that can be run  or the <code>CPU</code> or interpreted in a <code>Virtual Machine</code>.</p> <pre><code>graph TD\n  SRC[Source Code] --&gt; |Assembly| OBJ[Machine Code];\n  OBJ --&gt; EXE[Executable];\n  OBJ --&gt; LIB[Library];</code></pre> <ul> <li><code>Source Code</code> in C++, is associated to two different type of textual file extensions: <code>.cpp</code> for sources and <code>.h</code> for header files. It is what the developer writes.</li> <li><code>Assembly</code> is a human readable representation of the <code>Machine Code</code>. It is not the <code>Machine Code</code> itself, but it is a representation of it. It is a way to make the <code>Machine Code</code> human readable.</li> <li><code>Machine Code</code> is what the <code>CPU</code> can run and understand. It is a sequence of <code>0</code> and <code>1</code> that the <code>CPU</code> can understand and execute. It is not human readable.</li> <li><code>Executable</code> is the result of the compilation process. It is a file that can be executed by the <code>Operating System</code>.</li> <li><code>Library</code> is a collection of <code>Machine Code</code> that can be used by other programs.</li> <li><code>Executable</code> and <code>Library</code> Are binary file that contains the <code>Machine Code</code> instructions that the <code>CPU</code> can execute.</li> </ul> <p>Note</p> <p>In compiled languages, the end user only receives the executables and libraries. The source code is not distributed.</p> <p>Here you can see briefly a small function to square a number in <code>C++</code> compiled via <code>GCC</code> into a <code>x86-64</code> <code>assembly</code>. The left side is the <code>Source Code</code> and the right side is the code compiled into a human-readble <code>Assembly</code>. This code still needs links to the <code>Operation System</code> in order to be executed.</p>"},{"location":"intro/02-tooling/#notes-on-virtual-machines-vm","title":"Notes on Virtual Machines (VM)","text":"<p>Tip</p> <p>The knowledge of this section is not required for this course, but it is good to know.</p> <p>Some languages such as <code>Java</code>, <code>C#</code> and others, compile the <code>Source Code</code> into <code>bytecode</code> that runs on top of an abstraction layer called <code>Virtual Machine</code> (VM). The VM is a software that runs on top of the <code>Operating System</code> and it is responsible to translate the <code>bytecode</code> into <code>Machine Code</code> that the <code>CPU</code> can understand. This is a way to make the <code>Source Code</code> portable across different <code>Operating Systems</code> and <code>CPU</code> architectures - <code>cross-platform</code>. But this abstraction layer has it cost and it is not as efficient as the <code>Machine Code</code> itself. </p> <p>To speed up the execution, some <code>VM</code> can <code>Just In Time</code> (<code>JIT</code>) compile the <code>bytecode</code> into <code>Machine Code</code> at runtime when the <code>VM</code> detects parts of <code>Source Code</code> is running a lot(<code>Hotspots</code>), to speed up the execution. When this optmization step is happening, the machine is warming up.</p> <pre><code>graph TD\n  SRC[Source Code] --&gt; |Compiles| BYT[Bytecode];\n  BYT --&gt; |JIT Compiler| CPU[Machine Code];</code></pre> <p>Note</p> <p>In languages that uses VMs, the end user receives the bytecode. The source code is not distributed.</p>"},{"location":"intro/02-tooling/#notes-on-interpreters","title":"Notes on Interpreters","text":"<p>Tip</p> <p>The knowledge of this section is not required for this course, but it is good to know.</p> <p>Some languages such as <code>Python</code>, <code>Javascript</code> and others, do not compile the <code>Source Code</code>, instead, they run on top a program called <code>Interpreter</code> that reads the <code>Source Code</code> and executes it line by line.</p> <pre><code>graph TD\n  SRC[Source Code] --&gt; |read line| INT[Interpreter];\n  INT --&gt; |translates| CPU[Machine Code];</code></pre> <p>Some <code>Interpreters</code> are <code>Ahead Of Time</code> (<code>AOT</code>) and they compile the <code>Source Code</code> into <code>Machine Code</code> before the <code>Source Code</code> is executed.</p> <pre><code>graph TD\n  SRC[Source Code] --&gt; |AoT compile| INT[Bytecode / Machine Code];\n  INT --&gt; CPU;</code></pre> <p>Note</p> <p>In intrepreted languages, the end user receives the source code. Sometimes the source code is obfuscated, but it is still readable. </p>"},{"location":"intro/02-tooling/#platform-specific","title":"Platform specific","text":"<p>This where things get tricky, C++ compiles the code into a binary that runs directly on the processor and interacts with the operating system. So we can have multiple combinations here. Most compilers are cross-platform, but there is exceptions. And to worsen it, some Compilers are tightly coupled with some IDEs(see below, next item). </p> <p>I personally prefer to use CLang to be my target because it is the one that is most reliable cross-platform compiler. Which means the code will work as expected in most of the scenarios, the feature support table is the same across all platforms. But GCC is the more bleeding edge, which means usually it is the first to support all new fancy features C++ introduces.</p> <p>No need to download anything here. We are going to use the CLion IDE. See below topics.</p>"},{"location":"intro/02-tooling/#cmake","title":"CMake","text":"<p>CMake CMake is a cross-platform free and open-source software tool for managing the build process of software using a compiler-independent method. It is designed to support directory hierarchies and applications that depend on multiple libraries. It is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice.</p> <p>Note</p> <p>If you use a good IDE(see next topic), you won't need to download anything here. </p> <p>CMake is typically used in conjunction with native build environments such as Make, Ninja, or Visual Studio. It can also generate project files for IDEs such as Xcode and Visual Studio. You can see a full list of supported generators here. </p> <p>Here is a simple example of a <code>CMakeLists.txt</code> file that can be used to build a program called \"myproject\" that consists of a single source file called \"main.cpp\":</p> <pre><code># Set minimum version of CMake that can be used\ncmake_minimum_required(VERSION 3.10)\n# Set the project name\nproject(myproject)\n# Add executable named \"myproject\" to be built from the source \"main.cpp\"\nadd_executable(myproject main.cpp)\n</code></pre> <p>Warning</p> <p>Every executable can only cave one <code>main</code> function. Each file with a main function describes a new executable program. If you want to have multiple executables in the same project, in other words, you want to manage multiple executables in the same place, you can change the cmake descriptor to match that as follows, and use your IDE to switch between them:</p> <pre><code>cmake_minimum_required(VERSION 3.10)\nproject(myproject)\nadd_executable(myexecutable1 main1.cpp)\nadd_executable(myexecutable2 main2.cpp)\n</code></pre> <p>Tip</p> <p>If you are using a nice IDE, you won't need to run this on the command line. So go to next topic.    </p> <p>If you want to build via command line this project, you would first generate a build directory, and then run CMake to build the files using the detected compiler or IDE:</p> <pre><code>cmake -S. -Bbuild\ncmake --build build -j20\n</code></pre> <p>This will create a Makefile or a Visual Studio solution file in the build directory, depending on your platform and compiler. You can then use the native build tools to build the project by running \"make\" or opening the solution file in Visual Studio.</p> <p>CMake provides many options and variables that can be used to customize the build process, such as setting compiler flags, specifying dependencies, and configuring installation targets. You can learn more about CMake by reading the documentation at https://cmake.org/.</p>"},{"location":"intro/02-tooling/#ide","title":"IDE","text":"<p>An integrated development environment (IDE) is a software application that provides comprehensive facilities to  computer programmers for software development. An IDE typically integrates a source code editor, build automation  tools, and a debugger. Some IDEs also include additional tools, such as a version control system, a class browser,  and a support for literate programming. IDEs are designed to maximize programmer productivity by providing tight-knit components with similar user interfaces. This can be achieved through features such as auto-complete, syntax highlighting, and code refactoring. Many IDEs also provide a code debugger, which allows the programmer to step through code execution and find and fix errors. Some examples of popular IDEs include Eclipse, NetBeans, Visual Studio, and Xcode. Each of these IDEs has its own set of features and capabilities, and developers may choose one based on their specific needs and preferences.</p> <p>In this course, it is strongly suggested to use an IDE in order to achieve higher quality of deliveries, a good IDE  effectively flatten the C++ learning curve. You can opt out and use everything by hand, of course, and it will deepen  your knowledge on how things work but be assured it can slow down your learning process. Given this course is result  oriented, it is not recommended to not use an IDE here. So use one.</p> <p>OPINION: The most pervasive C++ IDE is CLion and this the one I am going to use. If  you use it too, it would be easier to follow my recorded videos. It works on all platforms Windows, Linux and Mac. I  recommend downloading it via Jetbrains Toolbox. If you are a student, apply for student pack for free here. On Windows, CLion embeds  a GCC compiler or optionally can use visual studio, while on Macs it requires the xcode command line tools, and on  Linux, uses GCC from the system installation.</p> <p>The other options I suggest are:</p>"},{"location":"intro/02-tooling/#on-all-platforms","title":"On all platforms","text":"<p>REPLIT - an online and real-time multiplayer IDE. It is slow and lack many functionalities,  but can be used for small scoped activities or work with a friend.</p> <p>VSCode - a small and highly modularized code editor, it have lots of extensions,  but it can be complex to set up everything needed: git, cmake, compiler and other stuff.</p>"},{"location":"intro/02-tooling/#on-windows","title":"On Windows:","text":"<p>Visual Studio - mostly for Windows. When installing, mark C++ development AND  search and install additional tools \"CMake\". Otherwise, this repo won't work smoothly for you.</p> <p>DevC++ - an outdated and small IDE. Lacks lots of functionalities, but if you don't  have HD space or use an old machine, this can be your option. In long term, this choice would be bad for you for the  lack of functionalities. It is better to use REPLIT than this tool, in my opinion.</p>"},{"location":"intro/02-tooling/#on-osx","title":"On OSX","text":"<p>XCode - for OSX and Apple devices. It is required at least to have the Command  Line Tools. CLion on Macs depends on that. </p> <p>Xcode Command Line Tools is a small suite of software development tools that are installed on your Mac along with Xcode. These tools include the GCC compiler, which is used to compile C and C++ programs, as well as other tools such as Make and GDB, which are used for debugging and development. The Xcode Command Line Tools are necessary for working with projects from the command line, as well as for using certain software development tools such as Homebrew.</p> <p>To install the Xcode Command Line Tools, you need to have Xcode installed on your Mac. To check if Xcode is already installed, open a Terminal window and type:</p> <p><code>xcode-select -p</code></p> <p>If Xcode is already installed, this command will print the path to the Xcode developer directory. If Xcode is not installed, you will see a message saying \"xcode-select: error: command line tools are not installed, use xcode-select --install to install.\"</p> <p>To install the Xcode Command Line Tools, open a Terminal window and type:</p> <p><code>xcode-select --install</code></p> <p>This will open a window that prompts you to install the Xcode Command Line Tools. Follow the prompts to complete the installation.</p> <p>Once the Xcode Command Line Tools are installed, you can use them from the command line by typing commands such as gcc, make, and gdb. You can also use them to install and manage software packages with tools like Homebrew.</p>"},{"location":"intro/02-tooling/#on-linux","title":"On Linux","text":"<p>If you are using Linux, you know the drill. No need for further explanations here, you are ahead of the others.</p> <p>If you are using an Ubuntu distro, you can try this to install most of the tools you will need here:</p> <pre><code>  sudo apt-get update &amp;&amp; sudo apt-get install -y build-essential git cmake lcov xcb libx11-dev libx11-xcb-dev libxcb-randr0-dev\n</code></pre> <p>In order to compile: <pre><code>g++ inputFile.cpp -o executableName\n</code></pre></p> <p>Where <code>g++</code> is the compiler frontend program to compile your C++ source code; <code>inputFile.cpp</code> is the filename you want to compile, you can pass multiple files here separated by spaces ex.: <code>inputFile1.cpp inputFile2.cpp</code>; <code>-o</code> means the next text will be the output program name where the executable will be built, (for windows, the name should end with <code>.exe</code> ex.: <code>program.exe</code>).</p> <p>You will have a plethora of editors and IDEs. The one I can suggest is the VSCode, Code::Blocks or KDevelop. But I  really prefer CLion.</p>"},{"location":"intro/02-tooling/#clion-project-workflow-with-cmake","title":"CLion project workflow with CMake","text":"<p>When you create a new project, select <code>New C++ Executable</code>, set the <code>C++ Standard</code> to the newest one, <code>C++20</code> is enough, and place in a folder location where you prefer.</p> <p>CLion automatically generate 2 files for you.  - <code>CMakeLists.txt</code> is the CMake multiplatform project descriptor, with that, you can share your project with colleagues that are using different platforms than you. - <code>main.cpp</code> is the entry point for your code.</p> <p>It is not the moment to talk about multiple file projects, but if you want to get ready for it, you will have to edit the <code>CMakeLists.txt</code> file and add them in the <code>add_executable</code> function. </p>"},{"location":"intro/02-tooling/#hello-world","title":"Hello World","text":"<p>Hello World <pre><code>// this a single line comment and it is not compiled. comments are used to explain the code.\n// you can do single line comment by adding // in front of the line or\n// you can do multi line comments by wrapping your comment in /* and */ such as: /* insert comment here */\n/* this is\n * a multi line\n * comment\n */\n#include &lt;iostream&gt; // this includes an external library used to deal with console input and output\n\nusing namespace std; // we declare that we are going to use the namespace std of the library we just included \n\n// \"int\" means it should return an integer number in the end of its execution to communicate if it finished properly\n// \"main()\" function where the operating system will look for starting the code.\n// \"()\" empty parameters. this main function here needs no parameter to execute\n// anynthing between { and } is considered a scope. \n// everything stack allocated in this scope will be deallocated in the end of the scope. ex.: local variables. \nint main() {\n    /* \"cout\" means console output. Print to the console the content of what is passed after the \n     * \"&lt;&lt;\" stream operator. Streams what in the wright side of it to the cout object\n     * \"endl\" means end line. Append a new line to the stream, in the case, console output.\n     */\n    cout &lt;&lt; \"Hello World\" &lt;&lt; endl;\n\n    /* tells the operating system the program finished without errors. Any number different from that is considered \n     * a error code or error number.\n     */\n    return 0; \n}\n</code></pre></p>"},{"location":"intro/02-tooling/#hello-username","title":"Hello Username","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt; // structure to deal with a char sequence, it is called string\nusing namespace std;\nint main(){\n    // invites the user to write something\n    cout &lt;&lt; \"Type your name: \" &lt;&lt; endl;\n\n    /* * string means the type of the variable, this definition came from the string include\n     * username means the name of the variable, the container to hold and store the data\n     */\n    string username;\n    /*\n     * cin mean console input. It captures data from the console.\n     * note the opposite direction of the stream operator. it streams what come from the cin object to the variable.\n     */\n    cin &gt;&gt; username;\n    // example of how to stream and concatenate texts to the console output;\n    cout &lt;&lt; \"Hello \" &lt;&lt; username &lt;&lt; endl;\n}\n</code></pre>"},{"location":"intro/02-tooling/#common-bugs","title":"Common Bugs","text":"First documented bug found in 1945"},{"location":"intro/02-tooling/#1-syntax-error","title":"1. Syntax error","text":"<p>Syntax errors in C++ are usually caused by mistakes in the source code that prevent the compiler from being able to understand it. Some common causes of syntax errors include: 1. Omitting a required component of a statement, such as a semicolon at the end of a line or a closing curly brace. 2. Using incorrect capitalization or spelling in a keyword or identifier. 3. Using the wrong punctuation, such as using a comma instead of a semicolon. 4. Mixing up the order of operations, such as using an operator that expects two operands before the operands have been provided.</p> <p>To fix a syntax error, you will need to locate the source of the error and correct it in the code. This can often be a challenging task, as syntax errors can be caused by a variety of factors, and it is not always immediately clear what the problem is. However, there are a few tools that can help you locate and fix syntax errors in your C++ code: 1. A compiler error message: When you try to compile your code, the compiler will often provide an error message  that can help you locate the source of the syntax error. These error messages can be somewhat cryptic, but they usually include the line number and a brief description of the problem. 2. A text editor with syntax highlighting: Many text editors, such as Visual Studio or Eclipse, include syntax highlighting, which can help you identify syntax errors by coloring different parts of the code differently. For example, keywords may be highlighted in blue, while variables may be highlighted in green. 3. A debugger: A debugger is a tool that allows you to step through your code line by line, examining the values of variables and the state of the program at each step. This can be a very useful tool for tracking down syntax errors, as it allows you to see exactly where the error occurs and what caused it.</p> <p>Reference</p>"},{"location":"intro/02-tooling/#2-logic-error","title":"2. Logic Error","text":"<p>A logic error in C++ is an error that occurs when the code produces unintended results or behaves in unexpected   ways due to a mistake in the logic of the program. This type of error is usually caused by a coding mistake, such as   using the wrong operator, omitting a necessary statement, or using the wrong variable. Here are some common causes of   logic errors in C++:</p> <ul> <li>Incorrect use of conditional statements (e.g., using the wrong comparison operator or forgetting to include a necessary else clause)</li> <li>Mistakenly using the assignment operator (=) instead of the equality operator (==) in a conditional statement</li> <li>Omitting a necessary loop iteration or failing to terminate a loop at the appropriate time</li> <li>Using the wrong variable or array index</li> <li>Incorrectly calling a function or passing the wrong arguments to a function </li> </ul> <p>To fix a logic error in C++, you will need to carefully examine your code and identify the mistake. It may be helpful to use a debugger to step through your code and see how it is executing, or to add print statements to help you understand what is happening at each step.</p> <p>Reference</p>"},{"location":"intro/02-tooling/#3-run-time-error","title":"3. Run-time error","text":"<p>A runtime error in C++ means that there is an error in your program that is causing it to behave unexpectedly or  crash during runtime, i.e., after you have compiled and run the program. There are many possible causes of runtime errors in C++, including:</p> <ul> <li>Dereferencing a null pointer</li> <li>Accessing an array out of bounds</li> <li>Using an uninitialized variable</li> <li>Trying to divide by zero</li> <li>Attempting to use an object that has been deleted or has gone out of scope</li> </ul> <p>To troubleshoot a runtime error, you'll need to identify the source of the error by examining the error message and the code that is causing the error. Some common tools and techniques you can use to troubleshoot runtime errors include:</p> <ul> <li>Using a debugger to step through your code line by line </li> <li>Printing out the values of variables to see where the error might be occurring</li> <li>Adding additional debug statements or logging to your code to help identify the source of the error</li> </ul> <p>It's also a good idea to ensure that you have compiled your code with debugging symbols enabled, as this will  allow you to use the debugger to get a better understanding of what is happening in your code. will cause the program  to crash during run-time</p> <p>Reference</p>"},{"location":"intro/02-tooling/#exercises","title":"Exercises:","text":"<ul> <li>Research and read about other notable errors: segmentation fault, stack overflow, buffer overflow.</li> <li>Hello World - just print <code>hello world</code>.</li> </ul>"},{"location":"intro/02-tooling/#homework","title":"Homework","text":"<ol> <li>Setup your environment for your needs following the choices given above. If you are unsure, use CLion and you     will be mostly safe. </li> <li>Fork this repo privately. You will have to do your assignments there. Go to the home repo and hit fork.</li> <li>Clone this repo to your machine. gitkraken + github gitkraken clone gitkraken big tutorial</li> <li>Make sure the CMake option \"ENABLE_INTRO\" is set as ON in CMakeLists.txt file in the root directory in order to see     and enable all activities.</li> <li>(enrolled students) If you are enrolled in a class with me, share your repo with me, so I can track your evolution. And do the activities described there.</li> <li>(optional) star this repo :-)</li> </ol>"},{"location":"intro/02-tooling/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion this is publicly  visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me.</p>"},{"location":"intro/03-datatypes/","title":"Variables, Data Types, Expressions, Assignment, Formatting","text":""},{"location":"intro/03-datatypes/#variables","title":"Variables","text":"<p>Variables are containers to store information and facilitates data manipulation. They are named and typed. Detailed Reference</p> <p>Container sizes are measured in Bytes. Bytes are the smallest addressable unit in a computer. Each byte is composed by 8 bits. Each bit can be <code>1</code> or <code>0</code> (<code>true</code> or <code>false</code>). If one byte have 8 bits and each bit one can hold 2 different values, the combination of all possible cases that a byte can be is <code>2^8</code> which is <code>256</code>, so one byte can hold up to <code>256</code> different states or possibilities. </p>"},{"location":"intro/03-datatypes/#data-types","title":"Data Types","text":"<p>There are several types of variables in C++, including:</p> <ul> <li>Primitive data types: These are the most basic data types in C++ and include integer, floating-point, character, and boolean types.</li> <li>Derived data types: These data types are derived from the primitive data types and include arrays, pointers, and references.</li> <li>User-defined data types: These data types are defined by the programmer and include structures, classes, and enumerations.</li> </ul> <p>Detailed Reference</p>"},{"location":"intro/03-datatypes/#numeric-types","title":"Numeric types","text":"<p>There are some basic integer container types with different sizes. It can have some type modifiers to change the default behavior or the type.</p> <p>The common size of the integer containers are <code>1</code>(<code>char</code>), <code>2</code>(<code>short int</code>), <code>4</code>(<code>int</code>) or <code>8</code>(<code>long long</code>) bytes. For a more detailed coverage read this.</p> <p>Note</p> <p>But the only guarantee the C++ imposes is: <code>1 == sizeof(char) &lt;= sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long) &lt;= sizeof(long long)</code> and it can result in compiler defined behaviours where a <code>char</code> can have 8 bytes and a <code>long long</code> can be 1 byte.</p> <p>Note</p> <p>If you care about being cross-platform conformant, you have to always specify the sign modifier or use a more descriptive type such as listed here.</p> <p>For floating pointing numbers, the container size can be <code>4</code>(<code>float</code>), <code>8</code>(<code>double</code>), <code>10</code>(deprecated) or <code>16</code>(<code>long double</code>) bytes.</p> <p>The sign modifiers can be <code>signed</code> and <code>unsigned</code> and are applicable only for integer types. </p> <p>The default behavior of the types in a x86 cpu are as signed numbers and the first bit of the container is the signal. If the first bit is <code>0</code>, it means it is positive.  If the first bit is <code>1</code>, it means it is negative. More details.</p> <p>Which means that if the container follow two complement and is the size of 1 byte(8 bits), it have 1 bit for the signal and 7 bit for the content. So this number goes from <code>-128</code> up to <code>127</code>, this container is typically a <code>signed char</code>. The positive size has 1 less quantity in absolute than the negative because 0 is represented in positive side. There are <code>256</code> numbers between <code>-128</code> and <code>127</code> inclusive.</p>"},{"location":"intro/03-datatypes/#char","title":"Char","text":"<p>A standard <code>char</code> type uses 1 byte to store data and follows complement of 1. Going <code>-127</code> to <code>127</code>, so tipically represents <code>255</code> numbers.</p> <p>A <code>signed char</code> follows complement of 2 and it can represent <code>2^8</code> or <code>256</code> different numbers. By default, in x86 machine char is signed and the represented numbers can go from <code>-2^7</code> or <code>-128</code> up to <code>2^7 - 1</code> or <code>127</code>.</p> <p>An <code>unsigned char</code></p> <p>Chars can be used to represent letters following the ascii table where each value means a specific letter, digit or symbol.</p> <p>Note</p> <p>A <code>char</code> can have different sizes to represent different character coding for different languages. If you are using hebrew, chinese, or others, you probably will need more than 1 byte to represent the chars. Use <code>char8_t</code> (UTF8), <code>char16_t</code>(UTF16) or <code>char36_t</code>(UTF32), to cover your character encoding for the language you are using.</p>"},{"location":"intro/03-datatypes/#ascii-table","title":"ASCII table","text":"<p>ASCII - American Standard Code for Information Interchange - maps a number to a character. It is used to represent letters, digits and symbols. It is a standard that is used by most of the computers in the world. </p> <p>It is a 7 bit table, so it can represent <code>2^7</code> or <code>128</code> different characters. The first 32 characters are control characters and the rest are printable characters. Reference. There are other tables that extend the ASCII table to 8 bits, or even 16 bits. </p> <p>The printable chacacters starts at number 32 and goes up to 126. The first 32 characters are control characters and the rest are printable.</p> <p> </p> ASCII Table <p>As you can imagine, this table is not enough to represent all the characters in the world(latin, chinese, japanese, etc). So there are other tables that extend the ASCII table to 8 bits, or even 16 bits.</p>"},{"location":"intro/03-datatypes/#integer","title":"Integer","text":"<p>Note</p> <p>Most of the information that I am covering here might be not precise, but the overall idea is correct. If you want a deep dive, read this.</p> <p>A standard <code>int</code> type uses 4 bytes to store data. It is signed by default.</p> <p>It can represent <code>2^32</code> or <code>4294967296</code> different numbers. As a signed type, it can represent numbers from <code>-2^31</code> or  <code>-2147483648</code> up to <code>2^31 - 1</code> or <code>2147483647</code>.</p> <p>The type <code>int</code> can accept sign modifiers as <code>signed</code> or <code>unsigned</code> to change the behavior of the first bit to act as a sign or not.</p> <p>The type <code>int</code> can accept size modifiers as <code>short</code> (2 bytes) or <code>long long</code> (8 bytes) to change the size and representation capacity of the container. Type declaration <code>short</code> and <code>short int</code> result in the same container size of 2 bytes. In the same way a <code>long long</code> or <code>long long int</code> reserves the same size of 8 bytes for the container.</p> <p>The type <code>long</code> or <code>long int</code> usually gives the same size of <code>int</code> as 4 bytes. Historical fact or myth: This abnormality, comes from the evolution of the definition of <code>int</code>: in the past, 2 bytes were enough for the majority of the scenarios in the 16 bits processors, but it frequently reached the limits of the container and it overflowed. So they changed the standard definition of a integer from being 2 bytes to 4 bytes, and created the short modifier. In this scenario the long int lost the reason to exist.</p> <p>Here goes a list of valid integer types and its probable size(it depends on the implementation, cpu architecture and operation system): - Size of 2 bytes: <code>short int</code>, <code>short</code>, <code>signed short int</code>, <code>signed short</code>, <code>unsigned short int</code>, <code>unsigned short</code>,  - Size of 4 bytes: <code>signed</code>, <code>unsigned</code>, <code>int</code>, <code>signed int</code>, <code>unsigned int</code>, <code>long int</code>, <code>long</code>, <code>signed long int</code>, <code>signed long</code>, <code>unsigned long int</code>, <code>unsigned long</code>, - Size of 8 bytes: <code>long long int</code>, <code>long long</code>, <code>signed long long int</code>, <code>signed long long</code>, <code>unsigned long long int</code>, <code>unsigned long long</code>. </p> <p>OPINION: I highly recommend the usage of these types instead, to ensure determinism and consistency between compilers, operating systems and cpu architectures.</p>"},{"location":"intro/03-datatypes/#float-pointing","title":"Float pointing","text":"<p>There are 3 basic types of floating point containers: <code>float</code>(4 bytes) and <code>double</code>(8 bytes) and <code>long double</code>(16 bytes) to represent fractional numeric types.</p> <p>The standard IEEE754 specifies how a floating point number is stored in the form of bits inside the container. The container holds 3 basic information to simulate the behavior of a fractional type inside a binary type: signal, exponent and fraction.</p> <p>Note</p> <p>This standard was very open to implementation definition in the past, and this is one of the root causes of non-determinism physics simulation. This is the main problem you cannot guarantee the same operation with the same pair of numbers will consistently give the same result across different types of processors and compilers, thus making the physics of a multiplayer game consistency hardly achievable. Many deterministic physics engines tend to not use this standard at all, and implement those behaviors via software on top of integers instead. There are 2 approaches to solve the floating-point determinism: softfloat that implement all the IEEE754 specifications via software, or implement some kind of fixed-point arithmetic on top of integers.</p>"},{"location":"intro/03-datatypes/#booleans","title":"Booleans","text":"<p><code>bool</code> is a special type that has the container size of 1 byte but the compiler can optimize and pack up to 8 <code>bool</code>s in one byte if they are declared in sequence.</p>"},{"location":"intro/03-datatypes/#enums","title":"Enums","text":"<p>An enumeration is a type that consists of a set of named integral constants. It can be defined using the <code>enum</code> keyword:</p> <pre><code>enum Color {\n  Red,\n  Green,\n  Blue\n};\n</code></pre> <p>This defines a new type called <code>Color</code>, which has three possible values: <code>Red</code>, <code>Green</code>, and <code>Blue</code>. By default, the values of these constants are <code>0</code>, <code>1</code>, and <code>2</code>, respectively. However, you can specify your own values:</p> <pre><code>enum Color {\n  Red = 5,\n  Green,  // 6\n  Blue    // 7\n};\n</code></pre> <p>You can then use the enumeration type just like any other type:</p> <pre><code>Color favoriteColor = Red;\n</code></pre> <p>Enumerations can also have their underlying type explicitly specified:</p> <pre><code>enum class Color : char {\n  Red, \n  Green,\n  Blue\n};\n</code></pre> <p>Here, the underlying type of the enumeration is <code>char</code>, so the constants <code>Red</code>, <code>Green</code>, and <code>Blue</code> will be stored as characters(1 byte size). The <code>enum class</code> syntax is known as a \"scoped\" enumeration, and it is recommended over the traditional <code>enum</code> syntax because it helps prevent naming conflicts. See the CppCoreGuidelines to understand better why you should prefer using this.</p> <pre><code>// You can make the value of the constants\n// explicit to make your debugging easier:\nenum class Color : char {\n  Red = 'r',\n  Green = 'g',\n  Blue = 'b'\n};\n</code></pre>"},{"location":"intro/03-datatypes/#special-derived-type-string","title":"Special derived type: string","text":"<p><code>string</code> is a derived type and in order to use it, string should be included in the beginning of the file or in the header. <code>char</code> are the basic unit of a <code>string</code> and is used to store words as a sequence of chars.</p> <p>In C++, a string is a sequence of characters that is stored in an object of the <code>std::string</code> class. The <code>std::string</code> class is part of the C++ Standard Library and provides a variety of functions and operators for manipulating strings.</p>"},{"location":"intro/03-datatypes/#void-type","title":"<code>void type</code>","text":"<p>When <code>void</code> type specifier is used in functions, it indicates that a function does not return a value.</p> <p>It can also be used as a placeholder for a pointer to a memory location to indicate that the pointer is \"universal\" and can point to data of any type, but this can be arguably a bad pattern, and should be used exceptionally when interchanging types with c-style API.</p> <p>We are going to cover this again when covering pointers and functions.</p>"},{"location":"intro/03-datatypes/#variable-naming","title":"Variable Naming","text":"<p>Variable names are called identifiers. In C++, you can use any combination of letters, digits, and underscores to name a variable, it should follow some rules:</p> <ul> <li>Variables can have numbers, en any position, except the first character, so the name does not begin with a digit. Ex. <code>point2</code> and <code>vector2d</code> are allowed, but <code>9life</code> isn't;</li> <li>Variable names are case-sensitive, so \"myVar\" and \"myvar\" are considered to be different variables;</li> <li>Can have <code>_</code> in any position of the identifier. Ex. <code>_myname</code> and <code>user_name</code> are allowed;</li> <li>It is not a reserved keyword;</li> </ul> <p>Keep in mind that it is a good practice to choose descriptive and meaningful names for your variables, as this can make your code easier to read and understand. Avoid using abbreviations or acronyms that may not be familiar to others who may read your code.</p> <p>It is also important to note that C++ has some naming conventions that are commonly followed by programmers. For example, it is common to use camelCase or snake_case to separate words in a variable name, and to use all lowercase letters for variables that are local to a function and all uppercase letters for constants.</p>"},{"location":"intro/03-datatypes/#variable-declaration","title":"Variable declaration","text":"<p>Variable declaration in C++ follows this pattern. <pre><code>TYPENAME VARIABLENAME;\n</code></pre> <code>TYPENAME</code> can be the name of any predefined type. See Variable Types for the types. <code>VARIABLENAME</code> can be anything as long it follow the naming rules. See Variable Naming for the naming rules.</p> <p>Note</p> <p>A given variable name can only be declared once in the same context / scope. If you try to redeclare the same variable, the compiler will accuse an error.</p> <p>Note</p> <p>You can redeclare the same variable name in different scopes. If one scope is parent of the other, the current will be used and will shadow the content of the one from outer scope. We are going to cover this more when we are covering multi-file projects and functions.</p> <p>Examples:</p> <pre><code>int a;       // integer variable\nfloat pi;    // floating-point variable\nchar c;      // character variable\nbool d;      // boolean variable\nstring name; // string variable \n</code></pre> <p>Note</p> <p>We are going to cover later in this course other complex types in other modules such as arrays, pointers and references.</p>"},{"location":"intro/03-datatypes/#variable-assignment","title":"Variable assignment","text":"<p><code>=</code> operator means that whatever the container have will be overwritten by the result of the right side statement. You should read it not as <code>equal</code> but as <code>receives</code> to avoid misunderstanding. Reference</p> <pre><code>int a = 10;         // integer variable\nfloat pi = 3.14;    // floating-point variable\nchar c = 'A';       // character variable\nbool d = true;      // boolean variable\nstring name = \"John Doe\"; // string variable \n</code></pre> <p>Every variable, by default, is not initialized. It means that you have to set the content of it after declaring. If the variable is read before the assignment, its content is garbage, it will read whatever is set in the memory stack for the given container location. So the best approach is to always set a value when a variable is declared or be assured that every variable is never read before an assigment.</p> <p>A <code>char</code> variable can be assigned by integer numbers or any characters between single quotes. <pre><code>char c;\nc = 'A'; // the content is 65 and the representation is A. see ascii table.\nc = 98; // the content is 98 and the representation is b. see ascii table.\n</code></pre></p> <p>A <code>bool</code> is by default either <code>true</code> or <code>false</code>, but it can be assigned by numeric value following this rule: - if the value is <code>0</code>, then the value stored by the variable is <code>false</code> (<code>0</code>); - if the value is anything different than <code>0</code>, the value stored is <code>true</code> (<code>1</code>);</p> <p>To convert a <code>string</code> to a <code>int</code>, you have to use a function stoi(for <code>int</code>), stol(for <code>long</code>) or stoll(for <code>long long</code>) because both types are not compatibles.</p> <p>To convert a <code>string</code> to a <code>float</code>, you have to use a function stof(for <code>float</code>), stod(for <code>double</code>), or stold(for <code>long double</code>) because both types are not compatibles.</p>"},{"location":"intro/03-datatypes/#literals","title":"Literals","text":"<p>Literals are values that are expressed freely in the code. Every numeric type can be appended with suffixes to specify explicitly the type to avoid undefined behaviors or compiler defined behaviors such as implicit cast or container size. </p>"},{"location":"intro/03-datatypes/#integer-literals","title":"Integer literals","text":"<p>There are 4 types of integer literals.  - decimal-literal: never starts with digit <code>0</code> and followed by any decimal digit; - octal-literal: starts with <code>0</code> digit and followed by any octal digit; - hex-literal: starts with <code>0x</code> or <code>0X</code> and followed by any hexadecimal digit; - binary-literal: starts with <code>0b</code> or <code>0B</code> and followed by any binary digit;</p> <pre><code>// all of these variables holds the same value, 42, but using different bases.\n// the right side of the = are literals\nint deci = 42; \nint octa = 052; \nint hexa = 0x2a; \nint bina = 0b101010;\n</code></pre> <p>Suffixes:</p> <ul> <li><code>no suffix</code> provided: it will use the first smallest signed integer container that can hold the data starting from <code>int</code>;</li> <li><code>u</code> or <code>U</code>: it will use the first smallest unsigned integer container that can hold the data starting from <code>unsigned int</code>;</li> <li><code>l</code> or <code>L</code>: it will use the first smallest signed integer container that can hold the data starting from <code>long</code>;</li> <li><code>lu</code> or <code>LU</code>: it will use the first smallest unsigned integer container that can hold the data starting from <code>unsigned long</code>;</li> <li><code>ll</code> or <code>LL</code>: it will use the long long signed integer container <code>long long</code>;</li> <li><code>llu</code> or <code>LLU</code>: it will use the long long unsigned integer container <code>unsigned long long</code>;</li> </ul> <pre><code>unsigned long long l1 = 15731685574866854135ull;\n</code></pre> <p>Reference</p>"},{"location":"intro/03-datatypes/#float-point-literals","title":"Float point literals","text":"<p>There are 3 suffixes in floating point decimals.</p> <ul> <li><code>no suffix</code> means the container is a double;</li> <li><code>f</code> suffix means it is a float container;</li> <li><code>l</code> suffix means it is a long double container;</li> </ul> <p>A floating point literal can be defined by 3 ways:</p> <ul> <li>digit-sequence decimal-exponent suffix(optional). <ul> <li><code>1e2</code> means its a <code>double</code> with the value of <code>1*10^2</code> or <code>100</code>;</li> <li><code>1e-2f</code> means its a <code>float</code> with the value of <code>1*10^-2</code> or <code>0.01</code>;</li> </ul> </li> <li>digit-sequence . decimal-exponent(optional) suffix(optional).  <ul> <li><code>2.</code> means it is a <code>double</code> with value of <code>2</code>; </li> <li><code>2.f</code> means it is a <code>float</code> with value of <code>2</code>;</li> <li><code>2.1l</code> means it is a <code>long double</code> with value of <code>2.1</code>;</li> </ul> </li> <li>digit-sequence(optional) . digit-sequence decimal-exponent(optional) suffix(optional)<ul> <li><code>3.1415f</code> means it is a <code>float</code> with value of <code>3.1415</code>;</li> <li><code>.1</code> means it is a <code>double</code> with value of <code>0.1</code>;</li> <li><code>0.1e1L</code> means it is a <code>long double</code> with value of <code>1</code>;</li> </ul> </li> </ul> <p>Reference</p>"},{"location":"intro/03-datatypes/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>In C++, you can perform common arithmetic operations is statements using the following operators Reference:</p> <ul> <li>Addition: <code>+</code></li> <li>Subtraction: <code>-</code></li> <li>Multiplication: <code>*</code></li> <li>Division: <code>/</code></li> <li>Modulus (remainder): <code>%</code></li> </ul> <p>There are two special cases called unary increment / decrement operators that may occur in before(prefixed) or after(postfixed) the variable name reference. If prefixed it is executed first and then return the result, if postfixed, it returns the current value and then execute the operation:</p> <ul> <li>Increment: <code>++</code>; </li> <li>Decrement: <code>--</code>;</li> </ul> <p>There are shorthand assignment operators reference that reassign the value of the variable after executing the arithmetic operation with the right side of the operator with the old value of the variable:</p> <ul> <li>Addition: <code>+=</code></li> <li>Subtraction: <code>-=</code></li> <li>Multiplication: <code>*=</code></li> <li>Division: <code>/=</code></li> <li>Modulus (remainder): <code>%=</code></li> </ul> <p>Here is an example of how to use these operators in a C++ program:</p> <pre><code>#include &lt;iostream&gt;\n\nint main() {\n  int a = 5;\n  int b = 2;\n\n  std::cout &lt;&lt; a + b &lt;&lt; std::endl; // Outputs 7\n  std::cout &lt;&lt; a - b &lt;&lt; std::endl; // Outputs 3\n  std::cout &lt;&lt; a * b &lt;&lt; std::endl; // Outputs 10\n  std::cout &lt;&lt; a / b &lt;&lt; std::endl; // Outputs 2\n  std::cout &lt;&lt; a % b &lt;&lt; std::endl; // Outputs 1\n  a++;\n  std::cout &lt;&lt; a &lt;&lt; std::endl; // Outputs 6\n  a--;\n  std::cout &lt;&lt; a &lt;&lt; std::endl; // Outputs 5\n\n  std::cout &lt;&lt; a++ &lt;&lt; std::endl; // Outputs 5 because it first returns the current value and then increments.\n  std::cout &lt;&lt; a &lt;&lt; std::endl; // Outputs 6\n\n  std::cout &lt;&lt; --a &lt;&lt; std::endl; // Outputs 5 because it first decrements the value and then return it already changed;\n  std::cout &lt;&lt; a &lt;&lt; std::endl; // Outputs 5\n\n  b *= 2; // it is a short version of b = b * 2; \n  std::cout &lt;&lt; b &lt;&lt; std::endl; // Outputs 4\n\n  b /= 2; // it is a short version of b = b / 2; \n  std::cout &lt;&lt; b &lt;&lt; std::endl; // Outputs 2\n\n  return 0;\n}\n</code></pre> <p>Note that the division operator (<code>/</code>) performs integer division if both operands are integers. If either operand is a floating-point type, the division will be performed as floating-point division. So <code>5/2</code> is <code>2</code> because both are integers, se we use integer division, but <code>5/2.</code> is <code>2.5</code> because the second one is a <code>double</code> literal.</p> <p>Also, the modulus operator (<code>%</code>) returns the remainder of an integer division. For example, <code>7 % 3</code> is equal to <code>1</code>, because <code>3</code> goes into <code>7</code> two times with a remainder of <code>1</code>.</p>"},{"location":"intro/03-datatypes/#implicit-cast","title":"Implicit cast","text":"<p>Implicit casting, also known as type coercion, is the process of converting a value of one data type to another data type without the need for an explicit cast operator. In C++, this can occur when an expression involves operands of different data types and the compiler automatically converts one of the operands to the data type of the other in order to perform the operation.</p> <p>For example:</p> <p><pre><code>int a = 1;\ndouble b = 1.5;\n\nint c = a + b; // c is automatically converted to a double before the addition\n</code></pre> In this example, the value of <code>b</code> is a double, while the value of <code>a</code> is an <code>int</code>. When the addition operator is used, the compiler will automatically convert a to a <code>double</code> before performing the addition. The result of the expression is a <code>double</code>, so <code>c</code> is also automatically converted to a <code>double</code> before being assigned the result of the expression.</p> <p>Implicit casting can also occur when assigning a value to a variable of a different data type. For example:</p> <pre><code>int a = 2;\ndouble b = a; // a is automatically converted to a double before the assignment\n</code></pre> <p>In this case, the value of <code>a</code> is an int, but it is being assigned to a double variable. The compiler will automatically convert the value of <code>a</code> to a <code>double</code> before making the assignment.</p> <p>It's important to be aware of implicit casting, because it can sometimes lead to unexpected results or loss of precision if not handled properly. In some cases, it may be necessary to use an explicit cast operator to explicitly convert a value to a specific data type.</p>"},{"location":"intro/03-datatypes/#explicit-cast","title":"Explicit cast","text":"<p>In C++, you can use an explicit cast operator to explicitly convert a value of one data type to another. The general syntax for an explicit cast are:</p> <pre><code>// ref: https://en.wikibooks.org/wiki/C%2B%2B_Programming/Programming_Languages/C%2B%2B/Code/Statements/Variables/Type_Casting\n(TYPENAME) value; // regular c-style. do not use this extensively\nstatic_cast&lt;TYPENAME&gt;(value); // c++ style conversion, arguably it is the preferred style. use this if you know what you are doing.\nTYPENAME(value); // functional initialization, slower but safer. might not work for every case. Use this if you are unsure or want to be safe.\nTYPENAME{value}; // initialization style, faster, convenient, concise and arguably safer because it triggers warnings. use this for the general case. \n</code></pre> <p>For example: <pre><code>int a = 7;\ndouble b = (double) a; // a is explicitly converted to a double\n</code></pre></p> <p>In this example, the value of <code>a</code> is an <code>int</code>, but it is being explicitly converted to a <code>double</code> using the explicit cast operator. The result of the cast is then assigned to the <code>double</code> variable <code>b</code>.</p> <p>Explicit casts can be useful in situations where you want to ensure that a value is converted to a specific data type, regardless of the data types of the operands in an expression. However, it's important to be aware that explicit casts can also lead to unexpected results or loss of precision if not used carefully. This behaviour is called narrowing.</p> <p>C-style: <pre><code>int a = 20001;\nchar b = (char) a; // b is assigned the ASCII value for the character '!'\n</code></pre></p> <p>In this case, the value of <code>a</code> is an <code>int</code>, but it is being explicitly converted to a <code>char</code> using the explicit cast operator. However, the range of values that can be represented by a <code>char</code> is much smaller than the range of values that can be represented by an <code>int</code>, so the value of <code>a</code> is outside the range that can be represented by a <code>char</code>. As a result, <code>b</code> is assigned the ASCII value for the character <code>1</code>, which is not the same as the original value of <code>a</code>. The value <code>!</code> is <code>33</code> in ASCII table, and <code>33</code> is the result of the <code>20001 % 256</code> where <code>256</code> is the number of elements the <code>char</code> can represent. In this case, what happened was a bug that is hard to track called <code>int overflow</code>.</p>"},{"location":"intro/03-datatypes/#auto-keyword","title":"<code>auto</code> keyword","text":"<p><code>auto</code> keyword is mostly a syntax sugar to automatically infer the data type. It is used to avoid writing the full declaration of complex types when it is easily inferred. <code>auto</code> is not a dynamic type, once it is inferred, it cannot be changed later like in other dynamic typed languages such as javascript.</p> <pre><code>auto i = 0; // automatically inferred as an integer type;\nauto f = 0.0f; // automatically inferred as a float type;\n\ni = \"word\"; // this won't work, because it was already inferred as an integer and integer container cannot hold string\n</code></pre>"},{"location":"intro/03-datatypes/#formatting","title":"Formatting","text":"<p>There are many functions to help you format the output in the way it is expected, here goes a selection of the most useful ones I can think. Yon can find more functions and manipulators here and here.</p> <p>To set a fixed precision for floating point numbers in C++, you can use the <code>std::setprecision</code> manipulator from the <code>iomanip</code> header, along with the <code>std::fixed</code> manipulator.</p> <p>Here's an example of how to use these manipulators to output a floating point number with a fixed precision of 3 decimal places: <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n\nint main() {\n  double num = 3.14159265;\n\n  std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt; num &lt;&lt; std::endl;\n  // Output: 3.142\n  return 0;\n}\n</code></pre></p> <p>You can also use the <code>std::setw</code> manipulator to set the minimum field width for the output, which can be useful for aligning the decimal points in a table of numbers.</p> <p>For example: <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n\nint main() {\n  double num1 = 3.14159265;\n  double num2 = 123.456789;\n\n  std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt; std::setw(8) &lt;&lt; num1 &lt;&lt; std::endl;\n  std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt; std::setw(8) &lt;&lt; num2 &lt;&lt; std::endl;\n  // Output:\n  //   3.142\n  // 123.457\n  return 0;\n}\n</code></pre></p> <p>Note that these manipulators only affect the output stream, and do not modify the values of the floating point variables themselves. If you want to store the numbers with a fixed precision, you will need to use a different method such as rounding or truncating the numbers.</p> <p>To align text to the right or left in C++, you can use the <code>setw</code> manipulator in the <code>iomanip</code> header and the <code>right</code> or <code>left</code> flag. More details here </p> <p>Here is an example:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n\nint main() {\n  std::cout &lt;&lt; std::right &lt;&lt; std::setw(10) &lt;&lt; \"Apple\" &lt;&lt; std::endl;\n  std::cout &lt;&lt; std::left &lt;&lt; std::setw(10) &lt;&lt; \"Banana\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <p>Both will print inside a virtual column with the size of 10 chars. This will output the following: <pre><code>    Apple\nBanana   \n</code></pre></p>"},{"location":"intro/03-datatypes/#optional-exercises","title":"Optional Exercises","text":"<p>Do all exercises up to this topic here.</p> <p>In order to get into coding, the easiest way to learn is by solving coding challenges. It is like learning any new language, you have to be exposed and involved. Do not do only the homeworks, otherwise you are going to fail. Another metaphor is: the homework is the like a competition that you have to run to prove that you are trained, but in order to train, you have to do small runs and do small steps first, so you have to train yourself ot least 2x per week.</p> <p>The best way to train yourself in coding and solving problems in my opinion is this:</p> <ol> <li>Sort Beecrowd questions from the most solved to the least solved questions here is the link of the list already filtered.</li> <li>Start solving the questions from the top to the bottom. Chose one from de the beginning, it would be one of the easiest;</li> <li>If you are feeling comfortable and being able to solve more than 3 per hour, you are allowed to skip some of the questions. It is just like in a gym, when you get used with the load, you increase it. Otherwise continue training slowly.</li> </ol>"},{"location":"intro/03-datatypes/#homework","title":"Homework","text":"<p>banknotes and coins - Here you will use formatting, modulus, casting, arithmetic operations, compound assignment. You don't need to use if-else.</p> <p>Hint. Follow this only if dont find your way of solving it. You can read the number as a double, multiply by 100 and then do a sequence of modulus and division operations. <pre><code>double input; // declare the container to store the input\ncin &gt;&gt; input; // read the input\n\nlong long cents = static_cast&lt;long long&gt;(input * 100); // number of cents. Note: if you just use float, you will face issues. \n\nlong long notes100 = cents/10000; // get the number of notes of 100 dollar (100 units of 100 cents) \ncents %= 10000; // remove the amount of 100 dollars\n</code></pre></p> <p>Another good way of solving it avoiding casting is reading the number as string and removing the point. Never use <code>float</code> for money</p> <pre><code>string input; // declare the container to store the input\ncin &gt;&gt; input; // read the input\n\n// given every input will have the dot, we should remove it. remove the dot `.`\ninput = input.erase(str.find('.'), 1);\n\n// not it is safe to use int, because no bit is lost in floating casting and nobody have more than MAX_INT cents.  \nint cents = stoll(input); // number of cents. \n\nlong long notes100 = cents/10000; // get the number of notes of 100 dollar (100 units of 100 cents) \ncents %= 10000; // update the remaining cents by removing the amount of 100 dollars in cents units\n</code></pre>"},{"location":"intro/03-datatypes/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion. Nhis is publicly visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me. Or visit the tutoring service.</p>"},{"location":"intro/04-conditionals/","title":"Conditionals, Switch, Boolean Operations","text":"<ul> <li>Boolean Operations</li> <li>Bitwise Operations</li> <li>Conditionals</li> <li>Switch</li> </ul>"},{"location":"intro/04-conditionals/#boolean-operations","title":"Boolean Operations","text":"<p>In C++, the boolean operators are used to perform logical operations on boolean values (values that can only be true or false).</p>"},{"location":"intro/04-conditionals/#and","title":"AND","text":"<p>And operators can be represented by <code>&amp;&amp;</code>(most common syntax) or <code>and</code>(C++20 and up - alternative operator representation). This operator represents the logical <code>AND</code> operation. It returns <code>true</code> if both operands are <code>true</code>, and <code>false</code> otherwise. - It needs only if one <code>false</code> element to make the result be <code>false</code>; - It needs all elements to be <code>true</code> in order the result be <code>true</code>;</p> <code>p</code> <code>q</code> <code>p and q</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>false</code> <code>false</code> <code>true</code> <code>false</code> <code>false</code> <code>folse</code> <code>false</code> <p>For example:</p> <pre><code>bool x = true;\nbool y = false;\nbool z = x &amp;&amp; y; // z is assigned the value false\n</code></pre>"},{"location":"intro/04-conditionals/#or","title":"OR","text":"<p>Or operators can be represented by <code>||</code>(most common syntax) or <code>or</code>(C++20 and up - - alternative operator representation). This operator represents the logical <code>OR</code> operation. It returns <code>true</code> if one operands are <code>true</code>, and <code>false</code> if all are <code>false</code>. - It needs only if one <code>true</code> element to make the result be <code>true</code>; - It needs all elements to be <code>false</code> in order the result be <code>false</code>; </p> <code>p</code> <code>q</code> <code>p or q</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>true</code> <code>false</code> <code>folse</code> <code>false</code> <p>For example:</p> <pre><code>bool x = true;\nbool y = false;\nbool z = x || y; // z is assigned the value true\n</code></pre>"},{"location":"intro/04-conditionals/#not","title":"NOT","text":"<p>Not operator can be represented by <code>!</code>(most common syntax) or <code>not</code>(C++20 and up - alternative operator representation). This operator represents the logical <code>NOT</code> operation. It returns <code>true</code> if operand after it is <code>false</code>, and <code>true</code> otherwise._</p> <code>p</code> <code>not p</code> <code>true</code> <code>false</code> <code>false</code> <code>true</code> <p>For example:</p> <pre><code>bool x = true;\nbool y = !x; // y is assigned the value false\n</code></pre>"},{"location":"intro/04-conditionals/#bitwise-operations","title":"Bitwise operations","text":"<p>In C++, the bitwise operators are used to perform operations on the individual bits of an integer value.</p>"},{"location":"intro/04-conditionals/#and_1","title":"AND","text":"<p>Bitwise <code>and</code> can be represented by <code>&amp;</code> or <code>bitand</code>(C++20 and up - alternative operator representation: This operator performs the bitwise AND operation. It compares each bit of the first operand to the corresponding bit of the second operand, and if both bits are 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0. For example:</p> <pre><code>int x = 5; // binary representation is 0101\nint y = 3; // binary representation is 0011\nint z = x &amp; y; // z is assigned the value 1, which is binary 0001\n</code></pre>"},{"location":"intro/04-conditionals/#or_1","title":"OR","text":"<p>Bitwise <code>or</code> can be represented by <code>|</code> or <code>bitor</code>(C++20 and up - alternative operator representation: This operator performs the bitwise OR operation. It compares each bit of the first operand to the corresponding bit of the second operand, and if either bit is 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0. For example:</p> <pre><code>int x = 5; // binary representation is 0101\nint y = 3; // binary representation is 0011\nint z = x | y; // z is assigned the value 7, which is binary 0111\n</code></pre>"},{"location":"intro/04-conditionals/#xor","title":"XOR","text":"<p>Bitwise <code>xor</code> can be represented by <code>^</code> or <code>bitxor</code>(C++20 and up - alternative operator representation: This operator performs the bitwise XOR (exclusive OR) operation. It compares each bit of the first operand to the corresponding bit of the second operand, and if the bits are different, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.</p> <pre><code>int x = 5; // binary representation is 0101\nint y = 3; // binary representation is 0011\nint z = x ^ y; // z is assigned the value 6, which is binary 0110\n</code></pre> <p>Bitwise xor is a type of binary sum without carry bit.</p>"},{"location":"intro/04-conditionals/#not_1","title":"NOT","text":"<p>Bitwise <code>not</code> can be represented by <code>~</code> or <code>bitnot</code>(C++20 and up - alternative operator representation: This operator performs the bitwise NOT (negation) operation. It inverts each bit of the operand (changes 1 to 0 and 0 to 1). For example:</p> <pre><code>int x = 5; // binary representation is 0101\nint y = ~x; // y is assigned the value -6, which is binary 11111010. See complement of two for more details.\n</code></pre>"},{"location":"intro/04-conditionals/#shift","title":"SHIFT","text":"<p>In C++, the shift operators are used to shift the bits of a binary number to the left or right. Pay attention to not mix with the same ones used to strings, in that case they are called stream operators. There are two shift operators:</p> <ol> <li><code>&lt;&lt;</code>: This operator shifts the bits of the left operand to the left by the number of positions specified by the right operand. For example:</li> </ol> <pre><code>int x = 2; // binary representation is 10\nx = x &lt;&lt; 1; // shifts the bits of x one position to the left and assigns the result to x\n// x now contains 4, which is binary 100\n</code></pre> <ol> <li><code>&gt;&gt;</code>: This operator shifts the bits of the left operand to the right by the number of positions specified by the right operand. For example:</li> </ol> <pre><code>int x = 4; // binary representation is 100\nx = x &gt;&gt; 1; // shifts the bits of x one position to the right and assigns the result to x\n// x now contains 2, which is binary 10\n</code></pre> <p>The shift operators are often used to perform operations more efficiently than can be done with other operators. They can also be used to extract or insert specific bits from or into a value.</p>"},{"location":"intro/04-conditionals/#conditionals","title":"Conditionals","text":"<p>Conditionals are used to branch and execute different blocks of code based on whether a certain condition is true or false. There are several types of conditionals, including:</p>"},{"location":"intro/04-conditionals/#if-clause","title":"if clause","text":"<p><code>if</code> statements: These execute a block of code if a certain condition is <code>true</code>. If statements usually uses comparison operators or any result that can be transformed as boolean - any number different than <code>0</code> is considered <code>true</code>, only <code>0</code> is considered <code>false</code>. </p> <p>Comparison operator is used to compare the value of two operands. The operands can be variables, expressions, or constants. The comparison operator returns a Boolean value of true or false, depending on the result of the comparison. There are several comparison operators available:</p> <ul> <li><code>==</code>: returns <code>true</code> if the operands are equal;</li> <li><code>!=</code>: returns <code>true</code> if the operands are not equal;</li> <li><code>&gt;</code>: returns <code>true</code> if the left operand is greater than the right operand;</li> <li><code>&lt;</code>: returns <code>true</code> if the left operand is less than the right operand;</li> <li><code>&gt;=</code>: returns <code>true</code> if the left operand is greater than or equal to the right operand;</li> <li><code>&lt;=</code>: returns <code>true</code> if the left operand is less than or equal to the right operand;</li> </ul> <p>For example: <pre><code>if (x &gt; y) {\n  // code to execute if x is greater than y\n}\n</code></pre></p> <p>If it appears without scope <code>{}</code>, the condition will applied only to the next statement. For example  <pre><code>if (x &gt; y) \n  doSomething(); // only happens if x &gt; y is evaluated as true\notherThing(); // this will always occur.  \n</code></pre> Inline conditional: <pre><code>if (x &gt; y) doSomething(); // only happens if x &gt; y is evaluated as true\n</code></pre> <pre><code>if (x &gt; y) {doSomething();} // only happens if x &gt; y is evaluated as true\n</code></pre></p> <p>A common source of error is adding a <code>;</code> after the condition. In this case, the compiler will understand that it is an empty statement and always execute the next statement.  <pre><code>if (x &gt; y); // note the inline empty statement here finished with a `;`\n  doSomething(); // this will always happen\n</code></pre></p> <p>Note</p> <p>It is preferred to always create scopes with <code>{}</code>, but there is no need to have them if you have only one statement that will happen for that condition.</p>"},{"location":"intro/04-conditionals/#if-else-clause","title":"if-else clause","text":"<p>All the explanations from <code>if</code> applies here but now we have a fallback case.</p> <p><code>if-else</code> statements: These execute a block of code if a certain condition is true, and a different block of code if the condition is false. For example:</p> <pre><code>if (x &gt; y) {\n  // code to execute if x is greater than y\n} else {\n  // code to execute if x is not greater than y\n}\n</code></pre> <p>All the explanations about scope on the <code>if</code> clause described before, can be applied to the <code>else</code>.</p>"},{"location":"intro/04-conditionals/#ternary-operator","title":"Ternary Operator","text":"<p>The ternary operator is also known as the conditional operator. It is used to evaluate a condition and return one value if the condition is true and another value if the condition is false. The syntax for the ternary operator is:</p> <pre><code>condition ? value_if_true : value_if_false\n</code></pre> <p>For example:</p> <pre><code>int a = 5;\nint b = 10;\nint min = (a &lt; b) ? a : b;  // min will be assigned the value of a, since a is less than b\n</code></pre> <p>Here, the condition <code>a &lt; b</code> is evaluated to be true, so the value of a is returned. If the condition had been <code>false</code>, the value of b would have been returned instead.</p> <p>The ternary operator can be used as a shorthand for an if-else statement. For example, the code above could be written as: <pre><code>int a = 5;\nint b = 10;\nint min;\nif (a &lt; b) {\n  min = a;\n} else {\n  min = b;\n}\n</code></pre></p>"},{"location":"intro/04-conditionals/#switch","title":"Switch","text":"<p><code>switch</code> statement allows you to execute a block of code based on the value of a variable or expression. The switch statement is often used as an alternative to a series of if statements, as it can make the code more concise and easier to read. Here is the basic syntax for a switch statement in C++:</p> <pre><code>switch (expression) {\n  case value1:\n    // code to be executed if expression == value1\n    break;\n  case value2:\n    // code to be executed if expression == value2\n    break;\n  // ...\n  default:\n    // code to be executed if expression is not equal to any of the values\n}\n</code></pre> <p>The expression is evaluated once, and the value is compared to the values in each case statement. If a match is found, the code associated with that case is executed. The break statement is used to exit the switch statement and prevent the code in subsequent cases from being executed. The default case is optional, and is executed if none of the other cases match the value of the expression.</p> <p>Here is an example of a switch statement that checks the value of a variable x and executes different code depending on the value of x:</p> <pre><code>int x = 2;\n\nswitch (x) {\n  case 1:\n    cout &lt;&lt; \"x is 1\" &lt;&lt; endl;\n    break;\n  case 2:\n    cout &lt;&lt; \"x is 2\" &lt;&lt; endl;\n    break;\n  case 3:\n    cout &lt;&lt; \"x is 3\" &lt;&lt; endl;\n    break;\n  default:\n    cout &lt;&lt; \"x is not 1, 2, or 3\" &lt;&lt; endl;\n}\n</code></pre> <p>In this example, the output would be \"x is 2\", as the value of x is 2.</p> <p>Note</p> <p>It's important to note that C++ uses strict type checking, so you need to be careful about the types of variables you use in your conditionals. For example, you can't compare a string to an integer using the <code>==</code> operator.</p>"},{"location":"intro/04-conditionals/#switch-fallthrough","title":"Switch fallthrough","text":"<p>In C++, the <code>break</code> statement is used to exit a <code>switch</code> statement and prevent the code in subsequent cases from being executed. However, sometimes you may want to allow the code in multiple cases to be executed if certain conditions are met. This is known as a \"fallthrough\" in C++.</p> <p>To allow a <code>switch</code> statement to fall through to the next case, you can omit the break statement at the end of the case's code block. The code in the next case will then be executed, and the switch statement will continue to execute until a break statement is encountered or the end of the switch is reached.</p> <p>Here is an example of a switch statement with a fallthrough:</p> <pre><code>int x = 2;\n\nswitch (x) {\n  case 1:\n    cout &lt;&lt; \"x is 1\" &lt;&lt; endl;\n  case 2:\n    cout &lt;&lt; \"x is 2\" &lt;&lt; endl;\n  case 3:\n    cout &lt;&lt; \"x is 3\" &lt;&lt; endl;\n  default:\n    cout &lt;&lt; \"x is not 1, 2, or 3\" &lt;&lt; endl;\n}\n</code></pre> <p>In this example, the output would be \"x is 2\", \"x is 3\" and \"x is not 1, 2, or 3\", as the break statement is omitted in the <code>case 2</code> block and the code in the <code>case 3</code> block is executed as a result.</p> <p>It is generally considered good practice to include a <code>break</code> statement at the end of each case in a <code>switch</code> statement to avoid unintended fallthrough. However, there may be cases where a fallthrough is desired behavior. In such cases, it is important to document the intended fallthrough in the code to make it clear to other programmers.</p>"},{"location":"intro/04-conditionals/#issues-with-switch-and-enums","title":"Issues with switch and enums","text":"<p>A nice usecase for <code>switch</code>es is to be used to select between possible choices and <code>enum</code>s are one of the best ways of expressing choices. So it seems natural to combine both, right? Well, not so fast. There are some issues with this combination that you might be aware of.</p> <p>The main issue with this approach relies on the <code>switch</code>'s <code>default</code> behavior. If you use <code>deafult</code> on <code>swich</code>es in conjunction with stringly typed <code>enum</code>s (<code>enum class</code> or <code>enum struct</code>), the compiler won't be able to warn you about missing cases. This is because the <code>default</code> case will be triggered for any value that is not explicitly handled by the <code>switch</code>. This is a problem because it is very easy to forget to add a new case when a new value is added to the <code>enum</code> and the compiler won't warn you about it. Example:</p> ColorEnum.h<pre><code>enum class Color { Red, Green };\n</code></pre> UseCaseX.cpp<pre><code>// this code goes inside some function that uses Color c\nswitch(c){\n  case Color::Red:\n    // do something\n    break;\n  default: // covers Color::Green and any other value\n    // do something else\n    break;\n}\n</code></pre> <p>But you just remembered that now you should cover the <code>Blue</code> state. So you add it to the <code>enum</code>:</p> ColorEnum.h<pre><code>enum class Color { Red, Green, Blue };\n</code></pre> <p>But you might forget to add the coverage for the new case to the <code>switch</code>, it will fall into the <code>default</code> case without warnings.</p> <p>So the best combination is to use <code>switch</code>es with <code>enum class</code>es and do not use <code>default</code> cases. This way, the compiler will warn you about missing cases. So if you add a new <code>enum</code> value had this code instead, you will be warned about missing cases.</p> UseCaseX.cpp<pre><code>// this code goes inside some function that uses Color c\nswitch(c){\n  case Color::Red:\n    // do something\n    break;\n  case Color::Green:\n    // do something else\n    break;\n}\n// this code will throw a warning if you forget to add a case for the new enum value\n</code></pre>"},{"location":"intro/04-conditionals/#homework","title":"Homework","text":"<ul> <li> <p>Do all exercises up to this topic here.</p> </li> <li> <p>Coordinates of a Point. In this activity, you will have to code a way to find the quadrant of a given coordinate.</p> </li> </ul>"},{"location":"intro/04-conditionals/#outcomes","title":"Outcomes","text":"<p>It is expected for you to be able to solve all questions before this one <code>1041</code> on beecrowd. Sort Beecrowd questions from the most solved to the least solved questions here in the link. If you don't, see Troubleshooting. Don`t let your study pile up, this homework is just a small test, it is expected from you to do other questions on Beecrowd or any other tool such as leetcode.</p>"},{"location":"intro/04-conditionals/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion. Nhis is publicly visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me. Or visit the tutoring service.</p>"},{"location":"intro/05-loops/","title":"Loops, for, while and goto","text":"<p>A loop is a control flow statement that allows you to repeat a block of code. </p>"},{"location":"intro/05-loops/#while-loop","title":"while loop","text":"<p>This loop is used when you want to execute a block of code an unknown number of times, as long as a certain condition is true. It has the following syntax:</p> <p>Syntax: <pre><code>while (condition) {\n    // code block to be executed\n}\n</code></pre> Example: <pre><code>int nums = 10;\nwhile (nums&gt;=0) {\n    cout &lt;&lt; nums &lt;&lt; endl;\n    nums--;\n}\n</code></pre></p> <p>If the block is only one statement, it can be expressed without <code>{}</code>s.</p> <p>Syntax: <pre><code>while (condition) \n    // statement goes here\n</code></pre> Example: <pre><code>int nums = 10;\nwhile (nums&gt;=0) \n    cout &lt;&lt; nums-- &lt;&lt; endl;\n</code></pre></p>"},{"location":"intro/05-loops/#do-while-loop","title":"do-while loop","text":"<p>This is similar to the <code>while</code> loop, but it is guaranteed to execute at least once.</p> <p>Syntax: </p> <pre><code>do {\n    // code block to be executed\n} while (condition);\n</code></pre> <p>Example: <pre><code>int x = 0;\ndo{\n    cout &lt;&lt; x &lt;&lt; endl;\n    x++;\n} while(x&lt;10);\n</code></pre></p> <p>If the block is only one statement, it can be expressed without <code>{}</code>s.</p> <p>Syntax: <pre><code>do\n    // single statement goes here\nwhile (condition);    \n</code></pre> Example: <pre><code>int x = 0;\ndo \n    cout &lt;&lt; x++ &lt;&lt; endl;\nwhile (x&lt;=10);\n</code></pre></p>"},{"location":"intro/05-loops/#for-loop","title":"for loop","text":"<p>This loop is used when you know in advance how many times you want to execute a block of code.</p> <ul> <li>The initialization part is executed only once, at the beginning of the loop. It is used to initialize any loop variables.</li> <li>The condition is evaluated at the beginning of each iteration of the loop. If the condition is true, the code block inside the loop is executed. If the condition is false, the loop is terminated.</li> <li>The increment part is executed at the end of each iteration of the loop. It is used to update the loop variables.</li> </ul> <p>Syntax: <pre><code>for (initialization; condition; step_iteration) {\n    // code block to be executed\n}\n</code></pre></p> <p>Example: <pre><code>for(int i=10; i&lt;=0; i--){\n    cout &lt;&lt; i &lt;&lt; endl; \n}\n</code></pre></p> <p>If the block is only one statement, it can be expressed without <code>{}</code>s.</p> <p>Syntax: <pre><code>for (initialization; condition; step_iteration)\n    // single statement goes here\n</code></pre> Example: <pre><code>for(int i=10; i&lt;=0; i--)\n    cout &lt;&lt; i &lt;&lt; endl;\n</code></pre></p>"},{"location":"intro/05-loops/#range-based-loops","title":"range based loops","text":"<p>A range-based loop is a loop that iterates over a range of elements. The declaration type should follow the same type of the elements in the range. </p> <p>Syntax: <pre><code>for (declaration : range) {\n    // code block to be executed\n}\n</code></pre> or <pre><code>for (declaration : range)\n    // single statement\n</code></pre></p> <p>To avoid explaining arrays and vectors now, assume <code>v</code> as an iterable container that can hold multiple elements. I am going to use auto here to avoid explaining this topic any further. <pre><code>auto v = {1, 2, 3, 4, 5}; // an automatically inferred iterable container with multiple elements\nfor (int x : v) {\n    cout &lt;&lt; x &lt;&lt; \" \";\n}\n</code></pre></p> <p>It is possible to automatically generate ranges <pre><code>#include &lt;ranges&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {  \n    // goes from 0 to 9. in iota, the first element is inclusive and the last one is exclusive.\n    for (int i : views::iota(0, 10))  \n        cout &lt;&lt; i &lt;&lt; ' ';\n}\n</code></pre></p>"},{"location":"intro/05-loops/#loop-control-statements","title":"Loop Control Statements","text":""},{"location":"intro/05-loops/#break","title":"<code>break</code>","text":"<p><code>break</code> keyword defines a way to break the current loop and end it immediately.</p> <pre><code>// check if it is prime\nint num; \ncin &gt;&gt; num; // read the number to be checked if is prime or not\nbool isPrime = true;\nfor(int i=2; i&lt;num; i++){\n    if(num%i==0){ // check if i divides num\n        isPrime = false;\n        break; // this will break the loop and prevent further precessing\n    }\n}\n</code></pre>"},{"location":"intro/05-loops/#continue","title":"<code>continue</code>","text":"<p><code>continue</code> keyword is used to skip the following statements of the loop and move to the next iteration.</p> <pre><code>// print all even numbers\nfor (int i = 1; i &lt;= 10; i++) {\n    if (i % 2 == 1)\n        continue;\n    cout &lt;&lt; i &lt;&lt; \" \"; // this statement is skipped if odd numbers\n}\n</code></pre>"},{"location":"intro/05-loops/#goto","title":"<code>goto</code>","text":"<p>You should avoid <code>goto</code> keyword. PERIOD. The only acceptable usage is to break multiple nested loops at the same time. But even in this case, is better to use <code>return</code> statement and <code>functions</code> that you're going to see later in this course.  </p> <p>The <code>goto</code> keyword allows you to transfer control to a labeled statement elsewhere in your code. </p> <p>Example on how to create a loop using labels and goto. You can create a loop just using labels(anchors) and goto keywords. But this syntax is hard to debug and read. Avoid it at all costs:</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\n    int i=0;\n    start: // this a label named as start.\n    cout &lt;&lt; i &lt;&lt; endl;\n    i++;\n    if(i&lt;10)\n        goto start; // jump back to start\n    else\n        goto finish; // jump to finish\n    finish: // this a label named as finish.\n    return 0;\n}\n</code></pre> <p>Example on how to jump over and skip statements: <pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int x = 10;\n\n    goto jump_over_this;  // control jumps to the label below\n\n    x = 20;  // this line of code is skipped\n\n    jump_over_this:  // label for goto statement\n    std::cout &lt;&lt; x &lt;&lt; std::endl;  // outputs 10\n\n    return 0;\n}\n</code></pre></p> <p>Example of an arguably acceptable use of <code>goto</code>. Here you can see the usage of a way to break both loops at the same time. If you use <code>break</code>, you will only break the inner loop. In this situation it is better to break your code into functions to reduce complexity and nesting.  <pre><code>for (int i = 0; i &lt; imax; ++i)\n    for (int j = 0; j &lt; jmax; ++j) {\n        if (i + j &gt; elem_max) goto finished;\n        // ...\n    }\nfinished:\n// ...\n</code></pre></p>"},{"location":"intro/05-loops/#loop-nesting","title":"Loop nesting","text":"<p>You can nest loops by placing one loop inside another. The inner loop will be executed completely for each iteration of the outer loop. Here is an example of nesting a for loop inside another for loop:</p> <pre><code>for (int i = 0; i &lt; 10; i++) {\n  for (int j = 0; j &lt; 5; j++) {\n    cout &lt;&lt; \"i: \" &lt;&lt; i &lt;&lt; \" j: \" &lt;&lt; j &lt;&lt; endl;\n  }\n}\n</code></pre>"},{"location":"intro/05-loops/#infinite-loops","title":"Infinite loops","text":"<p>A infinite loop is when the code loops indefinitely without having a way out. Here goes some examples:</p> <pre><code>while(true)\n    cout &lt;&lt; \"Hello World!\" &lt;&lt; endl; \n</code></pre> <pre><code>for(;;)\n    cout &lt;&lt; \"Hello World!\" &lt;&lt; endl; \n</code></pre> <pre><code>int i = 0;\nwhile(i&lt;10); // note the ';' here, it will run indefinitely an empty statement because it won't reach the scope.\n{\n    cout &lt;&lt; i &lt;&lt; endl;\n    i++;\n}\n</code></pre>"},{"location":"intro/05-loops/#accumulator-pattern","title":"Accumulator Pattern","text":"<p>The accumulator pattern is a way to accumulate values in a loop. Here is an example of how to use it:</p> <pre><code>int fact = 1; // accumulator variable\nfor(int i=2; i&lt;5; i++){\n    fact *= i; // multiply the accumulator by the current value of i\n}\n// fact = 1*1*2*3*4 = 24\ncout &lt;&lt; fact &lt;&lt; endl;\n</code></pre>"},{"location":"intro/05-loops/#search-pattern","title":"Search pattern","text":"<p>The search pattern is a way to search for a value in a loop, the most common implementation is a boolean flag. Here is an example of how to use it:</p> <pre><code>int num;\ncin &gt;&gt; num; // read the number to be checked if is prime or not\nbool isPrime = true; // flag to indicate if the number is prime or not\nfor(int i=2; i&lt;num; i++){\n    if(num%i==0){ // check if i divides num\n        isPrime = false;\n        break; // this will break the loop and prevent further precessing\n    }\n}\ncout &lt;&lt; num &lt;&lt; \" is \" &lt;&lt; (isPrime ? \"\" : \"not \") &lt;&lt; \"prime\" &lt;&lt; endl;\n// (isPrime ? \"\" : \"not \") is the ternary operator, it is a shorthand for if-else\n</code></pre>"},{"location":"intro/05-loops/#debugging","title":"Debugging","text":"<p>Debugging is the act of instrumentalize your code in order to track problems and fix them.</p> <p>The most naive way of doing it is by printing variables random texts to find the problem. Don't do it. Use debugger tools instead. Each IDE has his its ows set of tools, if you are using CLion, use this tutorial.</p>"},{"location":"intro/05-loops/#automated-tests","title":"Automated tests","text":"<p>There are lots of methodologies to guarantee your code is correct and solve the problem it is supposed to solve. The one that stand out is Automated tests.</p> <p>When you are using beecrowd, leetcode, hackerrank or any other tool to solve problems to learn how to code, a problem is posted to be solved and they test your code solution against a set of expected outputs. This is automated testing. You can generate custom automated tests for your code and cover all cases that you can imagine before you start coding the solution. This is a good practice and is documented in the industry as Test Driven Development.</p>"},{"location":"intro/05-loops/#homework","title":"Homework","text":"<p>Do all exercises up to this topic here.</p> <p>In this activity, you will have to solve Fibonacci sequence. You should implement using loops, and variables. Do not use arrays nor closed-form formulas.</p> <ul> <li>Easy Fibonacci</li> </ul> <p>Optional Readings on Fibonacci Sequence;</p> <p>Hint: Create two variables, one to store the current value and the previous value. For each iteration step, calculate the sum of both and store and put into a temp variable. Copy the current into the previous and set the current with the temporary you calculated before.</p>"},{"location":"intro/05-loops/#outcomes","title":"Outcomes","text":"<p>It is expected for you to be able to solve all questions before this one <code>1151</code> on beecrowd. Sort Beecrowd questions from the most solved to the least solved questions here in the link. If you don't, see Troubleshooting. Don`t let your study pile up, this homework is just a small test, it is expected from you to do other questions on Beecrowd or any other tool such as leetcode.</p>"},{"location":"intro/05-loops/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion. Nhis is publicly visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me. Or visit the tutoring service.</p>"},{"location":"intro/06-functions/","title":"Base Conversion, Functions, Pointers, Parameter Passing","text":""},{"location":"intro/06-functions/#base-conversion","title":"Base conversion","text":"<p>Data containers use binary coding to store data where every digit can be 0 or 1, this is called base 2, but there are different types of binary encodings and representation, the most common integer representation is Complement of two for representing positive and negative numbers and for floats is IEEE754. Given that, it is relevant to learn how to convert the most used common bases in computer science in order to code more efficiently.</p> <p>Most common bases are: - Base 2 - Binary. Digits can go from 0 to 1. <code>{0, 1}</code>; - Base 8 - Octal. Digits can go from 0 to 7. <code>{0, 1, 2, 3, 4, 5, 6, 7}</code>;  - Base 10 - Decimal. Digits can go from 0 to 9. <code>{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}</code>; - Base 16 - Hexadecimal. Digits can go from 0 to 9 and then from A to F. <code>{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F}</code>;</p>"},{"location":"intro/06-functions/#converting-from-decimal-to-any-base","title":"Converting from Decimal to any base","text":"<p>There are several methods for performing base conversion, but one common method is to use the repeated division and remainder method. To convert a number from base 10 to another base <code>b</code>, you can divide the number by <code>b</code> and record the remainder. Repeat this process with the quotient obtained from the previous division until the quotient becomes zero. The remainders obtained during the process will be the digits of the result in the new base, with the last remainder being the least significant digit.</p> <p>For example, to convert the decimal number 75 to base 2 (binary), we can follow these steps:</p> <pre><code>75 \u00f7 2 = 37 remainder 1\n37 \u00f7 2 = 18 remainder 1\n18 \u00f7 2 = 9 remainder 0\n9 \u00f7 2 = 4 remainder 1\n4 \u00f7 2 = 2 remainder 0\n2 \u00f7 2 = 1 remainder 0\n1 \u00f7 2 = 0 remainder 1\n</code></pre> <p>The remainders obtained during the process (1, 1, 0, 1, 0, 0, 1) are the digits of the result in base 2, with the last remainder (1) being the least significant digit. Therefore, the number 75 in base 10 is equal to 1001011 in base 2.</p>"},{"location":"intro/06-functions/#converting-from-any-base-to-decimal","title":"Converting from any base to decimal","text":"<p>The most common way to convert from any base to decimal is to follow the formula:</p> <p>d<sub>n-1</sub>*b<sup>n-1</sup> + d<sub>n-2</sub>*b<sup>n-2</sup> + ... + d<sub>1</sub>*b<sup>1</sup> + d<sub>0</sub>*b<sup>0</sup> </p> <p>Where d<sub>x</sub> represents the digit at the corresponding position x in the number, n is the number of digits in the number, and b is the base of the number.</p> <p>For example, to convert the number 1001011 (base 2) to base 10, we can use the following formula:</p> <p>(1 * 2^6) + (0 * 2^5) + (0 * 2^4) + (1 * 2^3) + (0 * 2^2) + (1 * 2^1) + (1 * 2^0) = 75</p> <p>Therefore, the number 1001011 in base 2 is equal to 75 in base 10.</p>"},{"location":"intro/06-functions/#functions","title":"Functions","text":"<p>A function is a block of code that performs a specific task. It is mostly used to isolate specific reusable functionality from the rest of the code. It has a name, a return type, and a list of parameters. Functions can be called from other parts of the program to execute the task. Here is an example of a simple C++ function that takes two integers as input and returns their sum.</p> <pre><code>int add(int x, int y) {\n  int sum = x + y;\n  return sum;\n}\n</code></pre> <p>To call the function, you would use its name followed by the arguments in parentheses:</p> <pre><code>int a = 2, b = 3;\nint c = add(a, b); // c will be equal to 5\n</code></pre> <p>Functions can also be declared before they are defined, in which case they are called \"prototypes.\" This allows you to use the function before it is defined, which can be useful if you want to define the function after it is used. For example:</p> <pre><code>int add(int x, int y);\n\nint main() {\n  int a = 2, b = 3;\n  int c = add(a, b);\n  return 0;\n}\n\nint add(int x, int y) {\n  int sum = x + y;\n  return sum;\n}\n</code></pre>"},{"location":"intro/06-functions/#reference-declaration","title":"Reference Declaration","text":"Note <p>This content only covers an introduction to the topic.  </p> <p>The <code>&amp;</code> is used to refer memory address of the variable. When used in the declaration, it is the Lvalue reference declarator. It is an alias to an already-existing, variable, object or function. Read more here.</p> <p>When used as an prefix operator before the name of a variable, it will return the memory address where the variable is allocated.</p> <p>Example: <pre><code>string s;\n\n// the variable r has the same memory address of s\n// the declaration requires initialization\nstring&amp; r = s; \n\ns = \"Hello\";\n\ncout &lt;&lt; &amp;s &lt;&lt; endl; // prints the variable memory address location. in my machine: \"0x7ffc53631cd0\"\ncout &lt;&lt; &amp;r &lt;&lt; endl; // prints the same variable memory address location. in my machine: \"0x7ffc53631cd0\"\n\ncout &lt;&lt; s &lt;&lt; endl; // prints \"Hello\"\ncout &lt;&lt; r &lt;&lt; endl; // prints \"Hello\"\n\n// update the content\nr += \" world!\";\n\ncout &lt;&lt; s &lt;&lt; endl; // prints \"Hello world!\"\ncout &lt;&lt; r &lt;&lt; endl; // prints \"Hello world!\"\n</code></pre></p>"},{"location":"intro/06-functions/#pointer-declaration","title":"Pointer Declaration","text":"Note <p>This content only covers an introduction to the topic.  </p> <p>The <code>*</code> is used to declare a variable that holds the address of a memory position. A pointer is an integer number that points to a memory location of a container of a given type. Read more here.</p> <pre><code>string* r = nullptr; // it is not required do initialize, but it is a good practice to always initialize a pointer pointing to null address (0). \nstring s = \"Hello\";\nr = &amp;s; // the variable r stores the memory address of s\n\ncout &lt;&lt; s &lt;&lt; endl; // prints the content of the variable s. \"Hello\"\ncout &lt;&lt; &amp;s &lt;&lt; endl; // prints the address of the variable s. in my machine \"0x7fffdda021b0\"\n\ncout &lt;&lt; r &lt;&lt; endl;  // prints the numeric value of the address the pointer points, in this case it is \"0x7fffdda021b0\".\ncout &lt;&lt; &amp;r &lt;&lt; endl; // prints the address of the variable r. it is a different address than s, in my machine \"0x7fffdda021d0\".\ncout &lt;&lt; *r &lt;&lt; endl; // prints the content of the container that is pointing, it prints \"Hello\".\n\nstring other = \"world\";\nr = &amp;s; // r now points to another variable\n\ncout &lt;&lt; *r &lt;&lt; endl; // prints the content of the container that is pointing, it prints \"world\"\n</code></pre>"},{"location":"intro/06-functions/#void-type","title":"<code>void</code> type","text":"<p>We covered briefly the <code>void</code> type when we covered data types. There are 2 main usages of <code>void</code></p> <p><code>void</code> is used to specify that some function dont return anything to the caller.</p> voidFunction.cpp<pre><code>// this function does not need to return anything\n// optionally you can use an empty `return` keyword without variable to break the flow early\nvoid doSomething() {\n    // function body goes here\n    return; // this line is optional, it can be used inside conditional do break early the function flow\n}\n</code></pre> <p><code>void*</code> is used as a placeholder to store a pointer to anything in memory. Use this with extreme caution, because you can easily mess with it and lose track of the type or the conversion. The most common use are:  - Access the raw content of a variable in memory; - Low-level raw memory allocation; - Placeholder to act as a pointer to anything;</p> rawpointer.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;bitset&gt;\nusing namespace std;\nint main()\n{\n    // declare our data\n    float f = 2.0f;\n    // point without type that points to the memory location of `f`\n    void* p = &amp;f; \n    // (int*) casts the void* to int*, so it can be understandable\n    // * in front means that we want to fetch the content of what is pointing\n    int i = *(int*)(p); \n    cout &lt;&lt; hex &lt;&lt; i &lt;&lt; endl; // prints 40000000\n    std::bitset&lt;32&gt; bits(i);\n    cout &lt;&lt; bits &lt;&lt; endl; // prints 01000000000000000000000000000000\n    return 0;\n}\n</code></pre>"},{"location":"intro/06-functions/#passing-parameter-to-a-function-by-value","title":"Passing parameter to a function by value","text":"<p>Pass-by-value is when the parameter declaration follows the traditional variable declaration without <code>&amp;</code>. A copy of the value is made and passed to the function. Any changes made to the parameter inside the function have don't change on the original value outside the function.</p> pass-by-value.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid times2(int x) {\n    x = x * 2;\n    // the value x here is doubled. but it dont change the value outside the scope\n}\n\nint main()\n{\n    int y = 2;\n    times2(y); // this dont change the value, it passes a copy to the function\n    cout &lt;&lt; y &lt;&lt; endl;  // output: 2\n    return 0;\n}\n</code></pre>"},{"location":"intro/06-functions/#passing-parameter-to-a-function-by-reference","title":"Passing parameter to a function by reference","text":"<p>Pass-by-reference occurs when the function parameter uses the <code>&amp;</code> in the parameter declaration. It will allow the function to modify the value of the parameter directly in the other scope, rather than making a copy of the value as it does with pass-by-value. The mechanism behind the variable passed is that it is an alias to the outer variable because it uses the same memory position.</p> pass-by-reference.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid times2(int &amp;x) { // by using &amp;, x has the same address the variable passed where the function is called \n  x*=2; // it will change the variable in caller scope\n}\n\nint main() {\n  int y = 2;\n  times2(y);\n  cout &lt;&lt; y &lt;&lt; endl;  // Outputs 4\n  return 0;\n}\n</code></pre>"},{"location":"intro/06-functions/#passing-parameter-to-a-function-by-pointer","title":"Passing parameter to a function by pointer","text":"<p>Pass-by-pointer occurs when the function parameter uses the <code>*</code> in the parameter declaration. It will allow the function to modify the value of the parameter in the other scope via memory pointer, rather than making a copy of the value as it does with pass-by-value. The mechanism behind it is to pass the memory location of the outer variable as a parameter to the function.</p> pass-by-pointer.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid times2(int *x) { // by using *, x has the same address the variable passed where the function is called\n    // x holds the address of the outer variable\n    // *x is the content of what x points.\n  *x *= 2; // it will change the variable in caller scope\n}\n\nint main() {\n  int y = 2;\n  times2(&amp;y); // the function expects a pointer, given pointer is an address, we pass the address of the variable here\n  cout &lt;&lt; y &lt;&lt; endl;  // Outputs 4\n  return 0;\n}\n</code></pre>"},{"location":"intro/06-functions/#function-overload","title":"Function overload","text":"<p>A function with a specific name can be overload with different not implicitly convertible parameters.</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nfloat average(float a, float b){\n    return (a + b)/2;\n}\n\nfloat average(float a, float b, float c){\n    return (a + b + c)/3;\n}\n\nint main(){\n    cout &lt;&lt; average(1, 2) &lt;&lt; endl; // print 1.5\n    cout &lt;&lt; average(1, 2, 3) &lt;&lt; endl; // print 2\n    return 0;\n}\n</code></pre>"},{"location":"intro/06-functions/#default-parameter","title":"Default parameter","text":"<p>Functions can have default parameters that should be used if the parameter is not provided, making it optional.</p> defaultparam.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid greet(string username = \"user\") {\n    cout &lt;&lt; \"Hello \" &lt;&lt; mes &lt;&lt; endl;\n}\n\nint main() {\n  // Prints \"Hello user\"\n  greet(); // the default parameter user is used here\n\n  // Prints \"Hello John\"\n  greet(\"John\");\n\n  return 0;\n}\n</code></pre>"},{"location":"intro/06-functions/#scopes","title":"Scopes","text":"<p>Scope is a region of the code where a identifier is accessible. A scope usually is specified by what is inside <code>{</code> and <code>}</code>. The global scope is the one that do not is inside any <code>{}</code>.</p> scope.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nstring h = \"Hello\"; // this variable is in the global scope\nint main() {\n  string w = \" world\"; // this variable belongs to the scope of the main function\n  cout &lt;&lt; h &lt;&lt; w &lt;&lt; endl; // both variables are visible and accessible\n  return 0;\n}\n</code></pre> <p>Multiple identifiers with same name can not be created in the same scope. But in a nested scope it is possible to shadow the outer one when declared in the inner scope.</p> variableShadowing.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nstring h = \"Hello\"; // this variable is in the global scope\nint main() {\n  cout &lt;&lt; h; // will print \"Hello\"\n  string h = \" world\"; // this will shadow the global variable with the same name h\n  cout &lt;&lt; h; // will print \" world\"\n  return 0;\n}\n</code></pre>"},{"location":"intro/06-functions/#lambda-functions","title":"Lambda functions","text":"<p>In C++, an anonymous function is a function without a name. Anonymous functions are often referred to as lambda functions or just lambdas. They are useful for situations where you only need to use a function in one place, or when you don't want to give a name to a function for some other reason. </p> <pre><code>auto lambda = [](int x, int y) { return x + y; };\n// auto lambda = [] (int x, int y) -&gt; int { return x + y; }; // or you can specify the return type\nint z = lambda(1, 2);  // z is now 3\n</code></pre> <p>In this case the only variables accessible by the lambda function scope are the ones passed as parameter <code>x</code> and <code>y</code>, and works just like a normal function, but it can be declared inside at any scope.</p> <p>If you want to make a variable available to the lambda, you can pass it via captures, and it can be by-value or by-reference. To capture a variable by value, just pass the variable name inside the <code>[]</code>. To capture a variable by reference, you use the <code>&amp;</code> operator followed by the variable name inside the <code>[]</code>. Here is an example of capturing a variable by value:</p> <pre><code>int x = 1;\nauto lambda = [x] { return x + 1; };\n</code></pre> <p>The value of <code>x</code> is copied into the lambda function, and any changes to <code>x</code> inside the lambda function have no effect on the original variable.</p> <p>Here is an example of capturing a variable by reference:</p> <pre><code>int x = 1;\nauto lambda = [&amp;x] { return x + 1; };\n</code></pre> <p>The lambda function has direct access to the original variable, and any changes to <code>x</code> inside the lambda function are reflected in the original variable.</p> <p>You can also capture multiple variables by separating them with a comma. For example:</p> <pre><code>int x = 1, y = 2;\nauto lambda = [x, &amp;y] { x += 1; y += 1; return x + y; };\n</code></pre> <p>This defines a lambda function that captures <code>x</code> by-value and <code>y</code> by-reference. The lambda function can modify <code>y</code> but not <code>x</code>.</p> <p>Lambda captures are a useful feature of C++ that allow you to write more concise and expressive code. They can be especially useful when working with algorithms from the Standard Template Library (STL), where you often need to pass a function as an argument.</p> <p>In order to capture everything automatically you can either capture by copy <code>[=]</code> or by reference <code>[&amp;]</code>.</p> <pre><code>// capture everything via copy\nint x = 1, y = 2;\nauto lambda = [=] { \n    // x += 1; // cannot be changed because it is read-only \n    // y += 1; // cannot be changed because it is read-only\n    return x + y; \n};\nint c = lambda(); // c will be 5, but x and y wont change their values\n</code></pre> <pre><code>// capture everything via reference\nint x = 1, y = 2;\nauto lambda = [&amp;] { x += 1; y += 1; return x + y; };\nint c = lambda(); // c will be 5, x will be 2, and y will be 3.\n</code></pre> <p>For a more in depth understanding, go to Manual Reference or check this tutorial. </p>"},{"location":"intro/06-functions/#multiple-files","title":"Multiple files","text":"<p>In bigger projects, it is useful to split your code in multiple files isolating intention and organizing your code. To do so, you can create a header file with the extension <code>.h</code> and a source file with the extension <code>.cpp</code>. The header file will contain the declarations of the functions and the source file will contain the definitions of the functions. The header file will be included in the source file and the source file will be compiled together with the main file.</p> main.cpp<pre><code>#include &lt;iostream&gt;\n#include \"functions.h\"\nusing namespace std;\n\nint main() {\n  cout &lt;&lt; sum(1, 2) &lt;&lt; endl;\n  return 0;\n}\n</code></pre> functions.h<pre><code>// Preprocessor directive (macro) to ensure that this header file is only included once\n#ifndef FUNCTIONS_H\n#define FUNCTIONS_H\n\n// Function declaration without body\nint sum(int a, int b);\n\n#endif\n</code></pre> <p>Alternatively, you can use <code>#pragma once</code> instead of <code>#ifndef</code>, <code>#define</code> end <code>#endif</code> to ensure that the header file is only included once. This is a non-standard preprocessor directive, but it is supported by most compilers. Ex.:</p> functions.h<pre><code>// Preprocessor directive (macro) to ensure that this header file is only included once\n#pragma once\n\n// Function declaration without body\nint sum(int a, int b);\n</code></pre> functions.cpp<pre><code>// include the header file that contains the function declaration\n#include \"functions.h\"\n\n// function definition with body \nint sum(int a, int b) {\n  return a + b;\n}\n</code></pre>"},{"location":"intro/06-functions/#preprocessor-directives-and-macros","title":"Preprocessor directives and macros","text":"<p>In C++, the preprocessor is a text substitution tool. It runs before compiling the code. It scans a program for special commands called preprocessor directives, which begin with a <code>#</code> symbol. When it finds a preprocessor directive, it performs the specified text substitutions before the program is compiled. </p> <p>The most common preprocessor directive is <code>#include</code>, which tells the preprocessor to include the contents of another file in the current file. The included file is called a header file, and commonly has a <code>.h</code> extension. For example:</p> <pre><code>#include &lt;iostream&gt;\n</code></pre> <p>Another extensively used macro is <code>#define</code>, which defines a macro. A macro is a symbolic name for a constant value or a small piece of code. For example:</p> <pre><code>#define PI 3.14159\n</code></pre> <p>It will replace all occurrences of <code>PI</code> with <code>3.14159</code> before compiling the code. But pay attention that is not recommended to use macros for constants, because they are not type safe and can cause unexpected behavior. It is recommended to declare <code>const</code> variable instead.</p> <p>See more about some cases against macros here:</p> <ul> <li>https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#enum1-prefer-enumerations-over-macros</li> <li>https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es30-dont-use-macros-for-program-text-manipulation</li> <li>https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es31-dont-use-macros-for-constants-or-functions</li> </ul> <p>Nowadays the best use case for macros are for conditional compilation or platform specification. For example:</p> <pre><code>#define DEBUG 1\n\nint main() {\n  #if DEBUG\n    std::cout &lt;&lt; \"Debug mode\" &lt;&lt; std::endl;\n  #else\n    std::cout &lt;&lt; \"Release mode\" &lt;&lt; std::endl;\n  #endif\n}\n</code></pre> <p>Another example is to define the operating system:</p> <pre><code>#ifdef _WIN32\n  #define OS \"Windows\"\n#elif __APPLE__\n  #define OS \"MacOS\"\n#elif __linux__\n  #define OS \"Linux\"\n#else\n  #define OS \"Unknown\"\n#endif\n\nint main() {\n  std::cout &lt;&lt; \"OS: \" &lt;&lt; OS &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"intro/06-functions/#homework","title":"Homework","text":"<ul> <li>Do all exercises up to this topic here.</li> <li>Hexadecimal converter. In this activity, you will have to code a way to find the convert to hexadecimal without using any std library to do it for you. DON'T USE <code>std::hex</code>.</li> </ul>"},{"location":"intro/06-functions/#outcomes","title":"Outcomes","text":"<p>It is expected for you to be able to solve all questions before this one <code>1957</code> on beecrowd. Sort Beecrowd questions from the most solved to the least solved questions here in the link. If you don't, see Troubleshooting. Don`t let your study pile up, this homework is just a small test, it is expected from you to do other questions on Beecrowd or any other tool such as leetcode.</p>"},{"location":"intro/06-functions/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion. Nhis is publicly visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me. Or visit the tutoring service.</p>"},{"location":"intro/07-streams/","title":"Streams and File IO","text":"<p>At this point, you already are familiar with the <code>iostream</code> header. But we never discussed what it is properly. It is a basic stream and it has two static variable we already use: <code>cin</code> for reading variables from the console input and <code>cout</code> to output things to console, see details here. It is possible to interact with all streams via the <code>&gt;&gt;</code> and <code>&lt;&lt;</code> operators.</p> <p>But C++ have 2 other relevant streams that we need to cover: <code>fstream</code> and <code>sstream</code>.</p>"},{"location":"intro/07-streams/#file-streams","title":"File streams","text":"<p>File streams are streams that target files instead of the terminal console. The <code>fstream</code> header describes the file streams and the ways you can interact with it.</p> <p>The main differences between console and file streams are: - You have to target the filesystem path for files because we can manage different files at the same, but for console, you only have one, so you dont need to target which console we are streaming. In order to not mess each target, you have to declare a different variable to store the target and state. - Files are persistent, so if you write something to them, and try to read from it again, the that will be there saved.</p> <p>Files are a kind of resource managed by the operation system. So every time you request something to be read or write, behind the scenes you are requesting something to the operating system, and it can be slow or subject by lock control. When you open a file to be read or write, the OS locks it to avoid problems. You can open a file to be read multiple times simultaneously, but you cannot write more than once. So to avoid problems, after reading or writing the file, you should close the file.</p> <pre><code>#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main() {\n  // Open the file\n  // this file path is relative to the executable, so be assured it exists in the same folder the executable is placed\n  // fin is the variablename and it is function initialized via a file path to target, but it can be any valid identifier\n  // I am using fin as variable to follow the same metaphor `fin` as `file input` as we have with console input `cin`, \n  ifstream fin(\"file.txt\"); \n\n  // Check if the file is open\n  // it is a good practice to check if the file is really there before doing anything\n  if (!fin.is_open()) {\n    cerr &lt;&lt; \"Error opening file\" &lt;&lt; endl;\n    return 1; // quits the program with an error code\n  }\n\n  // Read the contents of the file line by line\n  string line;\n  // getline can target streams in general, so you can pass the file stream as a target\n  while (getline(fin, line)) { // while the file have lines, read and store the content inside the line variable\n    cout &lt;&lt; line &lt;&lt; endl; // output each string into the console\n  }\n\n  // Close the file\n  fin.close();\n\n  return 0;\n}\n</code></pre>"},{"location":"intro/07-streams/#string-stream","title":"String Stream","text":"<p>The <code>sstream</code> header describes string stream, which is a type of memory stream and is very useful to do string manipulation. For our intent, we aro going to focus 3 types of memory streams.</p> <ul> <li><code>ostringstream</code>: works just like <code>cout</code> but the content will printed to a memory region.</li> <li>it is more efficient to build a complex string in this way than <code>cout</code>ing multiple times;  </li> <li><code>istringstream</code>: works just like <code>cin</code> but it will read from a memory area.</li> <li>it is safer to read from a closed memory area than, and you ran reset the reading pointer to re-read previous elements easier than with <code>cin</code>.</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\nusing namespace std;\nint main() {\n    ostringstream oss; // declare the output stream\n    // print numbers from 0 to 100\n    for(int i=0; i&lt;=100; i++)\n        oss &lt;&lt; i &lt;&lt; ' '; // store the data into memory\n    cout &lt;&lt; oss.str(); // convert the stream into a string to be printed all at once\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\nusing namespace std;\nint main() {\n    // read input\n    string input;\n    getline(cin, input);\n\n    // initialize string stream with the content from a console line\n    istringstream ss(input); // declare the stream to read from\n\n    // extract input\n    string name;\n    string course;\n    string grade;\n\n    iss &gt;&gt; name &gt;&gt; course &gt;&gt; grade;\n}\n</code></pre> <p>You can combine string stream and file stream to read a whole file and store into a single string.</p> <pre><code>#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main() {\n  // Open the file\n  ifstream file(\"file.txt\");\n\n  // Check if the file is open\n  if (!file.is_open()) {\n    cerr &lt;&lt; \"Error opening file\" &lt;&lt; endl;\n    return 1;\n  }\n\n  // Read the contents of the file into a stringstream\n  stringstream ss;\n  ss &lt;&lt; file.rdbuf(); // read the whole file buffer and stores it into a string stream\n\n  // Close the file\n  file.close();\n\n  // Convert the stringstream into a string\n  string contents = ss.str();\n\n  cout &lt;&lt; contents &lt;&lt; endl; // prints the whole file at once\n\n  return 0;\n}\n</code></pre>"},{"location":"intro/07-streams/#homework","title":"Homework","text":"<p>You have the job of creating a small program to read a file image in the format PGMA and inverse the colors as a negative image.</p> <p>You can test your code with different images if you want. You can download more images here. But here goes 2 examples:</p> <ul> <li>Sample input easy: baboon.ascii.pgm - max intensity is not 255 and don't have comments.</li> <li>Sample input harder: lena.ascii.pgm - have comments, and the max intensity is different than 255.</li> </ul> <p>You can test if your output file is correct using this tool. You can open this file via any text reader, use the online viewer, or use any app that reads pnm images.</p>"},{"location":"intro/07-streams/#attention","title":"Attention:","text":"<ul> <li>To create the inverse image, you should read the file header and search for the maximum intensity. You should use this number as a base to inverse. In the Lena case, it is 245.</li> <li>You should pay attention that every line shouldn't be bigger than 70 chars;</li> <li>Pay attention that the line 2 might exists or not. And any comment found in the file should be skipped.</li> </ul> <p>The user should input the filename to be read. So you should store it into a string variable. The output filename should be the same as the input but with '.inverse' concatenated in the end. Ex.: lena.pgm becomes lena.inverse.pgm; If you find this too complicated, just concatenate with .inverse.pgm would be acceptable. ex.: lena.pgm becomes lena.pgm.inverse.pgm</p> <p>In order for your program to find the file to be read, you should provide the fullpath to the file or simply put the file in the same folder your executable is.</p> <p>HINT: In order to find comments and ignore them do something like that: <pre><code>string widthstr;\nint width;\nfin &gt;&gt; widthstr;\nif(widthstr.at(0)=='#')\n    getline(fin, widthstr); // ignore line\nelse\n    width = stoi(widthstr); // covert string to integer\n</code></pre></p>"},{"location":"intro/08-arrays/","title":"Arrays","text":"<p>An array is a collection of similar data items, stored in contiguous memory locations. The items in an array can be of any built-in data type such as int, float, char, etc. An array is defined using a syntax similar to declaring a variable, but with square brackets indicating the size of the array.</p> <p>Here's an example of declaring an array of integers with a size of 5:</p> <pre><code>int arr[5]; // declare an array of size 5 at the stack\n</code></pre> <p>The above declaration creates an array named arr of size 5, which means it can store 5 integers. The array elements are stored in contiguous memory locations, which means the next element is stored at the immediate next memory location. The first element of the array is stored at the 0<sup>th</sup> index, the second element at the 1<sup>st</sup> index, and so on up to 4. Between 0 an 4 all inclusive we have 5 elements.</p> <p>This creates an array called \"myArray\" that can hold 5 integers. The first element of the array is accessed using the index 0, and the last element is accessed using the index 4. You can initialize the array elements during declaration by providing a comma-separated list of values enclosed in braces:</p> <pre><code>int myArr[5] = {10, 20, 30, 40, 50}; // initialize the array with 5 elements\n</code></pre> <p>In this case, the first element of the array will be 10, the second element will be 20, and so on.</p> <p>You can also use loops to iterate over the elements of an array and perform operations on them. For example:</p> <pre><code>for (int i = 0; i &lt; 5; i++) { \n  myArray[i] *= 2;\n}\n</code></pre> <p>This loop multiplies each element of the \"myArray\" by 2.</p> <p>Arrays are a useful data structure in C++ because they allow you to store and manipulate collections of data in a structured way. However, they have some limitations, such as a fixed size that cannot be changed at runtime, and the potential for buffer overflow if you try to access elements beyond the end of the array.</p>"},{"location":"intro/08-arrays/#buffer-overflow","title":"Buffer overflow","text":"<p>A buffer overflow occurs when a program attempts to write more data to a fixed-size buffer than it can hold. This can happen when a program attempts to write more data to a buffer than the buffer can hold, or when a program attempts to read more data from a buffer than the buffer contains. This can happen when a program attempts to write more data to a buffer than the buffer can hold, or when a program attempts to read more data from a buffer than the buffer contains.</p> <p>A buffer overflow can be caused by a number of different factors, including:</p> <ul> <li>A program that attempts to write more data to a buffer than the buffer can hold</li> <li>A program that attempts to read more data from a buffer than the buffer contains</li> </ul> <p>Buffer overflow vulnerabilities are a common type of security vulnerability, as they can be exploited by malicious attackers to execute arbitrary code or gain unauthorized access to a system. To prevent buffer overflow vulnerabilities, it's important to carefully manage memory allocation and use bounds checking functions or techniques such as using safe C++ library functions like <code>std::vector</code> or <code>std::array</code>, and ensuring that input data is properly validated and sanitized.</p>"},{"location":"intro/08-arrays/#multi-dimensional-arrays","title":"Multi-dimensional arrays","text":"<p>A multi-dimensional array is an array of arrays. For example, a 2-dimensional array is an array of arrays, where each element of the array is itself an array. A 3-dimensional array is an array of 2-dimensional arrays, where each element of the array is itself a 2-dimensional array. And so on.</p> <p>For example, to declare a two-dimensional array with 3 rows and 4 columns of integers, you would use the following code:</p> <pre><code>int arr[3][4]; // Declare a 2-dimensional array with 3 rows and 4 columns at the stack\n</code></pre> <p>You can access elements in a multidimensional array using multiple sets of square brackets. For example, to access the element at row 2 and column 3 of myArray, you would use the following code:</p> <pre><code>int element = myArray[1][2]; // Access the element at row 2 and column 3\n</code></pre> <p>In C++, you can have arrays with any number of dimensions, but keep in mind that as the number of dimensions increases, it becomes more difficult to manage and visualize the data.</p>"},{"location":"intro/08-arrays/#array-dynamic-allocation","title":"Array dynamic allocation","text":"<p>In some cases, you dont know the size of the array at compile time. In this case, you can use dynamic memory allocation to allocate the array at runtime. This is done using the <code>new</code> operator, which allocates a block of memory on the heap and returns a pointer to the beginning of the block. For example, to allocate an array of 5 integers on the heap, you would use the following code:</p> <pre><code>int *arr = new int[5]; // Allocate a block of memory on the heap\n</code></pre> <p>The above code allocates a block of memory on the heap that is large enough to hold 5 integers. The <code>new</code> operator returns a pointer to the beginning of the block, which is assigned to the pointer variable <code>arr</code>. You can then use the pointer to access the elements of the array. You can access individual elements of the array using the array subscript notation:</p> <pre><code>arr[0] = 10;\narr[1] = 20;\narr[2] = 30;\narr[3] = 40;\narr[4] = 50;\n</code></pre> <p>When you are done using the array, you should free the memory using the <code>delete</code> operator. For example, to free the memory allocated to the array in the previous example, you would use the following code:</p> <pre><code>delete[] arr; // Free the memory by telling the operation system you are done with it\narr = nullptr; // Reset the pointer to null to avoid dangling pointers and other bugs\n</code></pre> <p>The <code>delete</code> operator takes a pointer to the beginning of the block of memory to free. The <code>[]</code> operator is used to indicate that the block of memory contains an array, and that the <code>delete</code> operator should free the entire array.</p>"},{"location":"intro/08-arrays/#dynamic-allocation-of-multi-dimensional-arrays","title":"Dynamic allocation of multi-dimensional arrays","text":"<p>In the case of dynamically allocate memory for a multidimensional array, first you have to understand that in the same way you can have an array of arrays, you can have a pointer to a pointer. This is called a double pointer. So, if you want to allocate a 2-dimensional array dynamically, you can do it like this:</p> <pre><code>int lines, columns;\ncin &gt;&gt; lines &gt;&gt; columns;\nint **arr = new int*[lines]; // Allocate an array of pointers to pointers\nfor (int i = 0; i &lt; lines; i++) {\n  arr[i] = new int[columns]; // Allocate an array of integers for each pointer\n}\n// do stuff with the array\nfor (int i = 0; i &lt; lines; i++) {\n  delete[] arr[i]; // Free the memory for each array of integers\n}\ndelete[] arr; // Free the memory for the array of pointers\n</code></pre>"},{"location":"intro/08-arrays/#smart-pointers-to-rescue","title":"Smart pointers to rescue","text":"<p>You probably noticed the number of bugs and vulnerabilities that can be caused by improper memory management. To help address that, C++ introduced smart pointers. The general purpose smart contract you will be mostly using is <code>shared_ptr</code> that in the end of the scope and when all references to it become 0 will automatically free the memory. The other smart pointers are <code>unique_ptr</code> and <code>weak_ptr</code> that are used in more advanced scenarios. But for now, we will focus on <code>shared_ptr</code>.</p> <p>In C++11, smart pointers were introduced to help manage memory allocation and deallocation. Smart pointers are classes that wrap a pointer to a dynamically allocated object and provide additional features such as automatic memory management. The most commonly used smart pointers are <code>std::unique_ptr</code> and <code>std::shared_ptr</code>. The <code>std::unique_ptr</code> class is a smart pointer that owns and manages another object through a pointer and disposes of that object when the <code>std::unique_ptr</code> goes out of scope. The <code>std::shared_ptr</code> class is a smart pointer that retains shared ownership of an object through a pointer. Several <code>std::shared_ptr</code> objects may own the same object. The object is destroyed and its memory deallocated when either of the following happens:</p> <ul> <li>the last remaining <code>std::shared_ptr</code> owning the object is:<ul> <li>destroyed</li> <li>is assigned another pointer via <code>operator=</code> or <code>reset()</code> </li> <li>is reset or released </li> <li>moved from</li> <li>is swapped with another <code>std::shared_ptr</code> using <code>swap()</code></li> <li>the function <code>std::shared_ptr::swap()</code> is called with the last remaining <code>std::shared_ptr</code> owning the object as an argument</li> </ul> </li> <li>the object is no longer reachable from the program (for example, when the program terminates)</li> <li>the program:<ul> <li>throws an exception that is not caught within the same thread</li> <li>calls terminating calls such as <code>std::terminate()</code>, <code>std::abort()</code>, <code>std::exit()</code>, or <code>std::quick_exit()</code></li> </ul> </li> </ul> <p>To create a dynamic array of int using shared pointers, you can use the std::shared_ptr class template. Here's an example:</p> <pre><code>#include &lt;memory&gt; // for std::shared_ptr\nstd::shared_ptr&lt;int[]&gt; arr(new int[5]);\n</code></pre> <p>This creates a shared pointer to an array of 5 integers. The <code>new int[5]</code> expression dynamically allocates memory for the array on the heap, and the shared pointer takes ownership of the memory. When the shared pointer goes out of scope, the memory is automatically freed.</p> <p>You can access individual elements of the array using the array subscript notation, just like with a regular C-style array:</p> <pre><code>arr[0] = 10;\narr[1] = 20;\narr[2] = 30;\narr[3] = 40;\narr[4] = 50;\n</code></pre> <p>To deallocate the memory, you don't need to call delete[] explicitly, because the shared pointer takes care of it automatically. When the last shared pointer that points to the array goes out of scope or is explicitly reset, the memory is deallocated automatically:</p> <pre><code>arr.reset(); // deallocates the memory and reset the shared pointer to null to avoid dangling pointers and other bugs\n</code></pre> <p>Shared pointers provide a convenient and safe way to manage dynamic memory in C++, because they automatically handle memory allocation and deallocation, and help prevent memory leaks and dangling pointers.</p> <p>Smart pointers are no silver bullet. They are not a replacement for proper memory management, but they can help you avoid common memory management bugs and vulnerabilities. For example, smart pointers can help you avoid memory leaks, dangling pointers, and double frees. They can also help you avoid buffer overflow vulnerabilities by providing bounds checking functions.</p>"},{"location":"intro/08-arrays/#passing-arrays-to-functions","title":"Passing arrays to functions","text":"<p>You can pass arrays to functions in C++ in the same way that you pass any other variable to a function. For example, to pass an array to a function, you would use the following code:</p> <pre><code>void printArray(int arr[], int size) // Pass the array by reference to avoid copying the entire array\n{\n    for (int i = 0; i &lt; size; ++i)\n        std::cout &lt;&lt; arr[i] &lt;&lt; ' ';\n    std::cout &lt;&lt; '\\n';\n}\n</code></pre> <p>Alternativelly you can pass the array as a pointer:</p> <pre><code>void printArray(int *arr, int size)\n{\n    for (int i = 0; i &lt; size; ++i)\n        std::cout &lt;&lt; arr[i] &lt;&lt; ' ';\n    std::cout &lt;&lt; '\\n';\n}\n</code></pre> <p>If you want to pass a two dimension array, you can do it in multiple ways:</p> <pre><code>void printArray(int rows, int columns, int **arr); // Pass the array as a pointer of pointers\n</code></pre> <p>This approach is problematic as you can see it in depth here. It does not check for types and it is not safe. You can also pass the array as a pointer to an array:</p> <pre><code>void printArray(int rows, int arr[][10]); // if you know the number of columns and it is fixed, in this case 10 \n</code></pre> <pre><code>void printArray(int rows, int (*arr)[10]); // if you know the number of columns and it is fixed, in this case 10 \n</code></pre> <pre><code>void printArray(int arr[10][10]); // if you know the number of rows and columns and they are fixed, in this case both 10\n</code></pre> <p>There is others ways to pass arrays to functions, such as templates but they are more advanced and we will not cover them now.</p>"},{"location":"intro/08-arrays/#extra-standard-template-library-stl","title":"EXTRA: Standard Template Library (STL)","text":"<p>Those are the most common data structures that you will be using in C++. But it is outside the scope of this course to cover them in depth. So we will only give entry-points for you to learn more about them.</p>"},{"location":"intro/08-arrays/#arrays_1","title":"Arrays","text":"<p>If you are using fixed sized arrays, and want to be safe to avoid problems related to out of bounds, you should use the STL arrays. It is a template class that encapsulates fixed size arrays and adds protections for it. It is a safer alternative to C-style arrays. Read more about it here.</p>"},{"location":"intro/08-arrays/#vectors","title":"Vectors","text":"<p>Vectors are the safest way to deal with dynamic arrays in C++, the cpp core guideline even states that you should use it whenever you can. Vector is implemented in the standard template library and provide a lot of useful functions. Read more about them here.</p>"},{"location":"intro/08-arrays/#extra-curiosities","title":"Extra curiosities","text":"<p>Context on common bugs and vulnerabilities:</p> <ul> <li>Weaknesses in the 2022 CWE Top 25 Most Dangerous Software Weaknesses</li> <li>US Government enforces cyber security requirements</li> <li>https://en.cppreference.com/w/cpp/language/array</li> </ul>"},{"location":"intro/09-recursion/","title":"Recursion","text":"<p>Recursion is a method of solving problems where the solution depends on solutions to smaller instances of the same problem. It is a common technique used in computer science, and is one of the central ideas of functional programming. Let's explore recursion by looking at some examples.</p> <p>You have to be aware that recursion isn't always the best solution for a problem. Sometimes it can be more efficient to use a loop and a producer-consumer strategy instead of recursion. But, in some cases, recursion is the more elegant solution.</p> <p>When you call functions inside functions, the compiler will store the return point, value and variables on the stack, and it has limited size. Each time you call a function, it is added to the top of the stack. When the function returns, it is removed from the top of the stack. The last function to be called is the first to be returned. This is called the call stack. A common source of problems in programming is when the call stack gets too big. This is called a stack overflow. This is why you should be careful when using recursion.</p>"},{"location":"intro/09-recursion/#fibonacci-numbers","title":"Fibonacci numbers","text":"<p>The Fibonacci numbers are a sequence of numbers where each number is the sum of the two numbers before it. The constraints are: the first number is 0, the second number is 1, it only run on integers and it is not negative. The sequence looks like this:</p> <pre><code>int fibonacci(int n) {\n    // base case\n    if (n == 0 || n == 1)\n        return n;\n    else // recursive case\n        return fibonacci(n - 1) + fibonacci(n - 2);\n}\n</code></pre>"},{"location":"intro/09-recursion/#factorial-numbers","title":"Factorial numbers","text":"<p>The factorial of a number is the product of all the numbers from 1 to that number. It only works for positive numbers greater than 1.</p> <pre><code>int factorial(int n) {\n    // base case\n    if (n &lt;= 1)\n        return 1;\n    else // recursive case\n        return n * factorial(n - 1);\n}\n</code></pre>"},{"location":"intro/09-recursion/#divide-and-conquer","title":"Divide and Conquer","text":"<p>Divide and conquer is a method of solving problems by breaking them down into smaller subproblems. It is extensively used to reduce the complexity of some algorithms and increase readability.</p>"},{"location":"intro/09-recursion/#binary-search","title":"Binary search","text":"<p>Imagine that you already have a sorted array of numbers and you want to find the location of a specific number in that array. You can use a binary search to find it. The binary search works by dividing the array in half and checking if the number you are looking for is in the first half or the second half. If it is in the first half, you repeat the process with the first half of the array. If it is in the second half, you repeat the process with the second half of the array. You keep doing this until you find the number or you know that it is not in the array.</p> <pre><code>// recursive binary search on a sorted array to return the position of a number\nint binarySearch(int arr[], int start, int end, int number) {\n    // base case\n    if (start &gt; end)\n        return -1; // number not found\n    else {\n        // recursive case\n        int mid = (start + end) / 2;\n        // return the middle if wi find the number\n        if (arr[mid] == number)\n            return mid;\n        // if the number is smaller than the middle, search in left side\n        else if (arr[mid] &gt; number)\n            return binarySearch(arr, start, mid - 1, number);\n        // if the number is bigger than the middle, search in right side\n        else\n            return binarySearch(arr, mid + 1, end, number);\n    }\n}\n</code></pre> <p>Binary search plays a fundamental role in Newton's method, which is a method to find and approximate the result of complex mathematical functions such as the square root of a number. Binary-sort is extensively used in sorting algorithms such as quick sort and merge sort. </p>"},{"location":"intro/09-recursion/#merge-sort","title":"Merge sort","text":"<p>Please refer to the Merge sort section in the sorting chapter.</p>"},{"location":"intro/10-sorting/","title":"Sorting algorithms","text":"<p>TODO: Note for my furune self: add complete example of how to use those algorithms</p> <p>Sorting are algorithms that put elements of a list in a certain order. It is cruxial to understand the basics of sorting in order to start understanding more complex algorithms and why you have to pay attention to efficiency.</p> <p>Before going deep, please watch this video:</p> <p>SEIZURE WARNING!! </p> <p>and this one:</p> <p></p> <p>Explore the concepts interactively at visualgo.net.</p> <p>Try to answer the following questions, before continuing:</p> <ul> <li>What are the slowest sorting algorithms?</li> <li>What are the fastest sorting algorithms?</li> <li>Con you infer the difference between a stable and unstable sorting algorithm?</li> <li>What is the difference between a comparison and a non-comparison sorting algorithm?</li> <li>What would be an in-place and a non-in-place sorting algorithm?</li> <li>What is the difference between a recursive and a non-recursive sorting algorithm?</li> </ul>"},{"location":"intro/10-sorting/#the-basics","title":"The basics","text":"<p>Many of the algorithms will have to swap elements from the array, vector or list. In order to do that, we will need to create a function that swaps two elements. Here is the function:</p> <pre><code>// A function to swap two elements\nvoid swap(int *xp, int *yp) {  \n    int temp = *xp;  \n    *xp = *yp;  \n    *yp = temp;  \n}  \n</code></pre> <p>The <code>*</code> operator used in the function signature means that the function will receive a pointer to an integer. So it will efectivelly change the content in another scope. The <code>*</code> operator is used to dereference a pointer, which means that it will return the value stored in the memory address pointed by the pointer. Given the declaration is <code>int *xp</code>, the <code>*xp</code> will return the value stored in the memory address pointed by <code>xp</code>.</p> <p>Alternatively you could use the <code>&amp;</code> operator to pass the reference to that variable in the similar fashion, but the usage wont be requiring the <code>*</code> before the variable name as follows:</p> <pre><code>// A function to swap two elements\nvoid swap(int &amp;xp, int &amp;yp) {  \n    int temp = xp;  \n    xp = yp;  \n    yp = temp;  \n}  \n</code></pre> <p>The result is the same, but the usage is different. The first one is more common in C++, while the second one is more common in C.</p>"},{"location":"intro/10-sorting/#bubble-sort","title":"Bubble sort","text":"<p>Bubble sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.</p> <pre><code>// A function to implement bubble sort\nvoid bubbleSort(int arr[], int n) {  \n    // if the array has only one element, it is already sorted\n    if(n&lt;=1)\n        return;\n\n    int i, j;  \n    for (i = 0; i &lt; n-1; i++)\n        // Last i elements are already in place  \n        for (j = 0; j &lt; n-i-1; j++)  \n            if (arr[j] &gt; arr[j+1])  \n                swap(&amp;arr[j], &amp;arr[j+1]);  \n}  \n</code></pre> <p>As you can see, the algorithm is very simple, but it is not very efficient. It has a time complexity of O(n^2) and a space complexity of O(1).</p> <p>One of the drawbacks of this algorithm is the sheer amount of swaps. In the worst scenario, it does n^2 swaps, which is a lot. If your machine have slow writes, it will be very slow.</p>"},{"location":"intro/10-sorting/#insertion-sort","title":"Insertion sort","text":"<p>Insertion sort is a simple sorting algorithm that works the way we sort playing cards in our hands. You pick one card and insert it in the correct position in the sorted part of the list. You repeat this process until you have sorted the whole list. Here is the code:</p> <pre><code>// A function to implement insertion sort\nvoid insertionSort(int arr[], int n) {  \n    // if the array has only one element, it is already sorted\n    if(n&lt;=1)\n        return;\n\n    int i, key, j;  \n    for (i = 1; i &lt; n; i++) {  \n        key = arr[i];  \n        j = i - 1;  \n\n        /* Move elements of arr[0..i-1], that are  \n        greater than key, to one position ahead  \n        of their current position */\n        while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {  \n            arr[j + 1] = arr[j];  \n            j = j - 1;  \n        }  \n        arr[j + 1] = key;  \n    }  \n}  \n</code></pre> <p>It falls in the same category of algorithms that are very simple, but not very efficient. It has a time complexity of O(n^2) and a space complexity of O(1).</p> <p>Although it have the same complexity as bubble sort, it is a little bit more efficient. It does less swaps than bubble sort, but it is still not very efficient. It will swap all numbers to the left of the current number, which is a lot of swaps.</p>"},{"location":"intro/10-sorting/#selection-sort","title":"Selection sort","text":"<p>Selection sort is a simple sorting algorithm. This sorting algorithm is an in-place comparison-based algorithm in which the list is divided into two parts, the sorted part at the left end and the unsorted part at the right end. Initially, the sorted part is empty and the unsorted part is the entire list. The smallest element is selected from the unsorted array and swapped with the leftmost element, and that element becomes a part of the sorted array. This process continues moving unsorted array boundary by one element to the right. Here is the code:</p> <pre><code>// A function to implement selection sort\nvoid selectionSort(int arr[], int n) {\n    // if the array has only one element, it is already sorted\n    if(n&lt;=1)\n        return;\n\n    int i, j, min_idx;  \n\n    // One by one move boundary of unsorted subarray  \n    for (i = 0; i &lt; n-1; i++) {  \n        // Find the minimum element in unsorted array  \n        min_idx = i;  \n        for (j = i+1; j &lt; n; j++)  \n        if (arr[j] &lt; arr[min_idx])  \n            min_idx = j;  \n\n        // Swap the found minimum element with the first element  \n        swap(&amp;arr[min_idx], &amp;arr[i]);  \n    }  \n}  \n</code></pre> <p>It is also a simple algorithm, but it is a little bit more efficient than the previous two. It has a time complexity of O(n^2) and a space complexity of O(1).</p> <p>It does less swaps than the previous two algorithms, potentially n swaps, but it is still not very efficient. It selects for the current position, the smallest number to the right of it and swaps it with the current number. It does this for every number in the list, which fatally a lot of swaps. </p>"},{"location":"intro/10-sorting/#merge-sort","title":"Merge sort","text":"<p>Merge sort is a divide and conquer algorithm. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves. Here is the code:</p> <pre><code>// recursive merge sort\nvoid mergeSort(int arr[], int l, int r) {  \n    if (l &lt; r) {  \n        // Same as (l+r)/2, but avoids overflow for  \n        // large l and h  \n        int m = l+(r-l)/2;  \n\n        // Sort first and second halves  \n        mergeSort(arr, l, m);  \n        mergeSort(arr, m+1, r);  \n\n        merge(arr, l, m, r);  \n    }  \n}  \n\n// merge function\nvoid merge(int arr[], int l, int m, int r) {  \n    int i, j, k;  \n    int n1 = m - l + 1;  \n    int n2 =  r - m;  \n\n    // allocate memory for the sub arrays\n    int *L = new int[n1];\n    int *R = new int[n2];\n\n    /* Copy data to temp arrays L[] and R[] */\n    for (i = 0; i &lt; n1; i++)  \n        L[i] = arr[l + i];  \n    for (j = 0; j &lt; n2; j++)  \n        R[j] = arr[m + 1+ j];  \n\n    /* Merge the temp arrays back into arr[l..r]*/\n    i = 0; // Initial index of first subarray  \n    j = 0; // Initial index of second subarray  \n    k = l; // Initial index of merged subarray  \n    while (i &lt; n1 &amp;&amp; j &lt; n2) {  \n        if (L[i] &lt;= R[j]) {  \n            arr[k] = L[i];  \n            i++;  \n        }  \n        else {  \n            arr[k] = R[j];  \n            j++;  \n        }  \n        k++;  \n    }  \n\n    /* Copy the remaining elements of L[], if there are any */\n    while (i &lt; n1) {  \n        arr[k] = L[i];  \n        i++;  \n        k++;  \n    }  \n\n    /* Copy the remaining elements of R[], if there  \n    are any */\n    while (j &lt; n2) {  \n        arr[k] = R[j];  \n        j++;  \n        k++;  \n    }\n\n    // deallocate memory\n    delete[] L;\n    delete[] R;\n}  \n</code></pre> <p>It is a very efficient algorithm that needs extra memory to work. It has a time complexity of O(n*log(n)) and a space complexity of O(n). It is a very efficient algorithm, but it is not very simple. It is quite more complex than the previous algorithms. It is a divide and conquer algorithm, which means that it divides the problem in smaller problems and solves them. It divides the list in two halves, sorts them and then merges them. It does this recursively until it has a list of size 1, which is sorted. Then it merges the lists and returns the sorted list.</p>"},{"location":"intro/10-sorting/#quick-sort","title":"Quick sort","text":"<p>Quick sort is a divide and conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. Here is the code:</p> <pre><code>// recursive quick sort\nvoid quickSort(int arr[], int low, int high) {  \n    if (low &lt; high) {  \n        /* pi is partitioning index, arr[p] is now  \n        at right place */\n        int pi = partition(arr, low, high);  \n\n        // Separately sort elements before  \n        // partition and after partition  \n        quickSort(arr, low, pi - 1);  \n        quickSort(arr, pi + 1, high);  \n    }  \n}\n\n// partition function\nint partition (int arr[], int low, int high) {  \n    int pivot = arr[high]; // pivot  \n    int i = (low - 1); // Index of smaller element  \n\n    for (int j = low; j &lt;= high- 1; j++) {  \n        // If current element is smaller than or  \n        // equal to pivot  \n        if (arr[j] &lt;= pivot) {  \n            i++; // increment index of smaller element  \n            swap(&amp;arr[i], &amp;arr[j]);  \n        }  \n    }  \n    swap(&amp;arr[i + 1], &amp;arr[high]);  \n    return (i + 1);  \n}  \n</code></pre> <p>It is a very efficient algorithm that don't needs extra memory, which means it is in-place. In average, it can be as fast as mergesort with time complexity of O(n*log(n)), but in the worst case it can be as slow as O(n^2). But it is a better choice if you are not allowed to use extra memory. It is a divide and conquer algorithm, which means that it divides the problem in smaller problems and solves them. It selects a pivot and partitions the list around the pivot. It does this recursively until it has a list of size 1, which is sorted. Then it merges the lists and returns the sorted list.</p>"},{"location":"intro/10-sorting/#counting-sort","title":"Counting sort","text":"<p>Counting sort is a specialized algorithm for sorting numbers. It only works well if you have a small range of numbers. It counts the number of occurrences of each number and then uses the count to place the numbers in the right position. Here is the code:</p> <pre><code>// counting sort\nvoid countingSort(int arr[], int n) {  \n    // if the array has only one element, it is already sorted\n    if(n&lt;=1)\n        return;\n\n    int max=arr[0];\n    int min[0];\n\n    // find the max and min number\n    for(int i=0; i&lt;n; i++) {\n        if(arr[i]&gt;max) {\n            max=arr[i];\n        }\n        if(arr[i]&lt;min) {\n            min=arr[i];\n        }\n    }\n\n    // allocate memory for the count array\n    int *count = new int[max-min+1];\n\n    // initialize the count array\n    for(int i=0; i&lt;max-min+1; i++) {\n        count[i]=0;\n    }\n\n    // count the number of occurrences of each number\n    for(int i=0; i&lt;n; i++) {\n        count[arr[i]-min]++;\n    }\n\n    // place the numbers in the right position\n    int j=0;\n    for(int i=0; i&lt;max-min+1; i++) {\n        while(count[i]&gt;0) {\n            arr[j]=i+min;\n            j++;\n            count[i]--;\n        }\n    }\n\n    // deallocate memory\n    delete[] count;\n}\n</code></pre> <p>Counting sort is a very efficient sorting algorithm which do not rely on comparisons. It has a time complexity of O(n+k) where k is the range of numbers. Space complexity is O(k) which means it is not an in-place sorting algorithm. It is a very efficient algorithm, but it is not very simple. It counts the number of occurrences of each number and then uses the count to place the numbers in the right position.</p>"},{"location":"intro/10-sorting/#radix-sort","title":"Radix sort","text":"<p>Radix sort is a specialized algorithm for sorting numbers. It only works well if you have a small range of numbers. It sorts the numbers by their digits. Here is the code:</p> <pre><code>// Radix sort\nvoid radixSort(int arr[], int n) {\n    // if the array has only one element, return\n    if(n&lt;=1)\n        return;\n\n    // initialize the max number as the first number. \n    int max=arr[0];\n\n    // find the max number\n    for(int i=0; i&lt;n; i++) {\n        if(arr[i]&gt;max) {\n            max=arr[i];\n        }\n    }\n\n    // allocate memory for the count array\n    int *count = new int[10]; // 10 digits\n\n    // allocate memory for the output array\n    int *output = new int[n];\n\n    // do counting sort for every digit\n    for(int exp=1; max/exp&gt;0; exp*=10) {\n        // initialize the count array\n        for(int i=0; i&lt;10; i++) {\n            count[i]=0;\n        }\n\n        // count the number of occurrences of each number\n        for(int i=0; i&lt;n; i++) {\n            count[(arr[i]/exp)%10]++;\n        }\n\n        // change count[i] so that count[i] now contains actual position of this digit in output[]\n        for(int i=1; i&lt;10; i++) {\n            count[i]+=count[i-1];\n        }\n\n        // build the output array\n        for(int i=n-1; i&gt;=0; i--) {\n            output[count[(arr[i]/exp)%10]-1]=arr[i];\n            count[(arr[i]/exp)%10]--;\n        }\n\n        // copy the output array to the input array\n        for(int i=0; i&lt;n; i++) {\n            arr[i]=output[i];\n        }\n    }\n}\n</code></pre> <p>Radix sort is just a counting sort that is applied to every digit. It has a time complexity of O(n*k) where k is the number of digits. </p>"},{"location":"intro/10-sorting/#conclusion","title":"Conclusion","text":"<p>This is the first time we will talk about efficiency, and for now on, you will start evaluating and taking care about your algorithms' efficiency. You will learn more about efficiency in the next semester and course when we cover data structures.</p>"},{"location":"intro/11-structs/","title":"Structs","text":"<p>wip</p>"},{"location":"introgameprog/","title":"Introduction to Game Programming - Syllabus","text":"<p>Students will be introduced to and familiarized with their roles as Game Programmers. The course explores the various disciplines and vocations within game programming, provides an overview of the skills that make a game programmer successful, and presents both industry and academic contexts for their duties. Through hands-on projects using modern game technology, students will gain practical experience in their craft. source </p>"},{"location":"introgameprog/#requirements","title":"Requirements","text":"<p>No requirements</p>"},{"location":"introgameprog/#textbook","title":"Textbook","text":"<ul> <li>No text books</li> </ul>"},{"location":"introgameprog/#student-centered-learning-outcomes","title":"Student-centered Learning Outcomes","text":"Bloom's Taxonomy on Learning Outcomes <p>Upon completion of the Intro to game programming, students should be able to:</p>"},{"location":"introgameprog/#objective-outcomes","title":"Objective Outcomes","text":"<ul> <li>Understanding Game Development Roles: Students will be able to identify and describe the various disciplines and vocations within game programming, including different positions and fields within the industry.</li> <li>Exploration of Game Development Tools: Students will gain familiarity with modern game development tools, including hands-on experience with game engines like Unity.</li> <li>Historical and Industry Contexts: Students will understand the history of game development and current industry trends, challenges, and issues, enabling them to contextualize their work within the broader landscape of the game development industry.</li> <li>Practical Application through Projects: Students will develop practical skills by working on game development projects, including prototyping, brainstorming, quality assurance (QA), and testing.</li> <li>Effective Communication and Presentation: Students will practice and demonstrate their ability to effectively communicate and present their ideas and projects, both in written and oral formats.</li> <li>Insight into Game Development Success Factors: Students will learn about the key skills and attributes that contribute to success in game development, including collaboration, creativity, and technical proficiency.</li> <li>Interaction with Industry Professionals: Through interviews and discussions with game developers, students will gain insights into the day-to-day responsibilities and career paths of professionals in the game development industry.</li> <li>Introduction to Game Production: Students will be introduced to the basics of game production, learning how to manage and contribute to game development projects from concept to completion.</li> </ul>"},{"location":"introgameprog/#late-policy","title":"Late policy","text":"<p>Every day an assignment is late your maximum grade will be reduced by 1% up to 25 days, after that you will receive a flat 25% penalty.</p> <p>My goal is to grade the assignments no later than 1 week after submission, but in exceptional cases where I am struggling with lots of submissions, it could take 2 weeks maximum (in my career this has happened twice). Late submissions will be graded only once I finish grading all the others.</p> <p>If you have any accommodations and want to use your rights, or if you are facing any personal issues (no need to state what it is), I will grant extra time or grade fairly only if you send a comment on Canvas in the assignment before the deadline. Feel free to book meetings with me if you need to talk about it.</p>"},{"location":"introgameprog/#dei-teaching-statement","title":"DEI &amp; Teaching Statement","text":"<ul> <li>I am a autistic L1 person and I am doing my best to be a good teacher for you;</li> <li>I am from Brazil and we are pretty diverse people, I will treat everyone with respect and I expect the same from you;</li> <li>I can clearly understand many of your struggles, because I face lots of learning issues too, but sometimes my empathy might run out, and you will have to help me understand your issues so I can effectively help you;</li> <li>Please be patient with me, and I will be patient with you in return. I am always open to listen to you and help you succeed;</li> <li>I am very good at 1-1 support, so you are welcome to book weekly meetings with me to help you;</li> <li>I am a very open person, so you can ask me anything. I will not answer everything, but I will try to help you to find the answers;</li> <li>If you feel that you are failing, please reach out to me, remember: I want you to succeed. Allow me to create contingency plans for you.</li> </ul>"},{"location":"introgameprog/#schedule-for-fall-2024","title":"Schedule for Fall 2024","text":"<p>Warning</p> <p>This is a work in progress, and the schedule is subject to change. Every change will be communicated in class. Use this github repo as the source of truth for the schedule and materials. The materials provided in canvas are just a copy for archiving purposes and might be outdated.</p> <p>College dates for the Spring 2024 semester:</p> Event Date Classes Begin Aug. 26 Add/Drop Aug. 26 - 30 No Classes - College remains open Sept. 20 Indigenous Peoples Day Holiday Observance Oct. 14 Registration for Spring Classes Oct. 28 - Nov. 8 Last Day to Withdraw Nov. 8 Thanksgiving Break Nov. 25 - Nov. 29 Last Day of Classes Dec. 6 Finals Dec. 9 - Dec. 13 Winter Break Dec. 16 - Jan. 10 <p>Note</p> <p>This schedule is based on other's works, specially Eric Winebredder, Scott Barret and Dean Lawson. I am very grateful for their work and I am trying to adapt it to my own style. Please add them to your linkedin network, follow their work and say thanks to them for me!</p>"},{"location":"introgameprog/#week-1","title":"Week 1","text":"<ul> <li>Week 1. 2024/08/26</li> <li>Topics: <ul> <li>Syllabus, Icebreakers. </li> <li>Success in Game Development</li> </ul> </li> <li>Assignment:</li> <li>Interview a game programmer</li> </ul>"},{"location":"introgameprog/#week-2","title":"Week 2","text":"<ul> <li>Week 2. 2024/09/02</li> <li>Topics:<ul> <li>Game Dev History</li> </ul> </li> <li>Assignment: Game Tools Exploration</li> </ul>"},{"location":"introgameprog/#week-3","title":"Week 3","text":"<ul> <li>Week 3. 2024/09/09</li> <li>Topic: Game Development Fields</li> <li>Assignment: Job Hunt</li> </ul>"},{"location":"introgameprog/#week-4","title":"Week 4","text":"<ul> <li>Week 4. 2024/09/16</li> <li>Topic: Game Industry Issues</li> <li>Assignment: Research on Game Industry Issues</li> </ul>"},{"location":"introgameprog/#week-5","title":"Week 5","text":"<ul> <li>Week 5. 2024/09/23</li> <li>Topic: Game Issues Work</li> <li>Assignment: Game Issues Research</li> </ul>"},{"location":"introgameprog/#week-6","title":"Week 6","text":"<ul> <li>Week 6. 2024/09/30</li> <li>Topic: Game Issues Presentations</li> <li>Assignment: Game Issues Presentation</li> </ul>"},{"location":"introgameprog/#week-7","title":"Week 7","text":"<ul> <li>Week 7. 2024/10/07</li> <li>Topic: Unity + Git</li> <li>Assignment: <ul> <li>Repo setup</li> <li>Git merge check</li> </ul> </li> </ul>"},{"location":"introgameprog/#week-8","title":"Week 8","text":"<ul> <li>Week 8. 2024/10/14</li> <li>Topic: Unity + Git</li> <li>Assignment: Simple Unity Project</li> </ul>"},{"location":"introgameprog/#week-9","title":"Week 9","text":"<ul> <li>Week 9. 2024/10/21</li> <li>Topic: <ul> <li>Intro to Game Production Pipeline</li> <li>Tools for Brainstorming and Planning</li> </ul> </li> <li>Assignment: <ul> <li>Idea Prototyping</li> <li>Game Idea Presentation</li> </ul> </li> </ul>"},{"location":"introgameprog/#week-10","title":"Week 10","text":"<ul> <li>Week 10. 2024/10/28</li> <li>Topic: Ideation Presentations</li> <li>Assignment: Game Prototype</li> </ul>"},{"location":"introgameprog/#week-11","title":"Week 11","text":"<ul> <li>Week 11. 2024/11/04</li> <li>Topic: Work sessions</li> <li>Assignment: Game Prototype Checkpoint</li> </ul>"},{"location":"introgameprog/#week-12","title":"Week 12","text":"<ul> <li>Week 12. 2024/11/11</li> <li>Topic: QA Testing</li> <li>Assignment: Final Project Work</li> </ul>"},{"location":"introgameprog/#week-13","title":"Week 13","text":"<ul> <li>Week 13. 2024/11/18</li> <li>Topic: QA Testing</li> <li>Assignment: Final Project</li> </ul>"},{"location":"introgameprog/#week-14","title":"Week 14","text":"<ul> <li>Week 14. 2024/11/25</li> <li>Topic: BREAK</li> </ul>"},{"location":"introgameprog/#week-15","title":"Week 15","text":"<ul> <li>Week 15. 2024/12/02</li> <li>Topic: QA, Work sessions, How to publish</li> <li>Assignment: Final Project Presentations</li> </ul>"},{"location":"introgameprog/#finals","title":"Finals","text":"<ul> <li>Week 16. 2024/12/09</li> <li>Topic: Presentations</li> </ul>"},{"location":"introgameprog/02-GameDevTools/","title":"Game development tools","text":"<p>There are plenty of tools available for game development. I dont want to cover all of them this is just a brief overview of the most common ones.</p> <p>The most types of tools for developers are:</p> <ul> <li>Game Engines</li> <li>Game Development Frameworks / Libraries</li> <li>Programming editors and IDEs</li> </ul> <p>But there are other types of tools that are also important for game development:</p> <ul> <li>3D Modeling Tools</li> <li>2D Art and texture Tools</li> <li>Sound and Music Tools</li> <li>Planning and Management Tools</li> <li>Marketing and Monetization Tools</li> <li>Testing Tools</li> <li>Publishing and Distribution Tools and platforms</li> <li>Analytics, metrics, remote config and A/B Tools</li> </ul>"},{"location":"introgameprog/02-GameDevTools/#game-engines","title":"Game Engines","text":"<p>The powerhouses of game development, game engines are the software that packs lots of tools and features needed to create a game. They are the most important tool in a game developer's arsenal. Ex.: Unity3D, Unreal Engine, and Godot.</p> <p>You might understand a game engine as the \"orchestrator of the game\". </p> <p>Note</p> <p>Not all game engines provides embedded visual editors (ex.: Ogre3D), some of them are just a bunch of libraries and tools nicely integrated that you can use to create your game.</p> <p>Instead of listing all the game engines, I suggest you to search for the most popular ones and try them out. I suggest going to search engines and type some of these queries:</p> <ul> <li>\"Game engine landscape\"</li> <li>\"Top game engines\"</li> <li>\"Game engine market infographic\"</li> <li>\"Game engine popularity\"</li> <li>\"Game engine comparison\"</li> </ul> <p>If you are a open-source enthusiast, try to explore game engines on github. A nice search query involves the word \"game engine\" and the word \"awesome\", but here goes some links to help you:</p> <ul> <li>GitHub Collection of Game Engines</li> <li>Awesome GameEngines</li> </ul>"},{"location":"introgameprog/02-GameDevTools/#game-frameworks-libraries","title":"Game Frameworks / Libraries","text":"<p>Sometimes you don't need a full game engine, or you need to create something that no other one provides. In this case, you can use a game development framework or library. Ex.: SDL3, LibGDX, Phaser, and others.</p> <p>If you follow this path, you will have more control over your game, but you will need to code more things that are already done in game engines.</p> <p>I am afraid there are so many frameworks and libraries that I can't list them all here. But you can search for them using the same queries I suggested for game engines, but replacing the word \"engine\" with \"framework\" or \"library\", you will get amazed by the amount of tools available. Try it!</p>"},{"location":"introgameprog/02-GameDevTools/#assignment","title":"Assignment","text":"<ol> <li>Create an account on GitHub. If you don't want to expose yourself publicly, create a new account with a nickname unrelated to your real name. You can use any AI tool to help brainstorm a nickname for you. Extra: apply to GitHub Student Pack.</li> <li>Create a Repository on GitHub. The name of the repo should have \"Awesome\" somewhere in the name, and it should be related to game development tools. Ex.: \"Awesome-GameDev-Tools\". This will optmize SEO and make your repository more visible to others.</li> <li>Probably the repo will already have a README.md file, if not, create a README.md file on the root of your repo. Write a brief introduction to the repository and list some of the tools you are planning to cover.</li> <li>You should research and list at least 10 tools that you think are important for game development. Please explore others tools than the main-stream. Describe briefly each tool and provide a link to the tool's website or repository. </li> <li>You will present some of them in class, so be creative and avoid listing tools that everyone knows. </li> </ol>"},{"location":"introgameprog/09-production-pipeline/","title":"Game Production Pipeline","text":"<p>In game development, the production pipeline is the process that transforms an initial idea into a fully playable and polished game. It involves several stages, each requiring specific skills and collaboration between different teams. Here's an overview of the key stages of the game production pipeline:</p>"},{"location":"introgameprog/09-production-pipeline/#1-concept-pre-production","title":"1. Concept &amp; Pre-Production","text":"<p>The first stage of the production pipeline is the concept and pre-production phase. This is where the initial idea for the game is developed, and the core mechanics, art style, and story are defined. The team will create concept art, storyboards, and design documents to outline the vision for the game.</p> <ul> <li>Idea Generation<ol> <li>Brainstorming: The team comes up with ideas for the game. This can involve brainstorming sessions, mood boards, and research into similar games.</li> <li>Game Design Document: A detailed document outlining the core mechanics, story, characters, and art style of the game. As known as GDD or Whitepaper.</li> </ol> </li> </ul> <ul> <li>Prototyping<ol> <li>Playable Prototype: A basic version of the game is created to test the core mechanics and gameplay loop.</li> <li>Proof of Concept: A small prototype is created to test the core mechanics of the game and see if the idea is feasible.</li> <li>Vertical Slice: A more advanced prototype that includes a small section of the game to demonstrate the core gameplay loop.</li> </ol> </li> </ul> <ul> <li>Pre-Production Planning<ul> <li>Art Style &amp; Visual Design: Defining the look and feel of the game, including concept art and mockups.</li> <li>Technical Decisions: Choosing the game engine, tools, and software needed for development (e.g., Unity, Unreal Engine, custom engines).</li> <li>Technical writing: Writing technical documentation, such as coding standards, architecture diagrams, and asset pipelines. Also, the creation of the Technical Design Document (TDD) or Yellowpaper.</li> <li>Team Formation: Identifying and assembling a development team (artists, designers, programmers, sound designers, etc.).</li> </ul> </li> </ul> <pre><code>flowchart TD\n    B[Brainstorming] --&gt; C[Game Design Document]\n    C --&gt; D[Prototyping]\n    D --&gt; E[Playable Prototype]\n    D --&gt; F[Proof of Concept]\n    D --&gt; G[Vertical Slice]\n    G --&gt; H[Pre-Production Planning]\n    F --&gt; H\n    E --&gt; H\n    H --&gt; I[Art Style &amp; Visual Design]\n    H --&gt; J[Technical Decisions]\n    J --&gt; K[Technical Writing]\n    H --&gt; L[Team Formation]</code></pre>"},{"location":"introgameprog/09-production-pipeline/#2-production","title":"2. Production","text":"<p>This phase focuses on building the game. It's where most of the actual game development happens.</p> <ol> <li>Asset Creation <ul> <li>Art: Artists create 2D sprites, 3D models, animations, textures, environments, and user interface (UI) elements.</li> <li>Audio: Sound designers create music, sound effects, and voiceovers.</li> <li>Programming: Programmers build the game's code, including game mechanics, AI, physics, and user inputs.</li> </ul> </li> <li>Game Design &amp; Level Design<ul> <li>Game Design: Designers refine gameplay mechanics, balancing difficulty, and ensuring a smooth player experience.</li> <li>Level Design: Building game levels, worlds, or maps to provide engaging challenges or exploration areas for players.</li> </ul> </li> <li>Iteration<ul> <li>Feedback &amp; Testing: Internal testing, often called \"playtesting,\" helps identify issues or balance problems. Developers make iterative changes based on this feedback.</li> </ul> </li> <li>Milestones<ul> <li>Alpha: The game is playable from start to finish, but assets and gameplay may still be incomplete.</li> <li>Beta: The game is feature-complete with all assets, but there may be bugs or areas for optimization.</li> </ul> </li> </ol> <pre><code>flowchart TD\n    A[Asset Creation] --&gt; B[Art]\n    A --&gt; C[Audio]\n    A --&gt; D[Programming]\n    E[Design] --&gt; F[Game Design]\n    E --&gt; G[Level Design]</code></pre> <pre><code>flowchart TD\n    H[Iteration] --&gt; I[Feedback &amp; Testing]\n    I --&gt; J[Milestones]\n    J --&gt; K[Alpha]\n    J --&gt; L[Beta]</code></pre>"},{"location":"introgameprog/09-production-pipeline/#3-testing-quality-assurance-qa","title":"3. Testing &amp; Quality Assurance (QA)","text":"<p>This phase is about polishing and debugging the game to ensure a smooth and bug-free player experience.</p> <ol> <li>Bug Fixing<ul> <li>QA Testing: Testers play the game in different environments, identify bugs, and report them to the development team.</li> <li>Stress Testing: The game is tested under various conditions, such as handling many players in online modes or testing on different hardware.</li> </ul> </li> <li>Optimization<ul> <li>Performance Optimization: Developers optimize code, assets, and mechanics to ensure the game runs smoothly across all intended platforms.</li> <li>Polishing: Final tweaks to visuals, sound, and gameplay for a professional finish.</li> </ul> </li> </ol>"},{"location":"introgameprog/09-production-pipeline/#4-launch-post-production","title":"4. Launch &amp; Post-production","text":"<p>The game is now released to the public, and the development focus shifts to supporting the game post-launch.</p> <ol> <li>Marketing &amp; Distribution<ul> <li>Marketing Campaign: Promoting the game through trailers, social media, press releases, and influencer partnerships.</li> <li>Release: The game is distributed through platforms such as Steam, PlayStation Store, Xbox Live, or mobile app stores (App Store, Google Play).</li> </ul> </li> <li>Post-Launch Support<ul> <li>Patches &amp; Updates: Fixing post-launch bugs and adding new features or improvements based on player feedback.</li> <li>DLC &amp; Expansions: Developers may release downloadable content or expansions to extend the game\u2019s lifespan.</li> <li>Community Engagement: Ongoing interaction with the player base through social media, forums, and events (e.g., tournaments, challenges).</li> </ul> </li> </ol>"},{"location":"portfolio/","title":"Game Developer's Portfolio","text":"<p>Creating and maintaining a portfolio is a crucial part in any game developer's job search and career.? Portfolios are especially challenging for programmers, since the work presented is not inherently visual, yet it must still effectively demonstrate the individual's prowess and skills in their discipline.? This course provides Game Programmers a formal opportunity to sum up their experience in the major and produce a portfolio worthy of presentation at the Senior Show.? In this course, students discuss and implement pertinent portfolio materials for programmers, such as websites, repositories and demo reels.? Students will have an opportunity to spearhead an entirely solo project to add as a centerpiece to their materials. Source</p>"},{"location":"portfolio/#requirements","title":"Requirements","text":"<ul> <li>90 Credits</li> </ul>"},{"location":"portfolio/#student-centered-learning-outcomes","title":"Student-centered Learning Outcomes","text":"Bloom's Taxonomy on Learning Outcomes <p>Upon completion of the Game Developer's Portfolio course, students should be able to:</p>"},{"location":"portfolio/#objective-outcomes","title":"Objective Outcomes","text":"<ul> <li>Demonstrate Proficiency in Programming Languages:<ul> <li>Showcase competence in relevant programming languages commonly used in game development.</li> <li>Implement and explain code snippets that highlight problem-solving skills and efficiency.</li> </ul> </li> <li>Develop an Individual Project:<ul> <li>Spearhead a solo game development project to showcase the ability to conceive, plan, and execute a complete game;</li> <li>Demonstrate a deep understanding of programming concepts through the development of a unique and challenging project.</li> </ul> </li> <li>Create a Professional Portfolio Website:<ul> <li>Design and develop a visually appealing and user-friendly portfolio website to showcase programming projects.</li> <li>Utilize web development tools and frameworks to enhance the presentation of coding projects.</li> </ul> </li> <li>Build a Source Code Repository:<ul> <li>Establish and maintain a version-controlled repository (e.g., GitHub) containing well-documented code samples.</li> <li>Demonstrate proficiency in using version control tools and collaborative development practices.</li> </ul> </li> <li>Develop a Demo Reel:<ul> <li>Create a compelling demo reel that effectively communicates programming skills and contributions to game projects.</li> <li>Edit and present code snippets in a clear and concise manner within the demo reel.</li> </ul> </li> <li>Articulate Programming Contributions:<ul> <li>Clearly communicate the role and impact of programming contributions in game development projects.</li> <li>Develop the ability to discuss technical aspects of projects in a non-technical manner for diverse audiences.</li> </ul> </li> <li>Understand Industry Standards and Best Practices:<ul> <li>Adhere to industry standards and best practices in game programming.</li> <li>Apply knowledge of optimization, performance, and coding conventions commonly used in the game development industry.</li> </ul> </li> <li>Prepare for the Job Search and Senior Show:<ul> <li>Develop skills in resume writing, cover letter creation, and interview preparation specific to game programming roles.</li> <li>Prepare and present the portfolio effectively at the Senior Show or similar events to potential employers and industry professionals.</li> </ul> </li> <li>Receive and Provide Constructive Feedback:<ul> <li>Participate in peer reviews and constructive critiques to enhance the quality of portfolio materials.</li> <li>Provide thoughtful feedback to peers on both the technical and presentation aspects of their portfolios.</li> </ul> </li> <li>Reflect on Learning and Career Goals:<ul> <li>Reflect on personal learning experiences and identify areas for continuous improvement in game programming skills.</li> <li>Develop a clear understanding of career goals and create a plan for ongoing professional development in the game development industry.</li> </ul> </li> </ul>"},{"location":"portfolio/#schedule-for-spring-2024","title":"Schedule for Spring 2024","text":"<p>Warning</p> <p>This is a work in progress, and the schedule is subject to change. Every change will be communicated in class. Use the github repo as the source of truth for the schedule and materials. The materials provided in canvas are just a copy for archiving purposes and might be outdated.</p> <p>College dates for the Spring 2024 semester:</p> Date Event Jan 16 Classes Begin Jan 16 - 22 Add/Drop Feb 26 - March 1 Midterms March 11 - March 15 Spring Break March 25 - April 5 Registration for Fall Classes April 5 Last Day to Withdraw April 8 - 19 Idea Evaluation April 12 No Classes - College remains open April 26 Last Day of Classes April 29 - May 3 Finals May 11 Commencement Week Date Topic 1 2024/01/15 Introduction 2 2024/01/22 Case Studies 3 2024/01/29 Game Developer Portfolio Structure 4 2024/02/05 Communication &amp; Audience 5 2024/02/12 Strategy &amp; Analytics 6 2024/02/19 Demo Reels 7 2024/02/26 Frontend 8 2024/03/04 Content Management System 9 2024/03/11 BREAK 10 2024/03/18 Final Project &amp; Coding Interviews 11 2024/03/25 Hosting and Domain 12 2023/04/01 Dynamic Content &amp; Blogs 13 2023/04/08 Promoting 14 2023/04/15 Cover Letters 15 2023/04/22 Traditional CVs 16 2023/04/26 FINALS"},{"location":"portfolio/01-introduction/","title":"Introduction","text":"<p>A game developer portfolio is a collection of materials that showcase a game developer's skills, experience, and    accomplishments. It is typically used by game developers to demonstrate their abilities to potential employers,    clients, or partners, and may include a variety of materials such as:</p> <ul> <li>A resume or CV: This should highlight your education, work experience, and skills relevant to game development.</li> <li>Examples of your work: This can include demos, prototypes, or completed games that you have developed or    contributed to. It's a good idea to include links to any online versions of your work, as well as screenshots or video trailers.</li> <li>A portfolio website: Many game developers choose to create a website specifically for their portfolio, which can    include additional information about their skills and experience, as well as links to their work.</li> <li>Blogs, articles, or other writing: If you have written about game development or related topics, you may want to    include these in your portfolio to show your knowledge and expertise.</li> <li>Testimonials or references: Including positive feedback from clients or colleagues can help to demonstrate the    quality of your work.</li> </ul> <p>Overall, a game developer portfolio should be designed to demonstrate your abilities and accomplishments in a    clear and concise way, and should be tailored to the specific needs and goals of the person or organization you    are presenting it to.</p> <p>Building a portfolio is not only about you, it is about making the life easier of the ones interested on you by  giving insights if they should hire you, follow you or anything else. In order to make people understand you, you  have to know yourself better.</p> <p></p>"},{"location":"portfolio/01-introduction/#who-are-you-what-you-excel-and-what-do-you-enjoy-doing","title":"Who are you, what you excel and what do you enjoy doing?","text":"<p>In your portfolio, you will have to express yourself in a way that others can understand who you are, and it can be  challenging for some. In order do help you discover who you are, what you excel, and what do you really enjoy  doing. I will be briefly vague here to point some emotional support and reasoning to help you answer the question.  If you are clear about that, please skip this entire section. Here goes a small amount of advices I wish I have  heard when I was young.</p> <p> </p> Ikigai Note <p>The above image links to a very good reference to understand the drives that you should be aware while taking decisions on your future career. Visit it.</p> <p>You are a complex being and hard to define. I know. It is hard to put yourself in a frame or box, but this process is  relevant to make the life of the others to evaluate if they want more you or not. If for some reason a person is  reading your portfolio, it means that you are ahead of the others, so you must respect their time and goals while  they are reading your content.</p> <p>What you do, do not define what you are, you can even work with something you dont love as long it is part of a bigger  plan. Given that, you have to know how to differentiate yourself from your work while respecting your  feelings. The sweet spot is when you mix who you are with what you do, and you have nice feelings about it. But this  can be hard to achieve and require maturity to mix things. If you dont have a clear understand of those aspects of  yourself, you will be subjected to be exploited by bad companies and managers.</p> <p>It is totally fine try to excel some job you are not passionate. You just have to find means to make your time  doing it as enjoyable as possible. In the end of the journey it will slowly become something you can be proud of,  and you will become a different person than the one you are now. Understanding this kind of mentality will help you  endure more and be more resilient to problems. </p> <p>Keep track of your progress towards your goal. First of all, have a clear goal, so you can build a path to it.  Otherwise, any path would sound just like any other apathetic path. Having a clear goal will make your path  shine and easy to choose. It will help you in difficult moments where you feel uncomfortable by being just a small  piece of a machinery. You will be able to act as part of machine while you need to achieve your goal as a necessary  step.</p> <p>Focus on always keep track on your evolution on your journey to excellence. Don't compare too much yourself to the  others, everyone is facing a different journey and everyone took different paths in their career that probably you  didn't have the option to chose in the past. But you cannot be uncritical either, you have to analyse your progress and  check if your current path is making you life good, you have to take a decision to change the plan or even the goal  with the new information you learned through the current path you are pursuing.</p> <p>In other point of view, you wont start your career as senior developer, so you have to build your own path. Making  mistakes is part of the process, and that is the reason you will be gradually exposed to big things. You should  accept yourself, don't push too hard, and do some basic stuff. Just accept the challenges of doing something not  fancy, but relevant to build your career.</p>"},{"location":"portfolio/01-introduction/#define-and-state-your-mission-and-goal","title":"Define and state your mission and goal","text":"<ul> <li>Are you a generalist or a specialist type?</li> <li>What position you are looking for?</li> <li>What kind of person you want to become?</li> </ul>"},{"location":"portfolio/01-introduction/#gather-information","title":"Gather information","text":"<p>In order to build a good portfolio, you will need to gather information about yourself and your work. In the process  you will discover yourself. It will feels like looking to a mirror for the first time.</p> <p>If you didnt published yot your projects on itchio, github, or any other platform, now it is a good moment for doing it. Pay attention that if you are going to share your code publicly, you have to avoid sharing content that do not belong to you. In other words, avoid copyright infringements. </p>"},{"location":"portfolio/01-introduction/#proof-of-your-accomplishments","title":"Proof of your accomplishments","text":"<p>It is a good practice to always take screenshots, use web archive or any means to prove what you are stating. Some games got lost in time, they die or become unavailable in the long term.</p> Personal advice <p>In my case, we developed a very successful game in the past, and because of some problems with investors and judicial dispute, we had to shut down the game. But it was one of the most successful games in that year, it was nominated to Unity Awards and it was the most downloaded racing game. The only things that I can showcase now are print-screens, recorded videos and web-archive pages. So it is something that can make you survive the questions.</p>"},{"location":"portfolio/01-introduction/#videos-photos-or-lightweight-web-builds","title":"Videos, photos, or lightweight web builds","text":"<p>A good way to express your work is to show it in a form of videos, or photos. If your game is small enough to be embedded, or you can strip the most relevant part of it and built for web(webgl, wasm etc), try to publish the relevant part of it online, but do not over-do it, because it will take too much time to craft a good interaction.</p>"},{"location":"portfolio/01-introduction/#homework","title":"Homework","text":"<ol> <li>Define your domain name;<ul> <li>I usually search domains here and buy on wherever is cheaper, usually here </li> </ul> </li> <li>Find a good portfolio to follow;</li> <li>Design the scaffold / wireframe of what you want to show; </li> <li>Gather the data you want to show;</li> <li>Think on catchphrases and call to actions.</li> </ol>"},{"location":"portfolio/02-cases/","title":"Case Study","text":""},{"location":"portfolio/02-cases/#index","title":"Index","text":"<ul> <li>Activity 1</li> <li>Activity 2</li> <li>Considerations</li> <li>Evaluated Portfolios</li> </ul> <p>This class will be focused in planning, portfolio evaluation, github processes, ci/cd and in-class activities.</p>"},{"location":"portfolio/02-cases/#activity-1","title":"Activity 1","text":"<p>Start setting up your Github pages. We are going to use github pages mostly for two intentions: Webpage hosting for your portfolio and Demo project hosting.</p>"},{"location":"portfolio/02-cases/#webpage","title":"Webpage","text":"<p>For your webpage, you can develop something from ground up using your preferred web framework and we are going to show you how to do it, but the fastest way is to just follow any template. Here goes a bunch of open sourced developer portfolios you can fork and modify for your intent. https://github.com/topics/developer-portfolio?l=html . Try to take a look on them and check if you want to fork any of them. So in this activity you will have to fork and try to run a clone of a portfolio you like just to got into some action and discover how things work.</p> <ol> <li>Find a developer portfolio on github</li> <li>Fork it</li> <li>Clone in your machine</li> <li>Make some changes</li> <li>Build it</li> <li>Deploy it to gh-pages either via automated ci/cd or via publishing a build from a empty branch or the main one</li> </ol>"},{"location":"portfolio/02-cases/#demo-reels","title":"Demo reels","text":"<p>For project demo, game, or whatever interaction you want to allow the user to do, I built some boilerplates for you. Later on, you will be able to embed those webgl/html5 builds into your portfolio, so it is a good moment for you to start doing it now. As extras, optionally you can add badges for your repo from here: https://shields.io/</p>"},{"location":"portfolio/02-cases/#sdl2","title":"SDL2","text":"<p>In order to showcase your ability to build something from ground up, this repo holds a boilerplate with C++, SDL2, IMGUI, SDL2IMAGE, SDL2TTF, SDL2MIXER, CI/CD automation for automatic deployment: https://github.com/InfiniBrains/SDL2-CPM-CMake-Example</p> <ol> <li>fork it</li> <li>go to the repo settings, actions, general, in the bottom, enable workflow permission, read and write, save</li> <li>run github action at least once</li> <li>enable actions and automatic page deployment from a branch gh-pages</li> </ol>"},{"location":"portfolio/02-cases/#ai-sdl2","title":"AI + SDL2","text":"<p>If you enjoy AI programming and want to test yourself, you can try forking this repo and implement what is inside the examples folder https://github.com/InfiniBrains/mobagen </p> <ol> <li>fork it</li> <li>run github action at least once</li> <li>enable actions and automatic page deployment from a branch gh-pages</li> </ol>"},{"location":"portfolio/02-cases/#unity","title":"Unity","text":"<p>If you want to showcase your ability with Untiy, you can follow this boilerplate to have an automatic build set up. https://github.com/InfiniBrains/UnityBoilerplate</p> <ol> <li>Fork it </li> <li>run github action for getting an unit licence at least once</li> <li>grab the generated file, and upload it to https://license.unity3d.com/manual</li> <li>get the signed licence and copy the text content to your clipboard </li> <li>go to your repo settings, security, secrets and variables, actions and setup a new repository secret with the name 'UNITY_LICENSE' and the content from your clipboard</li> <li>go to the repo settings, actions, general, in the bottom, enable workflow permission, read and write, save</li> <li>run the main action</li> <li>enable actions and automatic page deployment from a branch gh-pages</li> <li>edit webgl template with your logo or image</li> </ol>"},{"location":"portfolio/02-cases/#activity-2","title":"Activity 2","text":"<p>This class is totally up to you. Here goes what you should do in class and finish at home. The idea is for you to feel a whole process on how to create merge and pull requests to a public repo.</p> <ol> <li>Search a good portfolio published online</li> <li>use Twitter, LinkedIn, Google to search for good game developer portfolios;</li> <li>another good query on google would be \"awesome developer portfolio\", or \"curated list of developer portfolios\" try it!. Example: https://github.com/emmabostian/developer-portfolios </li> <li>You can use this time to search a good and open sourced portfolio to fork and start your own based on other. https://github.com/topics/developer-portfolio</li> <li>Fork this repo</li> <li>Create a markdown file in this folder with a meaningful name about the benchmarked repository.</li> <li>Follow this example</li> <li>The file name should be the website domain name followed by .md</li> <li>If another student is aiming to evaluate the same portfolio, just edit the file adding your evaluation to the text.</li> <li>Your file should contain:</li> <li>A summary</li> <li>The portfolio evaluated</li> <li>The date the evaluation happened</li> <li>Print-screens uploaded to image hosting services such as imgur or others</li> <li>What things you judge as good and you are aiming to follow and target</li> <li>What things you judge that needs attention and should be improved</li> <li>Why you would hire the owner of the portfolio</li> <li>General considerations</li> <li>Edit this file on github to link your work here if you want to showcase it here.</li> <li>Be Kind and constructive</li> <li>Send a push request</li> </ol>"},{"location":"portfolio/02-cases/#considerations","title":"Considerations","text":"<ul> <li>The portfolios evaluated here are just opinions</li> </ul>"},{"location":"portfolio/02-cases/#evaluated-portfolios","title":"Evaluated Portfolios","text":"<ul> <li>Example</li> </ul>"},{"location":"portfolio/02-cases/example.com/","title":"Index","text":"<ul> <li>Assessment 1</li> <li>Assessment 2</li> </ul>"},{"location":"portfolio/02-cases/example.com/#assessment-1","title":"Assessment 1","text":""},{"location":"portfolio/02-cases/example.com/#summary","title":"Summary","text":"<ul> <li>The date the evaluation happened</li> <li>The portfolio evaluated</li> <li>Briefing</li> </ul>"},{"location":"portfolio/02-cases/example.com/#strength","title":"Strength","text":"<p>What things you judge as good and you are aiming to follow and target. Add images as reference using print-screens uploaded to image hosting services such as imgur or others;</p>"},{"location":"portfolio/02-cases/example.com/#improvements","title":"Improvements","text":"<ul> <li>What things you judge that needs attention or should be improved?</li> <li>What questions you would ask this person?</li> </ul>"},{"location":"portfolio/02-cases/example.com/#best-fit","title":"Best fit","text":"<ul> <li>Why you would hire the owner of the portfolio? </li> <li>For what kind of task?</li> <li>What position?</li> <li>How do you see this person interacting with others?</li> </ul>"},{"location":"portfolio/02-cases/example.com/#general-considerations","title":"General considerations","text":"<ul> <li>Just add some final consideration for the portfolio owner;</li> <li>If possible, send a message to one of its communication channels informing your assessment;</li> </ul>"},{"location":"portfolio/02-cases/example.com/#assessment-2","title":"Assessment 2","text":"<p>The other student willing to do multiple assessment for the same portfolio, just create an entry in the index following the same structure and same the assessment differently in this case, we put number 2. And use the same structure on the 1.</p>"},{"location":"portfolio/03-structure/","title":"Game Developer Portfolio Structure","text":"<p>Create a single page app containing most of these features listed here.</p>"},{"location":"portfolio/03-structure/#head-summary","title":"Head / Summary","text":"<p>Chose carefully what to you use as a head of your page. It is the first thing a person reads. It can be an impactful message, a headline, personal statement, background video or very limited interactive section.</p> <p>Note</p> <p>Avoid bravado. You can be bold without being naive. Let the bravado statements for when you become a senior. If you write bravados right in the begining of your portifolio and you are still a junior, you are just communicating that you will be hard to work with.  A senior developer reading your portfolio is more interested in developers eager to learn, humble, and looking for guidance so they will have a easier life hiring you.  </p>"},{"location":"portfolio/03-structure/#about","title":"About","text":"<p>This is a summary obout yourself, be brief and achievement oriented. What and who you are. Contact info via social  medias. State your working status and target. If you are a narrative centred person, you can create something fancy  here, but dont over-do, less is more!</p>"},{"location":"portfolio/03-structure/#showcase","title":"Showcase","text":"<ul> <li>Projects</li> <li>Ability and versatility</li> <li>Community Contributions</li> </ul> <p>You can showcase your personal work, a job you make for a client(if authorized).</p> <p>Projects</p> <p>It is a good practice to showcase only the best works you made. You might find interesting to add more than 5, but there are chances of your reader clicking exactly on the worst one and have a bad first impression of you. In your showcase section, avoid showcasing bad work. Invite some of your friends to help you select the best ones to showcase.</p> <p>Ability</p> <p>Avoid using percentage graphs to showcase your proficiency on specific tech stack or tool. The main reason is: how do you grade of your ability as 80%, 100% or 30%? Worse than that, how can the reader be sure of that? If you want to do that, it is better to apply for certificates, there are plenty on linkedin or specialized sites.</p>"},{"location":"portfolio/03-structure/#achievements","title":"Achievements","text":"<ul> <li>List key achievements and skills. Dont use any kind of grading</li> <li>Education</li> <li>Testimonials or anything to prove your skills and capacity</li> </ul>"},{"location":"portfolio/03-structure/#project-details","title":"Project Details","text":"<ul> <li>You should create a way to explain more about what is showcased. Ex.: redirect the user to the project description page, or open a modal</li> </ul>"},{"location":"portfolio/03-structure/#blog","title":"Blog","text":"<ul> <li>Featured posts/content and call to action to read your ongoing content production</li> <li>Explain your process in designing a game or piece of software</li> <li>Explain some interesting details you learn or describe your knowledge explorations.</li> </ul>"},{"location":"portfolio/03-structure/#contact","title":"Contact","text":"<p>Explicitly state what people should expect if they contact you and what they can expect from your return. Ex.: If  you aim to be a freelance, state your offer and ask for them to briefly state the job activity, time frame and the rate  they are willing to pay. If you are looking for a full-time position, the most common way is to just share your email, so they can contact you.</p> <p>Another option is to list all of your social medias, but dont overuse this. Nowadays we have a bunch of them, so if  you list all of them, there is chances, you are not active there and the link will guide the reader to a empty and  haunted house and they will not engage.</p>"},{"location":"portfolio/03-structure/#general-tips","title":"General tips","text":"<ul> <li>Keep the Target Audience in Mind<ul> <li>Take Advantage of Your Homepage </li> <li>Make Your Portfolio Scannable </li> <li>Minimize Clicks</li> </ul> </li> <li>Remember UX and UI <ul> <li>Go Mobile or Go Home </li> <li>Optimize Website Performance </li> <li>Remember Accessibility</li> </ul> </li> <li>Showcase Your Best Work and Skills <ul> <li>Share Your Code and Live Projects </li> <li>OR Provide Code Samples and GIFs </li> <li>Boast Freelance and Personal Projects </li> <li>BUT Be Selective </li> <li>Prove that You Are on The Same Page</li> </ul> </li> <li>Show Your Personality<ul> <li>Use Custom Domain</li> <li>Make Use of Introductory Statement </li> <li>Use Your Tone of Voice </li> <li>Share Your Motivation (Optional)</li> </ul> </li> <li>Maintain Personal Brand <ul> <li>Keep Portfolio Up-to-Date</li> <li>Include Testimonials</li> </ul> </li> <li>Encourage Communication<ul> <li>Call-to-action button or link to contact </li> </ul> </li> </ul> <p>reference</p>"},{"location":"portfolio/03-structure/#homework","title":"Homework","text":"<ul> <li>[Optional]Create a wireframe draft of what you are going to do on figma, miro or any other tool you find relevant. If you already have a Portfolio page already set, try to think on how do you make it be responsive on mobile devices.</li> <li>Scaffold your project in github. Describe in the README.md what you are going to do in your demo. You might try to convince a colleague to work with you. You can do more than one demo if you want. Some examples:<ul> <li>Raytrace demo for cloud and Human body. ref https://www.youtube.com/watch?v=Qj_tK_mdRcA</li> <li>Networking game using the phone as a controller and your portfolio demo as the viewer. https://blockrage.pgs-soft.com/</li> <li>Catch the cat demo for AI. https://llerrah.com/cattrap.htm</li> <li>Create unity editor plugin to dynamically generate meshes via splines based on sample locations. https://www.youtube.com/watch?v=f5Q7Z2KxILE is a game with 50million downloads that used this technique to generate scenarios. Here you can watch a better explanation. https://www.youtube.com/watch?v=saAQNRSYU9k</li> <li>Embed a shader toy behind your portfolio page. https://shadertoyunofficial.wordpress.com/2018/02/17/embedding-shadertoys-in-website/</li> <li>A nice collection of fun ideas to code for your portfolio https://mrdoob.com/</li> <li>Board game simulation. Ex: chess https://www.chessprogramming.org/ or https://github.com/JuUnland/Chess/ or this https://www.youtube.com/watch?v=WKs685H6uOQ</li> </ul> </li> <li>[Optional] Simulate a real test by creating a console based space invader in 48h. <ul> <li>Efficiently draw (print on console)</li> <li>Efficient collision check</li> </ul> </li> </ul>"},{"location":"portfolio/04-communication/","title":"Communication","text":"<p>Having a well-written and organized portfolio is important for any game developer, as it can help them stand out from the competition and demonstrate their skills and experience to potential employers. A good portfolio should clearly communicate the developer's strengths and accomplishments, and should be tailored to the specific needs and expectations of the audience.</p> <p>Effective communication is crucial in building a strong game developer portfolio, as it allows the developer to clearly convey their skills and experiences to potential employers. A portfolio that is well-written and easy to understand will be more effective at convincing an employer to hire the developer, while a poorly written or poorly organized portfolio may have the opposite effect.</p>"},{"location":"portfolio/04-communication/#audience","title":"Audience","text":"<p>In general your portfolio will be read by:</p> <ul> <li>Human Resources</li> <li>Software Developers</li> </ul> <p></p>"},{"location":"portfolio/04-communication/#human-resources","title":"Human Resources","text":"<p>If you are applying for a big tech company, chances are your submission won't be read by a tech person the first human triage. So in order to pass this first filter, you have to be generic and precise. They are often very busy evaluating multiple applications, and probably they will spend 30-60 seconds before making the decision about moving forward in the process or not. Your portfolio will need to catch their attention and communicate clearly your fit, passion and ability in a short time frame.</p>"},{"location":"portfolio/04-communication/#software-developer-managers","title":"Software Developer Managers","text":"<p>In contrast with HR, developer managers probably will not be shocked with any fancy stuff(such as full page pre-loaders) you add to your portfolio, so be concise and straight to the point, because most of them already know all the contents. From all of your portfolio readers, they are one of the most critique of your job.</p> <p>In another hand, usually developers do not look for programming language fit, frameworks or tools you use. They are more interested if you will be able to learn and execute the job in a meaningful time. So try to express yourself in a way that showcase your ability to solve problems, no matter what problem is, they are mostly curious on how to solve complex problem by framing the problem in another way or how to be innovative. </p>"},{"location":"portfolio/04-communication/#what-they-look-for","title":"What they look for","text":"<p>The following metrics can be evaluated by reading your portfolio, interviews or tests. The most common evaluation metrics they made are:</p> <ul> <li>Position Fit<ul> <li>They are going to search if your portfolio showcase experience in the same area of what they are looking for the specific position they received. Usually they will look for specific keywords for the requirements list;</li> </ul> </li> <li>Company fit<ul> <li>They take count on your expressed ideas, stated goals, tone, alignment and supporting projects to evaluate your future evolution inside the company; ex. https://wa.aws.amazon.com/wat.pillars.wa-pillars.en.html </li> </ul> </li> <li>Passion<ul> <li>Passionate developers tend to express projects they are proud of. The description of the projects are mostly achievement-based. Ex.: more than X million downloads. This example showcases that you were part of something huge, and it is easily understandable.</li> <li>There is a high correlation on high performant people that they usually shine in side-projects or even hobbies. So they look for it. Ex.: Google encourages employees to devote 20% of their time to hobbies or skill-building.</li> </ul> </li> <li>Competence<ul> <li>They need to evaluate if you are really able to solve the problem properly, in a meaningful time, and in a team. You have to describe which tools, tech stack and how you glue everything in order to solve the problem. Be assured you are correctly expressing yourself here, because it is one of the central part that is not taken superficially.</li> </ul> </li> <li>Innovation and Curiosity<ul> <li>Innovative developers solve problems out of the box. It doesn't matter how complex the problem is, but if you solve in a innovative way, reframe it or do any magic to solve it, chances are to have good points here;</li> <li>Good companies incentives research and test new stuff. So they usually like to see your deliverables with new bleeding-edge technology tools.</li> </ul> </li> <li>Proactiveness<ul> <li>Usually the more proactive developers tend to have more leadership positions. So if you want to give the readers a glimpse of your ability in this area, a good place to showcase that is in project description section. Express problems that arise and how do you manage that before it become a real problem.   </li> </ul> </li> <li>Learner<ul> <li>It is good to be always tuned with the current evolution of the technology, so try to keep the education section always updated with some courses or publish blog posts about some new tech. </li> </ul> </li> <li>Thinking big / Thoughtfulness / Risk management<ul> <li>They are going to look for your ability to think big, and how you manage risks. So if you have a project that you had to manage risks, or think big, it is a good place to showcase that.</li> <li>Expose cases where you had to manage risks, or think big, and how you manage that. What you learned in the process trying to achieve bigger goals. </li> </ul> </li> </ul>"},{"location":"portfolio/04-communication/#in-class-activities","title":"In class activities","text":""},{"location":"portfolio/04-communication/#1-self-reflection-on-the-audience","title":"1. Self-Reflection on the audience","text":"<p>Try to look at your portfolio from the perspective of the audience. What are the strengths and weaknesses of your portfolio? What are the areas that you need to improve in order to better communicate your skills and experiences to potential employers?</p>"},{"location":"portfolio/04-communication/#2-mock-interviews","title":"2. Mock interviews","text":"<p>Pair up with a colleague and find some common questions that company usually asks. You can find some of them here. Then, take turns interviewing each other and providing feedback on how well you communicated your skills and experiences.</p>"},{"location":"portfolio/04-communication/#homework","title":"Homework","text":"<ul> <li>Write the content for each one of your projects and all other sections of your portfolio.</li> <li>1<sup>st</sup> round of Portfolio Feedbacks. </li> <li>Research in a game company you like the resources on their hiring process. Take notes on how they hire and which positions you want to apply. Here goes some examples on how to get ready for interviews:<ul> <li>Epic: https://www.epicgames.com/site/en-US/earlycareers/career-paths</li> <li>AWS: https://aws.amazon.com/careers/how-we-hire/</li> <li>General interview questions https://www.mockquestions.com/</li> </ul> </li> <li>Top interview questions https://leetcode.com/problem-list/top-interview-questions/. Some examples: <ul> <li>https://leetcode.com/problems/two-sum/ - the most asked question</li> <li>https://leetcode.com/problems/kth-largest-element-in-an-array/ - heap</li> <li>https://leetcode.com/problems/median-of-two-sorted-arrays/</li> <li>https://leetcode.com/problems/minimum-space-wasted-from-packaging/ - bin packing, try to solve for 2d image pack for textures</li> </ul> </li> <li>Watch this video https://www.youtube.com/watch?v=Kte-t1pQQ3I and start contributing into an open source project or community</li> </ul>"},{"location":"portfolio/05-strategy/","title":"Strategies to get hired","text":"<ul> <li>Portfolio</li> <li>Interviews</li> <li>Social Network</li> </ul>"},{"location":"portfolio/05-strategy/#strategies-for-your-portfolio","title":"Strategies for your portfolio","text":"<p>Ask some questions for ChatGPT. Here goes a sample extracted from this prompt:</p> <pre><code>Create a strategy to get hired on a AAA game studio like COMPANY_NAME as a POSITION_NAME\n</code></pre> <ul> <li>Develop the right skills: The first step to getting hired in a AAA game studio is to develop the right skills for the job. Start by researching the job positions in the studio and look for the required skills, experience, and qualifications. Then, focus on building those skills through relevant education, training, and projects. You can also take courses, attend workshops or conferences, and create a portfolio of your work to showcase your abilities.</li> <li>Network with industry professionals: Networking with industry professionals can help you gain exposure and insights into the game development industry. Attend industry events, join online forums, participate in game development communities, and reach out to professionals in the field to build relationships. You can also consider working on collaborative projects with other game developers to expand your network.</li> <li>Stay up-to-date with industry trends: Keeping up with the latest trends and news in the gaming industry can help you stay ahead of the game and impress your potential employers. Read industry blogs, participate in online discussions, follow industry influencers on social media, and stay up-to-date with the latest game releases to show that you are knowledgeable and passionate about the industry.</li> <li>Research the game studio: Before applying for a job, research the game studio to learn about their culture, values, and work environment. Look for information about their current projects, the team structure, and the company's mission statement. This will help you tailor your resume and cover letter to match the company's requirements and demonstrate that you are a good fit for the team.</li> <li>Apply for internships: Consider applying for internships in a AAA game studio. This is an excellent opportunity to gain industry experience and build your skills. Even if the internship is unpaid, the experience and contacts you gain could be invaluable for your future career.</li> <li>Prepare for the interview: Once you get an interview, make sure to prepare thoroughly. Research common interview questions and practice your responses. Be ready to talk about your experience, skills, and passion for game development. Also, prepare questions to ask the interviewer about the company and the job position to show your interest and enthusiasm.</li> </ul> <pre><code>Write a strategy to get hired as a Game Programmer in a Indie Game Studio\n</code></pre> <ul> <li>Develop a strong portfolio: Your portfolio is your calling card, so it needs to showcase your programming skills, creativity, and technical abilities. Create a portfolio that showcases your best work, including your personal game development projects, demos, and samples of your code. Highlight your experience with programming languages, software, tools, and engines that are commonly used in the indie game development industry.</li> <li>Research indie game studios: Do your research on the indie game studios that interest you. Find out what kind of games they make, the size of the studio, the company culture, and their current job openings. Look for studios that align with your interests, values, and career goals.</li> <li>Build a network: Building a network of like-minded professionals in the game development industry can be invaluable. Attend industry events, join online forums and communities, and engage with indie game developers on social media. This will help you stay up-to-date on the latest trends, technologies, and job openings.</li> <li>Gain experience: Gain experience by creating your own games, participating in game jams, contributing to open-source projects, or volunteering for a non-profit game development organization. This will help you gain valuable experience and demonstrate your passion and commitment to game development.</li> <li>Apply for internships: Many indie game studios offer internships or junior positions for game programmers. This is an excellent opportunity to gain hands-on experience, build your skills, and make contacts in the industry. Even if the internship is unpaid, the experience and contacts you gain could be invaluable for your future career.</li> <li>Tailor your resume and cover letter: Tailor your resume and cover letter to showcase your programming skills, experience, and passion for game development. Highlight your technical skills, programming languages, software, and engines that you are proficient in. Be sure to mention any experience you have working in a team and collaborating with other game developers.</li> <li>Prepare for the interview: Once you get an interview, make sure to prepare thoroughly. Research the indie game studio, their current projects, and their company culture. Be ready to talk about your experience, skills, and passion for game development. Also, prepare questions to ask the interviewer about the company and the job position to show your interest and enthusiasm.</li> </ul>"},{"location":"portfolio/05-strategy/#analytics","title":"Analytics","text":"<ul> <li>Analytics. Recommendation: Google Analytics or Firebase Analytics;</li> <li>Heatmaps. Recommendation: smartlook;</li> </ul>"},{"location":"portfolio/05-strategy/#generate-traffic","title":"Generate traffic","text":"<p>For more details see promoting section;</p>"},{"location":"portfolio/05-strategy/#strategies-for-interviews","title":"Strategies for interviews","text":"<p>Train yourself in coding interviews with some materials: - Crack the Coding Interview - Interviews on AWS - Interview on Google - Course on get ready for an AWS interview</p>"},{"location":"portfolio/05-strategy/#coding-resources","title":"Coding resources","text":"<ul> <li>Leetcode </li> <li>Hackerrank</li> <li>Geeksforgeeks</li> <li>Interview Questions</li> <li>Review on algorithms</li> <li>Practice code interviews</li> </ul>"},{"location":"portfolio/05-strategy/#curated-videos-on-most-common-programming-interview-questions","title":"Curated videos on most common programming interview questions","text":"<ul> <li>AlgoExpert</li> </ul>"},{"location":"portfolio/05-strategy/#strategies-for-social-networks","title":"Strategies for Social Networks","text":"<p>All social networks uses some type of relevance algorithm to promote your content or profile. So you have to find means to increase your relevance. Most of the algorithms measure your relevance by number of reactions(likes, follows, comments, replies...), so every time you post something, you should try to incentive the content consumers to do that.</p>"},{"location":"portfolio/05-strategy/#google","title":"Google","text":"<p>If your aim is to be relevant on Google, try to check the trending words people are searching now via Google trends. </p> <p>If you follow this path, the main strategy is the common SEO optimization techniques. Here goes some guides to help you nail that.</p> <ul> <li>https://searchengineland.com/guide/what-is-seo</li> <li>https://www.wordstream.com/seo</li> <li>https://searchengineland.com/yandex-leak-learnings-392393</li> </ul> <p>If you are a prolific writer and really into it. You can try to make wikipedia refer you and raise your rate on google algorithm. You can query google <code>site:wikipedia.org [your niche keyword] + \"dead link\"</code> and check the pages that are missing references to your content, then edit the wikipedia page to refer your website or blog post to give sources for something missing. </p>"},{"location":"portfolio/05-strategy/#linkedin","title":"Linkedin","text":"<ul> <li>Consistency is the key. You have to post frequently. Period. </li> <li>Follow other professionals in your field and check what they are posting to try replicate their behavior.</li> <li>Follow companies you want to work</li> <li>Connect with the hiring personal from the companies you want to work for, so when they search for people, you will be on the top suggestions.</li> </ul>"},{"location":"portfolio/05-strategy/#activity","title":"Activity","text":"<p>WiP</p>"},{"location":"portfolio/06-reels/","title":"Portfolio Reels","text":"<p>Sample Portfolio Reels</p>"},{"location":"portfolio/06-reels/#demo-reels-structure","title":"Demo Reels Structure","text":"<p>Game demo reels should showcase the best features and gameplay of a game to potential players and investors. Here are some important elements that a game demo reel should include:</p> <ul> <li>Captivating Intro: The game demo reel should start with a captivating intro that hooks the audience and captures their attention.</li> <li>Gameplay Footage: The demo reel should showcase the actual gameplay footage of the game. This should include a variety of gameplay scenarios, showcasing the game mechanics and the different features of the game.</li> <li>Visuals: The game demo reel should showcase the visual quality of the game. This should include graphics, animations, lighting, and special effects.</li> <li>Audio: The game demo reel should include the game's audio elements, such as sound effects, music, and voice acting. </li> <li>User Interface: The demo reel should showcase the user interface of the game, including the menus, HUD, and other interactive elements.</li> <li>Story and Characters: If the game has a story or characters, the demo reel should include footage that showcases these elements.</li> <li>Game Modes: If the game has different game modes, the demo reel should showcase the different modes and gameplay styles.</li> <li>Multiplayer: If the game has a multiplayer mode, the demo reel should showcase the multiplayer gameplay and the features that make it unique.</li> <li>Call-to-Action: The demo reel should end with a clear call-to-action, such as a link to the game's website or social media page, or instructions on how to download the demo.</li> </ul> <p>Overall, the game demo reel should be well-paced, engaging, and give a good sense of what the game is all about.</p>"},{"location":"portfolio/06-reels/#captivating-intro","title":"Captivating Intro","text":"<p>A captivating intro is an essential part of a game demo reel, as it sets the tone and captures the viewer's attention from the start. There are several ways to create a captivating intro, depending on the type of game and the intended audience. Here are a few ideas:</p> <ul> <li>Show a brief teaser: Start the demo reel with a brief teaser that highlights the game's most exciting features, such as a stunning visual effect or a heart-pumping action sequence.</li> <li>Use a dramatic voiceover: Use a dramatic voiceover to introduce the game and create a sense of anticipation. The voiceover can provide a brief overview of the game's story or setting, or simply hype up the viewer with promises of intense gameplay and unforgettable experiences.</li> <li>Introduce the developer: If the game is developed by a well-known studio or an indie developer with a strong following, introduce them in the intro. Share their mission and goals for creating the game and convey their passion and expertise in the field.</li> <li>Set the mood with music: Use music to set the mood for the demo reel. Choose a track that complements the game's theme or genre and builds up the excitement for the upcoming gameplay footage.</li> <li>Use a creative animation: Use a creative animation that visually represents the game's core concept or theme. This can help to grab the viewer's attention and give them a taste of what the game is all about.</li> </ul> <p>Whatever approach is taken, the intro should be brief and impactful, providing a sense of the game's style and tone while leaving the viewer eager to see more.</p>"},{"location":"portfolio/06-reels/#gameplay-footage","title":"Gameplay Footage","text":"<p>Gameplay footage is the heart of any game demo reel, as it showcases the actual gameplay experience that the game offers. This section of the demo reel should be carefully crafted to highlight the most exciting and impressive features of the game. Here are some tips for creating engaging gameplay footage:</p> <ul> <li>Variety of gameplay scenarios: The gameplay footage should showcase a variety of gameplay scenarios to give viewers a well-rounded idea of what the game is all about. This can include different levels or environments, various weapons or abilities, and different characters or modes.</li> <li>Highlight unique features: Highlight the game's unique features and mechanics, such as special abilities, game modes, or multiplayer options. This can help to differentiate the game from other titles in the same genre.</li> <li>Showcase player choices: If the game allows players to make choices that affect the story or gameplay, showcase these choices in the demo reel. This can help to create a sense of player agency and show how the game responds to different playstyles.</li> <li>Show off impressive visuals: The gameplay footage should also showcase the game's impressive visuals, such as high-quality textures, realistic lighting and shadow effects, or dynamic particle effects. These elements can help to create a more immersive and engaging gameplay experience.</li> <li>Keep it concise: The gameplay footage should be concise and to the point, showcasing the most exciting and impressive elements of the game without becoming overly long or repetitive.</li> <li>Use high-quality footage: The footage should be high-quality and well-shot, with clear visuals and smooth frame rates. This can help to create a professional and polished demo reel that shows off the game in the best possible light.</li> </ul> <p>Overall, the gameplay footage should provide a clear and exciting look at what the game has to offer, highlighting its unique features and impressive visuals while keeping the viewer engaged and interested.</p>"},{"location":"portfolio/06-reels/#visuals","title":"Visuals","text":"<p>Visuals are a critical component of any game demo reel, as they are often the first thing that potential players and investors will notice. The visuals of a game should be showcased prominently in the demo reel, demonstrating the game's graphical capabilities and the level of detail and polish that has gone into its development. Here are some key elements of visuals to consider when creating a game demo reel:</p> <ul> <li>Graphics quality: The graphics quality of the game should be highlighted in the demo reel. This can include high-quality textures, realistic lighting and shadows, dynamic particle effects, and other visual elements that make the game stand out.</li> <li>Art style: The art style of the game is also an important visual element to showcase. Whether the game has a realistic or stylized art style, it should be highlighted in the demo reel to give viewers a sense of the game's aesthetic.</li> <li>Animations: The animations of the game are an important part of the overall visual experience. The demo reel should showcase the game's character animations, object interactions, and any other animations that add to the game's visual appeal.</li> <li>Camera work: The camera work used in the demo reel can also be used to highlight the game's visual elements. Different camera angles, zooms, and cuts can be used to showcase the game's graphics and make them stand out.</li> <li>User interface: The user interface (UI) of the game is also an important visual element that should be showcased in the demo reel. The demo reel should highlight the UI design and any interactive elements, such as buttons or menus.</li> <li>Environment design: The game's environment design is another important visual element to showcase in the demo reel. Whether the game takes place in a realistic or fantastical setting, the environment design should be highlighted to give viewers a sense of the game's atmosphere.</li> </ul> <p>Overall, visuals play a crucial role in creating an immersive and engaging gameplay experience, and they should be showcased prominently in a game demo reel. By highlighting the game's graphics quality, art style, animations, camera work, user interface, and environment design, the demo reel can give viewers a clear and exciting look at what the game has to offer.</p>"},{"location":"portfolio/06-reels/#audio","title":"Audio","text":"<p>Audio is an often overlooked but crucial component of any game demo reel. It can enhance the overall gameplay experience, create an immersive atmosphere, and contribute to the game's overall appeal. Here are some key elements of audio to consider when creating a game demo reel:</p> <ul> <li>Sound effects: Sound effects are an important component of any game's audio design. The demo reel should showcase the game's sound effects, such as weapon sounds, environmental effects, and character vocalizations.</li> <li>Music: The music used in the game can also be an important part of the overall audio experience. The demo reel should highlight the game's soundtrack, showcasing any memorable themes or musical cues that contribute to the game's atmosphere.</li> <li>Voice acting: If the game features voice acting, it should be highlighted in the demo reel. The demo reel should showcase any memorable voice performances and give viewers a sense of the quality of the voice acting.</li> <li>Sound design: The overall sound design of the game is another important element of the game's audio. The demo reel should showcase how the game's audio elements work together to create an immersive atmosphere, such as the use of ambient sounds or dynamic music that changes based on the player's actions.</li> <li>Audio quality: The quality of the game's audio should also be highlighted in the demo reel. The sound effects, music, and voice acting should be clear and well-produced, with high-quality mixing and mastering that enhances the overall experience.</li> </ul> <p>Overall, audio is a critical component of any game demo reel. By showcasing the game's sound effects, music, voice acting, sound design, and audio quality, the demo reel can give viewers a clear and engaging look at the game's overall audio experience.</p>"},{"location":"portfolio/06-reels/#user-interface","title":"User Interface","text":"<p>The user interface (UI) is a critical component of any game, and it should be showcased prominently in a game demo reel. The UI is the primary way that players interact with the game, and it can greatly impact the overall gameplay experience. Here are some key elements of UI to consider when creating a game demo reel:</p> <ul> <li>Design: The design of the UI is an important aspect to showcase in the demo reel. The UI design should be visually appealing, easy to navigate, and intuitive for players to use. The demo reel should showcase any unique design elements, such as custom icons or animations, that contribute to the overall look and feel of the game.</li> <li>Functionality: The functionality of the UI is also an important element to showcase in the demo reel. The UI should be designed to help players easily access important information, such as health, inventory, or map data. The demo reel should showcase how the UI functions during gameplay and how it supports the overall game mechanics.</li> <li>Customizability: Some games offer customizable UI options, such as changing the size or placement of UI elements. If the game has this feature, it should be highlighted in the demo reel to showcase the flexibility of the UI design.</li> <li>Responsiveness: The responsiveness of the UI is another important aspect to showcase in the demo reel. The UI should respond quickly and smoothly to player input, and any interactive elements should have clear feedback to help players understand their actions.</li> <li>Accessibility: Finally, the accessibility of the UI is an important consideration. The demo reel should showcase how the UI supports players with different needs, such as colorblind options or font size adjustments.</li> </ul> <p>Overall, the UI is a critical component of any game, and it should be showcased prominently in a demo reel. By highlighting the design, functionality, customizability, responsiveness, and accessibility of the UI, the demo reel can give viewers a clear and engaging look at how players interact with the game and how the UI supports the overall gameplay experience.</p>"},{"location":"portfolio/06-reels/#story-and-characters","title":"Story and Characters","text":"<p>The story and characters are important elements of many games, and they can greatly impact the overall experience. When creating a game demo reel, it is important to showcase the game's story and characters in a way that is engaging and gives viewers a clear sense of what to expect from the game. Here are some key elements of story and characters to consider when creating a game demo reel:</p> <ul> <li>Story: The demo reel should give viewers a sense of the game's story, including the setting, premise, and major plot points. The story should be presented in a way that is engaging and makes viewers want to learn more about the game's world and characters.</li> <li>Characters: The demo reel should also showcase the game's characters, including their personalities, motivations, and relationships with each other. Characters should be presented in a way that is relatable and makes viewers care about their journeys throughout the game.</li> <li>Dialogue: If the game features dialogue, it should be highlighted in the demo reel. The dialogue should showcase the quality of the writing and voice acting, and give viewers a sense of the characters' personalities and relationships.</li> <li>Cutscenes: Cutscenes are a great way to showcase the game's story and characters in a visually compelling way. The demo reel should include any memorable or important cutscenes that help to advance the story or develop the characters.</li> <li>Worldbuilding: Finally, the demo reel should showcase the game's worldbuilding, including any lore or backstory that helps to flesh out the game's world and characters. This can include things like environmental storytelling, item descriptions, or other worldbuilding details.</li> </ul> <p>Overall, the story and characters are important elements of many games, and they should be showcased prominently in a game demo reel. By highlighting the story, characters, dialogue, cutscenes, and worldbuilding, the demo reel can give viewers a clear and engaging look at what to expect from the game's narrative and characters.</p>"},{"location":"portfolio/06-reels/#game-modes","title":"Game Modes","text":"<p>Game modes are an important aspect of many games, particularly in multiplayer titles, and they can greatly impact the overall experience. When creating a game demo reel, it is important to showcase the different game modes in a way that is engaging and gives viewers a clear sense of what to expect from each mode. Here are some key elements of game modes to consider when creating a game demo reel:</p> <ul> <li>Variety: The demo reel should showcase a variety of different game modes, particularly if the game has several unique modes to choose from. This will give viewers a sense of the game's overall variety and replayability, and help them understand how each mode contributes to the overall experience.</li> <li>Objectives: Each game mode should have clear objectives that are highlighted in the demo reel. This can include things like capturing objectives, defeating enemies, or completing tasks within a certain timeframe. The objectives should be presented in a way that is clear and easy to understand for viewers.</li> <li>Mechanics: The demo reel should showcase the different mechanics and gameplay elements that are unique to each game mode. This can include things like different weapons or abilities, unique maps or terrain, or different objectives and win conditions. By highlighting these unique mechanics, viewers can get a sense of how each mode feels and plays.</li> <li>Multiplayer: If the game has multiplayer modes, it is important to showcase how players can interact with each other within each mode. This can include things like team play, player versus player combat, or cooperative objectives.</li> <li>Replayability: Finally, the demo reel should showcase how each game mode contributes to the game's overall replayability. This can include things like unlockable rewards, leaderboards, or other features that encourage players to come back and play the game multiple times.</li> </ul> <p>Overall, game modes are an important aspect of many games, particularly in multiplayer titles, and they should be showcased prominently in a game demo reel. By highlighting the variety, objectives, mechanics, multiplayer elements, and replayability of each mode, the demo reel can give viewers a clear and engaging look at what to expect from each game mode and how it contributes to the overall experience.</p>"},{"location":"portfolio/06-reels/#multiplayer","title":"Multiplayer","text":"<p>Multiplayer is an important aspect of many games, particularly in online multiplayer games, and it can greatly impact the overall experience. When creating a game demo reel, it is important to showcase the multiplayer aspects in a way that is engaging and gives viewers a clear sense of what to expect from the multiplayer modes. Here are some key elements of multiplayer to consider when creating a game demo reel:</p> <ul> <li>Modes: The demo reel should showcase the different multiplayer modes that are available in the game. This can include things like team-based modes, objective-based modes, and free-for-all modes. The demo reel should highlight how each mode plays and what the objectives are.</li> <li>Player Count: The demo reel should also showcase the player count for each mode. This can include things like 1v1, 2v2, 4v4, or larger player counts for massive multiplayer games. The player count is an important factor in determining the pacing and flow of the game, and should be highlighted in the demo reel.</li> <li>Matchmaking: If the game features matchmaking, it is important to showcase how the matchmaking system works and how players are paired with opponents of similar skill levels. This can include things like player ranking systems or other matchmaking algorithms that help to ensure fair matches.</li> <li>Progression: The demo reel should also highlight any progression systems that are available in the multiplayer modes. This can include things like unlocking new weapons or abilities as players progress through the game, or other rewards for completing objectives or winning matches.</li> <li>Social Features: Finally, the demo reel should showcase any social features that are available in the multiplayer modes. This can include things like chat systems, friend lists, or the ability to form clans or teams with other players.</li> </ul> <p>Overall, multiplayer is an important aspect of many games, particularly in online multiplayer games, and it should be showcased prominently in a game demo reel. By highlighting the different modes, player count, matchmaking, progression, and social features of the game's multiplayer modes, the demo reel can give viewers a clear and engaging look at what to expect from the multiplayer experience.</p>"},{"location":"portfolio/06-reels/#call-to-action","title":"Call to Action","text":"<p>The Call-to-Action (CTA) is an important element of any game demo reel because it prompts viewers to take action after watching the video. The CTA can be in the form of a request or suggestion that encourages viewers to do something related to the game, such as signing up for a mailing list, pre-ordering the game, or visiting the game's website. Here are some key elements to consider when including a Call-to-Action in a game demo reel:</p> <ul> <li>Clarity: The CTA should be clear and specific, so that viewers know exactly what action they are being asked to take. This can include things like \"pre-order now\" or \"sign up for updates\", and should be prominently displayed at the end of the video.</li> <li>Relevance: The CTA should be relevant to the content of the video, and should relate directly to the game being showcased. For example, if the demo reel is showcasing a new game trailer, the CTA could be to pre-order the game.</li> <li>Timing: The CTA should be timed appropriately within the video, so that it appears at the end and is not too distracting during the main content of the video.</li> <li>Design: The design of the CTA should be visually appealing and eye-catching, using bold fonts and contrasting colors to draw attention to it.</li> <li>Placement: The CTA should be placed in a prominent location within the video, such as at the end or in a lower third graphic.</li> </ul> <p>Overall, the Call-to-Action is an important element of any game demo reel because it prompts viewers to take action after watching the video. By including a clear, relevant, and well-designed CTA at the end of the video, game developers can encourage viewers to take action and engage with the game in meaningful ways.</p>"},{"location":"portfolio/06-reels/#specifications","title":"Specifications","text":"<p>Specifications for the Demo Reels: </p> <p>Video Specifications:</p> <ul> <li>Size: 1920x1080 (16:9)</li> <li>Format: saved as <code>.mp4</code></li> <li>Length: </li> <li>Game Art = 90 seconds.</li> <li>Game Design, Game Production Management, Game Programming, Game Sound Design = 60 seconds.</li> <li>No audio with lyrics</li> <li>No X-rated content</li> <li>Use audio that won't get removed from Vimeo (where we store the files) because of copyright infringement. </li> </ul>"},{"location":"portfolio/06-reels/#homework","title":"Homework","text":"<p>Watch some videos from Sample Portfolio Reels and create a script detailing what you are going to present yourself. Start creating the timeline of feelings and you are going to present at each time.</p> <p>Tell a story where you are (or your work is) the protagonist.</p>"},{"location":"portfolio/07-hosting/","title":"Hosting","text":"<p>There are many hosting options and solutions to match each need. Lets cover some options here.</p> <p></p>"},{"location":"portfolio/07-hosting/#options-low-code","title":"Options low code","text":"<ul> <li>Google sites - My preference</li> </ul> <p>Other notable options: - Godaddy - Wordpress - Wix - Squarespace</p> <p>The problem with those are they require payments to be fully functional, so if you want to go deep and have mor freedom, we are going to cover other options.</p>"},{"location":"portfolio/07-hosting/#static-html-with-static-data","title":"Static HTML with Static Data","text":"<p>If what you want to serve is static hosting, your content is only frontend and do not require backend, you can use  github pages, google firebase, S3 bucket hosting or many others. This is the easiest approach.  - In this scenario you will be able to store only pre-generated html and static files; - This is useful even if you use blogs that changes rarely, you would have to redeploy your page for every change.</p>"},{"location":"portfolio/07-hosting/#static-html-with-dynamic-data","title":"Static HTML with Dynamic Data","text":"<p>If your html is static and need backend services that are rarely called, you can go with cloud functions, my  suggestions here are google cloud run and aws amplify or even firebase functions. If you use nextjs website, check  vercel or netlify hosting services.  - The deploys are easy; - It can be very expensive if you hit high traffic, but it will remain free if you dont hit the free tiers; - You will have to pay attention to your database management;</p>"},{"location":"portfolio/07-hosting/#dynamic-html-with-dynamic-data","title":"Dynamic HTML with Dynamic Data","text":"<p>If your website generate content dynamically such as Wordpress blogs or any custom made combination with next or  anything. - There is many \"cheap hosting\" solutions that are mostly bad performant(it can reach more than 10s to answer a    request). You have to avoid them to make your user enjoy the visit; - Management can go as hard as possible, but the results can be awesome; - It can be really expensive;</p>"},{"location":"portfolio/07-hosting/#cdn-and-dns-management","title":"CDN and DNS Management","text":"<p>I highly recommend you to use Cloudflare as you DNS nameserver, so you can cache your website results for faster loading. But you can use your own nameserver provider by your domain name registrar.</p> <p>DNS stands for Domain Name System, which is a system that translates domain names into IP addresses. When you type a domain name into your web browser, such as \"www.example.com,\" your computer sends a request to a DNS server to resolve the domain name into an IP address, such as \"192.0.2.1.\" The IP address is then used to establish a connection with the web server that hosts the website you are trying to access.</p> <p>DNS plays a crucial role in hosting because it enables users to access websites using domain names instead of IP addresses. This makes it easier for users to remember and find websites. DNS also allows websites to change servers or IP addresses without affecting the user experience, as long as the DNS records are updated properly.</p> <p>In hosting, DNS is important because it determines which server is responsible for hosting a particular website. DNS records can be configured to point to different servers depending on factors such as geographic location, server load, and failover. Hosting providers typically offer DNS management tools to help users configure and manage their DNS records.</p>"},{"location":"portfolio/07-hosting/#homework","title":"Homework","text":"<p>The goal is to have as website up and running for your portfolio.</p> <p>Here goes my preferable way for hosting anything. With that you can host microservices, game services, serve API, static and dynamic websites and much more. It can be tricky but lets setup it now.</p> <ul> <li>Oracle cloud - Free forever - Virtual Machine with 4vCPU, 24GB ram, 200GB storage. https://www.youtube.com/watch?v=NKc3k7xceT8 watch up to 5:38 time</li> <li>Coolify - Your private Software as a Service (SAAS) manager - https://youtu.be/Jg6SWqyvYys?t=125 starts from minute 2:00</li> <li>CI/CD - to your remote machine https://www.youtube.com/watch?v=Uj7F3hdgmEo</li> <li>Cloudflare DNS - set your domain to point to your DNS - https://www.youtube.com/watch?v=XQKkb84EjNQ </li> <li>Install Wordpress via coolify interface(new resource, new service) and use your own DNS. Or host your page statically https://www.youtube.com/watch?v=CfdPyASUSkI&amp;</li> </ul> <p>Talk with me if you dont have a domain and want to use my infrastructure temporarily.</p> <p>I am assuming you wont have a huge traffic, but you have a complex combination of services. In the complex cases and if you want to make your life easier and cheaper,my suggestion for hosting would be oracle cloud with arm cpu.  They offer for free a virtual machine with 200gb storage, 4vcpus, 24gb ram for free at this date of 2022/12  tutorial. In this scenario, I recommend using https://coolify.io/ as  your deployment management system, just pay attention that this machine is running in an arm cpu. With this  combination, you can manage everything easily in one place for free. This is not ideal, because you wont have  backups, but it is good enough for most scenarios.</p> <p>If you have plenty of money or your website have high traffic, I recommend you to use Kubernetes to orchestrate  every microservice.</p>"},{"location":"portfolio/08-cms/","title":"Content Management System","text":""},{"location":"portfolio/08-cms/#play-with-chatgpt","title":"Play with chatgpt","text":"<p>In order to train yourself for a game position try some prompts similar to this one. <pre><code>Act as technical recruiter for a AAA game studio. You are going to interview me by asking me questions relevant for an entry level position as \"unreal gameplay developer\". Skills required are: Unreal Egine, Data structures, Algorithms, VR and Rendering pipelines. \nYou are going to ask me a question when I prompt \"ask\".\nMy answer to your question will start with \"response\".\nOn each response I give to your question, you will provide me 5 bullets: SCORE: from 0 to 100 points to evaluate if I answered it well or not; EXPLANATION: why you gave me that score; RATIONALE: explain what a typical recruiter is measuring with the question previously asked; ADVISE: to improve for answer to score 100 answer; NEXT: question. \nDo you understand? Dont ask anything now.\n</code></pre></p>"},{"location":"portfolio/09-get-ready/","title":"Final project","text":"<p>Your portfolio should be a hosted webpage and a open repository on github.</p> <p>You should follow a portfolio structure, to build a website and host it publicly. It should have a nice style, a good communication is the key to execute and analyse your strategy in order to capture insights. You can optionally increment your portfolio via dynamic content such as blogs or whatever you find relevant. Another extra step would be to create a generic cover letter to express your intentions and goals more personally. Note that some game companies still require CVs To boost your visualization, you can promote.</p> <p>Minimum steps: 1. Have a domain or at least a meaningful github username/organization;  2. Create a github repository;  3. Push your frontend to the repo; 4. Enable github pages;  5. Create a CI/CD to build and deploy to gh pages;  6. Point your domain to gh-pages if you have one;</p> <p>It is expected to have something to showcase, so it is expected to have at least 3 projects to showcase. It is preferable to showcase something that could be testable(webgl builds) or watchable in a lightweight manner.</p> <p>If you are willing to showcase your ability in Unity, I recommend you to try GameCI and github pages. If you want to showcase your game engine abilities with C++, I recommend you using CMake, SDL2 and emscripten to build and deploy  for github pages.</p> <p>If you want to start something from scratch you can use this repo to start have a SDL2 project with all libraries already set. It builds and publish a Github page via Github actions automatically,  you can check it running here. It features CMake tooling, IMGUI for debug interfaces, SDL2, SDL2_ttf, SDL_image, SDL_mixer, </p>"},{"location":"portfolio/09-get-ready/#2023","title":"2023","text":"<p>Here goes a list of portfolios</p>"},{"location":"portfolio/09-get-ready/common-intenterview-questions/","title":"Common interview questions","text":"<p>Resources: - https://debbie.codes/blog/interviewing-with-the-big-tech-companies/</p>"},{"location":"portfolio/10-frontend/","title":"Frontend for your portfolio","text":"<p>Here goes a curated templates for a quick start: - https://github.com/techfolios/template - the easiest one - https://github.com/rammcodes/Dopefolio - straight to the point developer portfolio - https://github.com/ashutosh1919/masterPortfolio - animated with a strong opening - https://smaranjitghose.github.io/awesome-portfolio-websites a good compilation on how to build and deploy your portfolio with a good pre-made template</p> <p>But for this class, we are going to follow this template, sofork this boilerplate if you want a more robust webapp experience.</p>"},{"location":"portfolio/10-frontend/#frontend-frameworks","title":"Frontend frameworks","text":"<p>There are many frontend frameworks floating around, but in order to speed up your learning curve on how to deploy a fully customized webpage, I am going to use this combination of technologies:</p> <ul> <li>React for building website;</li> <li>Vite for tooling;</li> <li>Tailwindcss for styling;</li> </ul> <p>Some examples with this stack:</p> <ul> <li>https://reactjsexample.com/a-portfolio-page-using-react-js-and-tailwind-css/</li> <li>https://github.com/InfiniBrains/reactjs-vite-tailwindcss-boilerplate</li> </ul> <p>Watch this video to get a fast entry to this stack Here goes an introductory video about this combination.</p>"},{"location":"portfolio/12-promoting/","title":"How to promote yourself and your work","text":"<p>For most of us, game developers, the most important thing is to make games. But, in order to make games, we need to promote ourselves and our work. In this section, we will learn how to do that.</p>"},{"location":"portfolio/12-promoting/#defining-the-target-to-be-promoted","title":"Defining the target to be promoted","text":"<p>Before we start promoting, we need to define what we want to promote. The main difference between promoting ourselves or our work is the tone, the message and the medium being promoted. So we can build a successful strategy.</p> <p>In ether path you chose, consider the following questions:</p> <ul> <li>What is the target audience?</li> <li>What is the target platform?</li> <li>What is the target medium?</li> <li>What is the target message and content?</li> <li>What is the target call to action?</li> <li>What is the target result?</li> <li>How to measure the success?</li> <li>How to improve the promotion?</li> </ul>"},{"location":"portfolio/12-promoting/#defining-the-audience","title":"Defining the Audience","text":"<p>Before creating and running a promotion campaigns, we need to define the audience. The audience is the group of people we want to reach with our promotion and it can defined by the following:</p> <ul> <li>Recruiters, HR, and hiring managers;</li> <li>Other game developers, especially those who are in the same field as you;</li> <li>Game players;</li> <li>Journalists, writers and critics;</li> <li>Investors;</li> <li>Communities;</li> </ul>"},{"location":"portfolio/12-promoting/#about-platforms","title":"About Platforms","text":"<p>To reach specific audiences, we need to be in the same platform they are. For example: - Game players: Steam, Twitch, YouTube, itchio, GameJolt, Discord; - Journalists: Twitter, LinkedIn; - Investors: AngelList, Ycombinator, LinkedIn, Crunchbase; - Communities: Reddit, Discord, Facebook, Twitter; - Recruiters: mostly Linkedin.</p> <p>Social media is a great way to promote yourself as a game developer. You can use it to share your work, your thoughts, your ideas, and your opinions. You can also use it to connect with other developers and learn from them.</p> <p>Here goes my opinion about the most important platforms:</p> <ul> <li>Twitter: it is the best and easy way to communicate with anyone in the world. The distance between to reach anyone is zero. And it has an awesome tagging structure. It is a great way to share your thoughts and ideas and ask for feedbacks. It is a great way to connect with other developers and learn from them. You can also use it to share your work and promote your games.</li> <li>LinkedIn: It is a great way to connect with recruiters and hiring managers. Usually you will see other developers publishing their thoughts and ideas, so try to post relevant comments on their publications to get noticed and improve your visibility.</li> <li>Facebook: It is mostly a general purpose social media. You can use it to connect with your friends and family, and collect feedbacks for your content. It is a great way to promote your finished games.</li> <li>Instagram and Tiktok: Are more focused in fast, small and visual content. You can use it to promote your games and your work, but it is not the best way to share your thoughts and ideas.</li> <li>Reddit: This one is the best for collecting feedbacks from other developers about your content, but the reach is limited.</li> <li>Discord: The best tool be in touch with communities, you can build your own community for your game and be in direct contact with yours consumers. Another good use is to be in direct contact with other developers and learn from them.</li> <li>YouTube and Twitch: The best way to share your work and promote your games.</li> <li>Medium and Blogs in general: The best way to share your thoughts and ideas and ask for feedbacks. You can use it in conjunction with other platforms to catch the general attention and bring them to your content. </li> </ul>"},{"location":"portfolio/12-promoting/#mediums","title":"Mediums","text":"<p>The mediums are: Social media posts, Blog posts, Email, Podcasts, Videos, Events, Conferences, Meetups, Workshops, Webinars, Webcasts, and more.</p> <p>For each type of medium, we need to plan the content, the frequency, and the duration. We have very nice tools to help us with that, like Buffer, Hootsuite and many others.</p>"},{"location":"portfolio/12-promoting/#message-and-tone","title":"Message and tone","text":"<p>The message is the main idea we want to communicate. The tone is the way we want to communicate it. You have to match the tone with the message in the given platform to reach the right audience. So plan ahead how you want to communicate your message and what tone you want to use. </p> <p>When planning the message, it is good to plan the emotions we want to trigger in the audience. For example, if we want to promote our game, we can use the following emotions: Excitement, Joy, Curiosity, and Fun. If we want to promote yourself by doing something interesting, you can use the following emotions: Curiosity, Fun, Surprise and Pride.</p>"},{"location":"portfolio/12-promoting/#call-to-action","title":"Call to action","text":"<p>The call to action is the action we want your audience to take. It can be: Download the game, Read my Resume, be part of by community, Take a look on my Repository, Buy the game, Play the game, Follow me, Subscribe, Share, Like, Comment, and more.</p>"},{"location":"portfolio/12-promoting/#results","title":"Results","text":"<p>Whatever is your goal, you need to define the results you want to achieve so you should track and measure your progress. You can use tools like Google Analytics mostly for web content, Google Firebase for apps and games and many other. </p> <p>Here some ideas of results you can track: Number of downloads, page views, number of people reaching you, number of followers, number of subscribers, number of likes, number of comments, number of shares, number of retweets, number of reposts and more.</p>"},{"location":"portfolio/12-promoting/#improving-the-promotion","title":"Improving the promotion","text":"<p>If you really want to go deep in this rabbit hole, I highly recommend you to create performance measurements such as KPI dashboard to track your progress and improve your promotion. You can use tools like Google Data Studio or Tableau. With the KPI dashboard, you can track your progress and improve your promotion. You can also use it to track your competitors and learn from them.</p> <p>Another good strategy is to A/B test your promotion. You can use tools like Google Optimize to create different versions of your promotion and test which one is the best. You can also use it to test different messages, tones, and call to actions. I cannot stress enough how important it is to test your promotion, the most successful companies in the world do it. Zynga even quoted once \"We are not in the business of making games, we are in the business of testing games\" and \"We are a data warehouse maskerated as a game company\". So being data-driven and customer-centric is the key to success.</p>"},{"location":"portfolio/12-promoting/#homework","title":"Homework","text":"<ul> <li>Create a promotion strategy for yourself and your work.</li> <li>What would be your first content and medium to promote?</li> <li>What is the message and the tone?</li> <li>Define your call to action.</li> <li>How do you measure your results?</li> <li>How would you plan to improve your promotion?</li> </ul>"},{"location":"portfolio/12-promoting/#conclusion","title":"Conclusion","text":"<p>I hope you enjoyed this content. If you have any questions, please create an issue in this repository. If you want to contribute, please create a pull request. If you want to support me, please share this content with your friends and colleagues. If you want to support me financially, please consider buying me a coffee or a very fancy wine.</p>"},{"location":"portfolio/13-cover-letter/","title":"How to write an Awesome Cover Letter","text":""},{"location":"portfolio/13-cover-letter/#what-is-a-cover-letter","title":"What is a cover letter?","text":"<p>A cover letter is a document that is sent together with your resume. It is a way to introduce yourself to the company, explain why you're applying for the job, and why you're a good fit for the position. You should also explain why you're interested in the company, and why you want to work for them.</p> <p>Nowadays writing a Cover Letter seems to be a lost art. Most of the time, people just send their resume and that's it. But, if you want to stand out from the crowd, you should write a cover letter. </p> <p>In a cover letter you can be more personal to sell yourself more effectively. The core of it is to link your skills and history to what they do and need. Now lets see how to write a cover letter.</p>"},{"location":"portfolio/13-cover-letter/#strategies-to-write-a-cover-letter","title":"Strategies to write a cover letter","text":"<p>There are many strategies to write a cover letter. But the main idea is to be personal and try to sell yourself more effectively. Here are some strategies to write a cover letter:</p> <ul> <li>Be clear, concise and specific. You should try to be clear and try to sell yourself more effectively. Don't waste their time with long and boring paragraphs. You can do that by linking your skills and history to what they do and need. You can also try to show your personality and your passion for the job;</li> <li>Be personal, enthusiastic and professional: You should try to be personal setting the best tone that matches your style and the company, just don't exaggerate. You can also try to show your personality and your passion for the job. But, you should also be professional and try to be polite and respectful. If you're unsure about the company culture, you can do that by using a formal language and a professional tone;</li> </ul>"},{"location":"portfolio/13-cover-letter/#knowing-your-audience","title":"Knowing your audience","text":"<p>Usually, game companies are interested in people who are passionate about games. But there are some core differences between what profiles AAA game studios and Indie Studios seek for. AAA usually follow the path of the specialist, while Indie Studios usually, the generalist. So try to match this style of writing in your cover letter.</p> <p>Another relevant aspect is the company culture. You should try to match the tone of your cover letter to the company culture. If you're unsure about the company culture, you can do that by using a formal language and a professional tone. Or try to connect with some employees of the company and ask them about the company culture.</p> <p>Research about the company. Try to find out what they do, what they are looking for, and what they are interested in. You can do that by reading their website, their blog, and their social media. They tend to prefer people that have culture, passion and goals aligned with theirs. So try to show that you are passionate about their products and their goals.</p> <p>Play their games, and use their products. An awesome icebreaker can be yourself telling about some funny bug or how you enjoyed the game connecting it to your life. It would be awesome if you can show that you are a fan of their products to the point to even create mods or fan art.</p>"},{"location":"portfolio/13-cover-letter/#write-interesting-content","title":"Write interesting content","text":"<p>You should try to write memorable sentences to maintain your reader engaged. One strategy is to start the paragraphs with a short and powerful sentence that summarizes the the topic you are about to write. Arguably, you can also try to use a powerful quote to start your cover letter.</p> <p>Your first sentence plays a huge role in your cover letter, it should be meaningful to you and to the reader. Chances are, they wont be reading the whole cover letter, so you should try to make the first sentence as interesting as possible. Try to be catchy and try to make them want to read more, but take care not to exaggerate.</p> <p>Sometimes your content is really relevant to you but it might not be that relevant to the company or the job. Sometimes we get too excited and we want to tell everything about ourselves and how passionate we are, by try telling all the things you ever did. But you should try to be clear and concise. Just add some breadcrumbs for the reader ask you in the interview about the things you didn't mention in the cover letter.</p>"},{"location":"portfolio/13-cover-letter/#strengths","title":"Strengths","text":"<p>You should try to highlight your strengths. You can do that by using a list of your skills and achievements. They will try to extrapolate the value you brought to the previous companies you worked for to themselves. So try show that you are a good fit for the job by giving success stories about your acchievents. Some examples:</p> <ul> <li>AAA centred: I published a game on Steam with 100k downloads while a student. I acted as the main developer and tech lead, responsible for creating tools for level designers and AI system for the game. Besides that, I played a fundamental role to cut the scope of the game to make it possible to be released on time and consequently the sanity of the team;</li> <li>Indie: I am fearless. I am not afraid to fail or take risks. This behavior pressures me to have a good plan and to be prepared for the worst. Once we tried a very ambitious feature that we thought would be awesome, we tracked the adoption of it, just to discover that nobody used it. We learned from it and we tried again with a smaller scope and it worked. We released the game on time and we were happy with the result;</li> </ul> <p>Pay attention that some companies might not like to see that you are a risk taker. So try to be careful with that, and ask some employees of the company and ask them about the company culture.</p>"},{"location":"portfolio/13-cover-letter/#closure","title":"Closure","text":"<p>You should try to close your cover letter with summary, thank them for their consideration and time, and add a call to action. You can also try to add a call to action to connect with you on social media or to visit your website, or just say that you are in hopes to talk with them in person soon.</p>"},{"location":"portfolio/13-cover-letter/#create-a-template","title":"Create a Template","text":"<p>You should try to create a template for your cover letter. A way of doing it is to add replaceable tags for the company name, the job title, and the date. Try to mark those tags in some colorful way, so you can easily find them and replace them. You can also try to add some comments to help you remember what to write in each tag.</p> <p>Another strategy to templating your cover letter is to create one template for every type of company. For example, you can create a template for AAA game studios, another for Indie game studios, and another for game companies. You can also create a template for each type of job. For example, you can create a template for a game designer, another for a gameplay developer, and another for a UI/frontend developer.</p> <p>But if you pursue this path, you have to pay attention to the examples and products/games that you use in your cover letter. You will have to change them to match the company you are applying for.</p>"},{"location":"portfolio/13-cover-letter/#homework","title":"Homework","text":"<p>Write a Cover Letter for a game company. </p>"},{"location":"support/50rs-button/","title":"50rs button","text":""},{"location":"tools/git/","title":"Try Git","text":"<p>This document started as a copy from  this Source</p> <p>Here is a helpful three-part tutorial:</p> <ol> <li>Read About Version Control &amp; the excellent Intro to Git</li> <li>Install Git for the command line. See the information below.</li> <li>Do the Try Git interactive tutorial. It basically runs you through using Git on the command line and with Github.</li> </ol> <p>This information below contains recommended resources for learning Git and Github, which we will use this semester to store, manage and share our projects. </p> <p></p> <p>GitHub is a web-based hosting service for software development projects that use the Git revision control system. GitHub offers free accounts for open source projects. As of May 2011, GitHub was the most popular open source code repository site. The site provides social networking functionality such as feeds, followers and the network graph to display how developers work on their versions of a repository. [Wikipedia] </p> Installing Git <p>Mac OSX</p> <ul> <li>Git can be installed in Xcode via installing the Command Line Tools at Preferences-&gt;Downloads-&gt;Components</li> <li>You can also install Git via the download from the git website or through package management tools such as Homebrew and Macports</li> </ul> <p>Windows</p> <ul> <li>Install Git for Windows which includes a Unix-like Bash terminal environment that matches the commands in the Try Git tutorial.</li> <li>If you're familiar with the Win/DOS Command shell but are new to Bash, check out this DOS - Bash command comparison</li> </ul> <p>Linux</p> <ul> <li>Install git through your distro's package management system</li> </ul> <p>Configure Git</p> <ul> <li>Set you username and email address (only need to do this once).</li> <li> <pre><code>$ git config --global user.name \"YOUR_FULL_NAME\"\n$ git config --global user.email \"YOUR_EMAIL_ADDRESS\"</code></pre> </li> <li>Turn on git colors with makes reading status and diffs much easier (only need to do this once). You shouldn't need to do this if you're using the Git Bash installed by Git for Windows.</li> <li> <pre><code>$ git config --global color.ui true</code></pre> </li> </ul> Useful Command Line Commands <p>The following are pulled form the excellent Introduction to Git. Bash/Shell A small list of the bread and butter Bash/Shell/Terminal commands. Some of these commands  respond to the\"-h\" or  \"--help\" options which print out a small usage reference. Many of the simple commands (ls, cp, mv) don't respond to \"--help\" but will simply print out a usage line when they don't understand the given arguments.</p> <pre><code>$ ls --help</code></pre> <p>Also, most have manual pages which can be reached by using the \"man\" command and then the program name. Here's how to open the manual page for ls:</p> <pre><code>$ man ls</code></pre> <p>Use the UP &amp; DOWN arrow keys to scroll and 'q' to quit.</p> <ul> <li>ls - list contents of the current dir</li> <li>cd - change directory; ~/ refers to your home dir, . refers to the current dir, ../ refers to one directory up, ../../ refers to 2 dirs up, etc</li> <li>pwd - prints full path to the current dir (where we are)</li> <li>mkdir - make a new dir</li> <li>touch - create an empty file or update the timestamp on an existing file</li> <li>mv - move a file or dir</li> <li>cp - copy a file or folder; the -R option copies files &amp; folders recursively (need to copy the entire contents of a given folder if it als contains folders)</li> </ul> <p>Git This is just a small list of git commands. See the references below for more detailed info. All of the git commands respond to \"--help\".</p> <ul> <li>git init - initialize a dir for git source control management</li> <li>git clone - clone a git repository from another location (another git controlled folder, somewhere online, GIthub, etc)</li> <li>git checkout - switch to a branch, commit, or tag; the base location is the master branch</li> <li>git status - print status of the staging area (modified files, current branch, etc)</li> <li>git add - add a file or folder to the staging area, responds to wildcards like *.txt and . which refers to all modified files (careful with this one!)</li> <li>git rm - remove a file or folder form the staging area, removing a modfied file may require the -f argument to force it, -r adds files recursively (useful within folders). </li> <li>git mv - move or rename files or folders, only works for files currently managed by git (aka added previously)</li> <li>git commit -m \"some message\" - commit the current staging area (adds, modifications, removals); the -m option specifies the log message</li> <li>git branch some_branch - creates a branch called \"some_branch\"; don;t forget to switch to it using git checkout!</li> <li>git merge some_branch - merge a branch into the current branch, in this case merge \"some_branch\" with \"master\"</li> </ul> References <p>Books &amp; Tutorials</p> <ul> <li>Try Git online course by Code School + Github. (thx @codeSchool)</li> <li>Pro Git book by Scott Chacon (free PDF). (thx @hilarymason)</li> <li>Interactive Tutorial by Code School. (thx @maxhawkins, @raunaqgupta)</li> </ul> <p>Client Apps: </p> <ul> <li>SourceTree (thx @smallfly) </li> <li>Tower app for Mac OSX ($30 for students). (thx @pitaru)</li> <li>Github for Mac </li> <li>Git-Friendly shell scripts by Jamie Wilkinson. (thx @jamiew)</li> </ul> <p> Videos:</p> <ul> <li>Github Learning Series Video Tutorials. (thx @julianoliver)</li> <li>Github's official YouTube channel. (thx @matthewmccull)</li> <li>Getting Git video by Scott Chacon. (thx @richbate)</li> <li>Mastering Git Basics by Tom Preston-Werner. (thx @maxhawkins)</li> <li>Code Journal Part 1 by James Paterson. (thx @joshuadavis)</li> <li>GitCasts. (thx @bgstaal)</li> </ul> <p>Web Sites/Pages:</p> <ul> <li>Official Git Reference.</li> <li>Github Official Teaching Materials. (thx @matthewmccull)</li> <li>Github Setup Bootcamp.</li> <li>Getting Started with Git by Git-SCM. (thx @julianoliver)</li> <li>Introduction to Git &amp; Git Workflow for Beginners by Steve Klise. (thx @atduskgreg)</li> <li>A Visual Git Reference by Mark Lodato. (thx @moskovich)</li> <li>The openFrameworks Git Workflow by the OF community. (thx @zachlieberman)</li> <li>Git - The Simple Guide by Roger Dudler. (thx @lennyjpg)</li> <li>How to Learn Git (Link Roundup) by Kevin Suttle. (thx @kevinSuttle)</li> <li>A Successful Git Branching Model by @nvie. (thx @smallfly) </li> </ul> <p>Cheat Sheets:</p> <ul> <li>Zach Lieberman's Cheatsheet. (thx @zachlieberman)</li> <li>Git Cheatsheet by Andrew Peterson/NDP Software. (thx @julienbayle)</li> <li>Git Developer Cheatsheet (PDF) by Salesforce.com. (thx @julienbayle)</li> </ul>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/neuro-divergence/","title":"neuro divergence","text":""},{"location":"blog/category/teaching/","title":"teaching","text":""},{"location":"blog/category/autism/","title":"autism","text":""},{"location":"blog/category/adhd/","title":"adhd","text":""},{"location":"blog/category/high-abilities/","title":"high abilities","text":""},{"location":"blog/category/giftedness/","title":"giftedness","text":""},{"location":"blog/category/algorithms/","title":"algorithms","text":""},{"location":"blog/category/data-structures/","title":"data structures","text":""},{"location":"blog/category/c/","title":"c++","text":""},{"location":"blog/category/optimization/","title":"optimization","text":""},{"location":"blog/category/memory/","title":"memory","text":""},{"location":"blog/category/cache/","title":"cache","text":""},{"location":"blog/category/map/","title":"map","text":""},{"location":"blog/category/unordered_map/","title":"unordered_map","text":""},{"location":"blog/category/maze/","title":"maze","text":""},{"location":"blog/category/vector/","title":"vector","text":""},{"location":"blog/category/bitfield/","title":"bitfield","text":""},{"location":"blog/category/maze-generation/","title":"maze generation","text":""},{"location":"blog/category/gamedev/","title":"gamedev","text":""},{"location":"blog/category/cmake/","title":"cmake","text":""},{"location":"blog/category/cpm/","title":"cpm","text":""},{"location":"blog/category/sdl3/","title":"sdl3","text":""},{"location":"blog/category/sdl2/","title":"sdl2","text":""},{"location":"blog/category/clion/","title":"clion","text":""},{"location":"blog/category/ferpa/","title":"ferpa","text":""},{"location":"blog/category/privacy/","title":"privacy","text":""},{"location":"blog/category/academic-honesty/","title":"academic honesty","text":""},{"location":"blog/category/plagiarism/","title":"plagiarism","text":""},{"location":"blog/category/ai/","title":"ai","text":""},{"location":"blog/category/chatgpt/","title":"chatgpt","text":""},{"location":"blog/category/canvas/","title":"canvas","text":""},{"location":"blog/category/turnitin/","title":"turnitin","text":""},{"location":"blog/category/moss/","title":"moss","text":""},{"location":"blog/category/github-copilot/","title":"github copilot","text":""},{"location":"blog/category/mixed-reality/","title":"mixed Reality","text":""},{"location":"blog/category/virtual-reality/","title":"virtual reality","text":""},{"location":"blog/category/augmented-reality/","title":"augmented reality","text":""},{"location":"blog/category/augmented-virtuality/","title":"augmented virtuality","text":""},{"location":"blog/category/philosophy/","title":"philosophy","text":""}]}